This experiment corresponds to Section 4.2 in our ISSTA submission. 

We create 3 clones of a function that computes the CRC32 checksum. 
Source code for these 3 clones can be found in 'obfs_clone1.c', 
'obfs_clone2.c', 'obfs_clone3_51min.c' and their corresponding 
pre-compiled binaries are 'obfs_clone1', 'obfs_clone2', 
'obfs_clone3_51min' respectively. Source code for the original 
target (f1) and inner (f2) functions can be found in 'ob.c'.

The source code for the 1st and 3rd clones were created using the 
commands present in 'obfs_clone1_cmd' and 'obfs_clone3_51min_cmd' 
respectively. These files specify options corresponding to various 
obfuscation transformations applied by tigress. The source code for 
the 2nd clone contains annotations which specify transformations to 
be applied at the LLVM IR level.

The 1st clone was compiled to a binary file 'obfs_clone1' using gcc. 
The 2nd and 3rd clones were compiled to binary files 'obfs_clone2' and 
'obfs_clone3_51min' respectively using the clang binary generated by 
building Obfuscator-LLVM.

All of these experiments can be run as a single batch job by running
run_experiments.sh. The log files containing the outputs of each adaptor
synthesis can be found in the 'logs' directory. The 51 minute experiment
described below is commented out in run_experiments.sh, but, can also 
be run as part of run_experiments.sh, or independently by using its 
command given below.

On the FuzzBALL end, we had to turn off system call equivalence 
checking for clones 1 and 3 because the obfuscation transformations 
applied by Tigress cause different system calls to be used, 
for example, mmap.

Please note that these commands require LD_LIBRARY_PATH to have the path
to ../lib, for example, 
  LD_LIBRARY_PATH=`pwd`/../lib/:$LD_LIBRARY_PATH

Command for running experiment with clone1:  
  perl synth-ob-clone1.pl 1332 1333 1 1 -1 15
This experiment takes about 3 minutes to finish. 
We provide the output generated by this experiment in 
synth-ob-clone1.log. The last line in this output should be:
Final adaptors: arg=1,18446744073709551615,,,,,,1,,,,, ret=52,,
Thus, the argument substitution adaptor is 
(1,-1, 0,0, 0,0, 0,1, 0,0, 0,0). Please note that the obfuscated
inner function in obfs_clone1.c (f2) takes its 2nd and 5th arguments
in floating point argument registers. Floating point arguments are
currently unsupported in our implementation. Therefore, this 
argument substitution adaptor should be interpreted only for the 1st
6 integer or pointer arguments to f2. Below is f2's signature from
obfs_clone1.c.

long f2(void *bogus___2 , double bogus___1 , long bogus___3 , unsigned char *message ,
         double bogus___4 , int len ) ;

Since f2's 2nd argument is placed into a floating point register, f2's 
4th argument is actually placed in the 3rd integer or pointer 
argument register. Due to this, the argument substitution for f2's 4th
argument appears at position 3 in the argument substitution adaptor
above.. Therefore, f2's 4th argument is copied over, as per the 
argument substitution adaptor, from f1's 1st argument. 
Similarly, f2's 6th argument appears at position 4 in the argument 
substitution adaptor, and as per the adaptor, is copied over from 
the 2nd argument to f1.
 
Command for running experiment with clone2:  
  perl synth-ob-clone2.pl 1332 1333 1 1 -1 15
This experiment finishes in about 10 seconds. We provide the output 
generated by this experiment in synth-ob-clone2.log

In our ISSTA submission, we report synthesis of the correct adaptor 
for all 3 clones in less than 3 minutes. While this is true for the 
1st and 2nd clones, this is not entirely correct in case of clone 3, 
if all the obfuscation transformations used for clone1 are also used 
for clone3. 

With the anti-branch analysis transformation 
(http://tigress.cs.arizona.edu/transformPage/docs/encodeBranches/index.html) 
turned on, the adaptor search fails to find the right adaptor. We 
provide the source code in 'obfs_clone3_notworking.c' generated by the 
tigress command in 'obfs_clone3_notworking_cmd', the corresponding 
binary file compiled by Obfuscator-LLVM's clang in 
'obfs_clone3_notworking', and the perl script to drive the experiment 
in 'synth-ob-clone3-notworking.pl'.
The command for running this experiment: 
  perl synth-ob-clone3-notworking.pl 1332 1333 1 1 -1 15.
We provide the output generated by this experiment in 
'synth-ob-clone3-notworking.log'.
The reason for this failure is that the code introduced by anti-branch 
analysis tries to access addresses unsupported by FuzzBALL.

With the anti-branch analysis transformation turned off, we find the 
adaptor within 51 minutes.
Command for running experiment with clone3:  
  perl synth-ob-clone3-51min.pl 1332 1333 1 1 -1 15
We provide the output generated by this experiment in 
synth-ob-clone3-51min.log. Please note that 51 minutes is an upper bound,
this log file shows that we were able to synthesize this adaptor in 
24.7 minutes.

We can synthesize the correct adaptor in case of clone3 within 
3 minutes, when we turn off the function virtualization transformation 
(http://tigress.cs.arizona.edu/transformPage/docs/virtualize/index.html)
as well as the anti branch analysis transformation .
Command for running experiment with clone3 under 3 minutes: 
  perl synth-ob-clone3-3min.pl 1332 1333 1 1 -1 15 
This command uses the binary 'obfs_clone3_3min', the corresponding 
source code for which is available in 'obfs_clone3_3min.c'. 
We provide the output generated by this experiment in 
synth-ob-clone3-3min.log. 
The last line of this output is:
  Final adaptors: arg=,,,,,1,,,,,,, ret=52,, 

This argument substitution adaptor is to be interpreted as 
(0,0, 0,0, 0,1, 0,0, 0,0, 0,0) with the return value adaptor as 
(52, 0). These adaptors can be verified in the same way as done in
the case of clone 1. The correctness of these adaptors can also 
be verified from the source code in obfs_clone3_3min.c.

The Tigress command used for creating obfs_clone3_3min.c can be found 
in 'obfs_clone3_3min_cmd'. This command turns on Just-in-time function 
transformation, randomizing of arguments, insertion of 4 bogus 
arguments, adding diversity through duplicate operators and 
superoperators.

../bin/fuzzball
../bin/stp-old-dynamic
fuzz-start-addr : 0x000000000042df90
f1:   0x000000000042d8d0 @ 0x42de84
f2:   0x000000000042d980
wrap_f2: 0x000000000042ddf0 @ 0x42dedd
arg0: 0x0000000000705db0
arg1: 0x0000000000705db8
arg2: 0x0000000000705dc0
arg3: 0x0000000000705de0
arg4: 0x0000000000705dd0
arg5: 0x0000000000705da0
branch: 0x42df12
1332 = f1(2)
1333 = f2(6)
synth_ret_opt = -synthesize-return-adaptor return-typeconv:0x000000000042d980:0x42dee2:6
default adaptor = 0 0 0 1 0 1 0 1 0 1 0 1 ret-adaptor = 0 0
Checking simple adaptor = 0,0,0,1,0,1,0,1,0,1,0,1, ret adaptor = 0,0
../bin/fuzzball -linux-syscalls -arch x64 ./obfs_clone2_static -solver smtlib -solver-path ../bin/stp-old-dynamic -smtlib-solver-type stp -fuzz-start-addr 0x000000000042df90 -symbolic-long 0x0000000000705db0=a -symbolic-long 0x0000000000705db8=b -symbolic-long 0x0000000000705dc0=c -symbolic-long 0x0000000000705de0=d -symbolic-long 0x0000000000705dd0=e -symbolic-long 0x0000000000705da0=f -trace-sym-addr-details -trace-sym-addrs -trace-syscalls -omit-pf-af -trace-temps -trace-regions -trace-memory-snapshots -trace-tables -table-limit 12 -trace-binary-paths-bracketed -trace-basic -trace-conditions -trace-decisions -store-byte 0x42420000=0x61 -match-syscalls-in-addr-range 0x42de84:0x42de89:0x42dedd:0x42dee2 -store-long 0x42420000=0x42420008 -store-long 0x42420008=0x42420010 -store-long 0x42420010=0x42420018 -synthesize-adaptor simple:0x42dedd:2:0x000000000042d980:6 -extra-condition a_is_const:reg1_t==0x0:reg1_t -extra-condition a_val:reg64_t==0x0000000000000000:reg64_t -extra-condition b_is_const:reg1_t==0x0:reg1_t -extra-condition b_val:reg64_t==0x0000000000000001:reg64_t -extra-condition c_is_const:reg1_t==0x0:reg1_t -extra-condition c_val:reg64_t==0x0000000000000001:reg64_t -extra-condition d_is_const:reg1_t==0x0:reg1_t -extra-condition d_val:reg64_t==0x0000000000000001:reg64_t -extra-condition e_is_const:reg1_t==0x0:reg1_t -extra-condition e_val:reg64_t==0x0000000000000001:reg64_t -extra-condition f_is_const:reg1_t==0x0:reg1_t -extra-condition f_val:reg64_t==0x0000000000000001:reg64_t -extra-condition 'a_is_const:reg1_t==0:reg1_t | a_val:reg64_t>=$0xffffffffffffffff:reg64_t' -extra-condition 'a_is_const:reg1_t==0:reg1_t | a_val:reg64_t<=$0xf:reg64_t' -extra-condition 'b_is_const:reg1_t==0:reg1_t | b_val:reg64_t>=$0xffffffffffffffff:reg64_t' -extra-condition 'b_is_const:reg1_t==0:reg1_t | b_val:reg64_t<=$0xf:reg64_t' -extra-condition 'c_is_const:reg1_t==0:reg1_t | c_val:reg64_t>=$0xffffffffffffffff:reg64_t' -extra-condition 'c_is_const:reg1_t==0:reg1_t | c_val:reg64_t<=$0xf:reg64_t' -extra-condition 'd_is_const:reg1_t==0:reg1_t | d_val:reg64_t>=$0xffffffffffffffff:reg64_t' -extra-condition 'd_is_const:reg1_t==0:reg1_t | d_val:reg64_t<=$0xf:reg64_t' -extra-condition 'e_is_const:reg1_t==0:reg1_t | e_val:reg64_t>=$0xffffffffffffffff:reg64_t' -extra-condition 'e_is_const:reg1_t==0:reg1_t | e_val:reg64_t<=$0xf:reg64_t' -extra-condition 'f_is_const:reg1_t==0:reg1_t | f_val:reg64_t>=$0xffffffffffffffff:reg64_t' -extra-condition 'f_is_const:reg1_t==0:reg1_t | f_val:reg64_t<=$0xf:reg64_t' -synthesize-return-adaptor return-typeconv:0x000000000042d980:0x42dee2:6 -extra-condition ret_type:reg8_t==0x0:reg8_t -extra-condition ret_val:reg64_t==0x0000000000000000:reg64_t -disable-ce-cache -return-zero-missing-x64-syscalls -iteration-limit 100000000 -dont-compare-linux-syscalls -region-limit 8 -branch-preference 0x42df12:0 -trace-iterations -trace-assigns -solve-final-pc -trace-stopping -random-seed 416303 -- ./obfs_clone2_static 1332 1333 g ceinputs
  Loading executable from ./obfs_clone2_static
  Loading       text segment from 00400000 to 00501900
  Loading       data segment from 00701eb0 to 00703db0
                Zero filling from 00703db0 to 00706528
          Extra zero filling from 00706528 to 00707000
  Setting initial break to 0x00707000
  Loading       NOTE segment from 00400190 to 004001d4
  Loading        TLS segment from 00701eb0 to 00701ed0
  Loading      STACK segment from 00000000 to 00000000
  Loading      RELRO segment from 00701eb0 to 00702000
  Skipping missing env. var DISPLAY
  Skipping missing env. var EDITOR
  From real env., setting env. var HOME to /home/grad06/xxxxxxx
  From real env., setting env. var LANG to en_US.UTF-8
  From real env., setting env. var LOGNAME to xxxxxxx
  Skipping missing env. var PAGER
  From real env., setting env. var PATH to /home/grad06/xxxxxxx/.opam/system/bin:/home/fac05/xxxxxxxx/soft/amd64/caml/ocaml/4.02.1/bin:/home/fac05/xxxxxxxx/soft/amd64/caml/opam/1.1.2/bin:/soft/scheme/mit-gnu/9.2/trusty64/bin:/soft/perl5.14.1/bin:/soft/jdk1.7.0_76/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/soft/netbeans-8.0.2/bin:/opt/gnu/bin:/opt/local/bin:/soft/vt-1.07:/usr/X11R6/bin:/soft/X11R6.3/bin:/soft/math8.0.1/bin:/export/scratch/xxxxxxx/fuzzball-adaptorsynth/exec_utils/:/export/scratch/xxxxxxx/fuzzball-adaptorsynth/stp:/export/scratch/xxxxxxx/code/dwarfdump/:/export/scratch/xxxxxxx/fuzzball-adaptorsynth/libasmir/apps:/export/scratch/xxxxxxx/spim-install/usr/bin/spim/:/export/scratch/xxxxxxx/LLVM/build/bin:/export/scratch/xxxxxxx/solvers
  From real env., setting env. var PWD to /export/scratch/xxxxxxx/fuzzball-synth/eg/artifact/obfs
  From real env., setting env. var SHELL to /bin/bash
  From real env., setting env. var TERM to xterm-256color
  From real env., setting env. var USER to xxxxxxx
  Skipping missing env. var USERNAME
  Skipping missing env. var XAUTHORITY
  Initial stack pointer is 0xbfffd000
  Starting address 0x00400f7e, fuzz start 0x0042df90
  Initial registers:
  %rax: 0:reg64_t
  %rbx: 0:reg64_t
  %rcx: 0:reg64_t
  %rdx: 0:reg64_t
  %rsi: 0:reg64_t
  %rdi: 0:reg64_t
  %rsp: 0xbfffd000:reg64_t
  %rbp: 0:reg64_t
  %r8: 0:reg64_t
  %r9: 0:reg64_t
  %r10: 0:reg64_t
  %r11: 0:reg64_t
  %r12: 0:reg64_t
  %r13: 0:reg64_t
  %r14: 0:reg64_t
  %r15: 0:reg64_t
  CF: false
  PF: false
  AF: false
  ZF: false
  SF: false
  OF: false
  YMM0: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  YMM1: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  YMM2: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  YMM3: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  YMM4: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  YMM5: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  YMM6: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  YMM7: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  YMM8: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  YMM9: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  YMM10: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  YMM11: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  YMM12: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  YMM13: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  YMM14: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  YMM15: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  Pre-fuzzing execution...
  uname(0xbfffcd80) = 0 (0x00000000)
  brk(0x00000000) = 7368704 (0x00707000)
  brk(0x007081c0) = 7373248 (0x007081c0)
  arch_prctl(4098, 0x00707880) = 0 (0x00000000)
  readlink("/proc/self/exe", 0xbfffbeb0, 4096) = 63 (0x0000003f)
  brk(0x007291c0) = 7508416 (0x007291c0)
  brk(0x0072a000) = 7512064 (0x0072a000)
  access("/etc/ld.so.nohwcap", 0x0) = -2 (0xfffffffffffffffe)
  open("ceinputs", 0x0, 0o0) = 3 (0x00000003)
  GSSM#make_snap 1 -> 2
  GSM#make_snap called
  Setting up symbolic values:
  GSSSM#make_snap 2 -> 3
  linux_syscalls#make_snap called
  Took snapshot
  Iteration 1:
  fstat(3, 0xbfffc8b0) = 0 (0x00000000)
  mmap(0x00000000, 4096, 0x3, 0x22, -1, 0) = 1342177280 (0x50000000)
  read(3, 0x50000000, 4096) = 31 (0x0000001f)
  fstat(1, 0xbfffc570) = 0 (0x00000000)
  mmap(0x00000000, 4096, 0x3, 0x22, -1, 0) = 1342181376 (0x50001000)
  write(1, 0x50001000, 15)
  read ce inputs
   = 15 (0x0000000f)
  write(1, 0x50001000, 12)
  Starting f1
   = 12 (0x0000000c)
  SRFM#make_sym_snap called
  FM#make_f1_conc_snap called
  GSSM#make_snap 3 -> 4
  GSM#make_snap called
  FM#make_f1_special_handlers_snap
  linux_syscalls#make_f1_snap called
  linux_syscalls#make_snap called
  SRFM#save_sym_se saving f1_hash_list.length = 0
  FM#save_f1_conc_se called
  AS#ready to apply (0.000000 sec). eof1
  GSSM#reset4_3 4 -> 3 
  GSM#reset called
  GHM#clear called
  FM#reset_f1_special_handlers_snap
  linux_syscalls#reset_f1_snap called
  write(1, 0x50001000, 13)
  Completed f1
   = 13 (0x0000000d)
  write(1, 0x50001000, 20)
  Starting adapted_f1
   = 20 (0x00000014)
  SRFM#make_f2_sym_snap called
  FM#make_f2_conc_snap called
  GSSM#make_snap 3 -> 4
  GSM#make_snap called
  FM#make_f2_special_handlers_snap
  linux_syscalls#make_f2_snap called
  linux_syscalls#make_snap called
  Starting simple adaptor
  setting arg=1:reg64_t
  setting arg=1:reg64_t
  setting arg=1:reg64_t
  setting arg=1:reg64_t
  setting arg=1:reg64_t
  setting arg=0x42420000:reg64_t
  AS#ready to apply (0.000000 sec). sof2
  SRFM#Generating structure adaptor formulas...SRFM#ready to apply (0.000000 sec).
  exec_runloop#thunk() should save arg regs here
  Stopping at null deref at 0x0042db54
  Coverage increased to 3766 on 1
  Path: 
  Final path: 
  Satisfiable.
  Input vars: b_val=0x1 c_val=0x1 d_val=0x1 f_val=0x1 e_val=0x1 
elapsed time = 0, last CE search time = 0
Mismatch on input 0x42420000, 0x1; adding as test
Trying to synthesize with sane_addr=0x42420018
../bin/fuzzball -linux-syscalls -arch x64 ./obfs_clone2_static -solver smtlib -solver-path ../bin/stp-old-dynamic -smtlib-solver-type stp -fuzz-start-addr 0x000000000042df90 -trace-temps -adaptor-search-mode -trace-iterations -trace-assigns -solve-final-pc -table-limit 12 -return-zero-missing-x64-syscalls -disable-ce-cache -synthesize-adaptor simple:0x42dedd:2:0x000000000042d980:6 -extra-condition 'a_is_const:reg1_t==0:reg1_t | a_val:reg64_t>=$0xffffffffffffffff:reg64_t' -extra-condition 'a_is_const:reg1_t==0:reg1_t | a_val:reg64_t<=$0xf:reg64_t' -extra-condition 'b_is_const:reg1_t==0:reg1_t | b_val:reg64_t>=$0xffffffffffffffff:reg64_t' -extra-condition 'b_is_const:reg1_t==0:reg1_t | b_val:reg64_t<=$0xf:reg64_t' -extra-condition 'c_is_const:reg1_t==0:reg1_t | c_val:reg64_t>=$0xffffffffffffffff:reg64_t' -extra-condition 'c_is_const:reg1_t==0:reg1_t | c_val:reg64_t<=$0xf:reg64_t' -extra-condition 'd_is_const:reg1_t==0:reg1_t | d_val:reg64_t>=$0xffffffffffffffff:reg64_t' -extra-condition 'd_is_const:reg1_t==0:reg1_t | d_val:reg64_t<=$0xf:reg64_t' -extra-condition 'e_is_const:reg1_t==0:reg1_t | e_val:reg64_t>=$0xffffffffffffffff:reg64_t' -extra-condition 'e_is_const:reg1_t==0:reg1_t | e_val:reg64_t<=$0xf:reg64_t' -extra-condition 'f_is_const:reg1_t==0:reg1_t | f_val:reg64_t>=$0xffffffffffffffff:reg64_t' -extra-condition 'f_is_const:reg1_t==0:reg1_t | f_val:reg64_t<=$0xf:reg64_t' -synthesize-return-adaptor return-typeconv:0x000000000042d980:0x42dee2:6 -match-syscalls-in-addr-range 0x42de84:0x42de89:0x42dedd:0x42dee2 -branch-preference 0x42df12:1 -trace-conditions -omit-pf-af -trace-syscalls -trace-decisions -trace-stopping -trace-regions -trace-binary-paths-bracketed -trace-memory-snapshots -trace-sym-addr-details -trace-sym-addrs -trace-tables -trace-basic -zero-memory -store-byte 0x42420014=0x0 -store-byte 0x4242000f=0x0 -store-byte 0x4242000e=0x0 -store-byte 0x42420007=0x0 -store-byte 0x42420017=0x0 -store-byte 0x42420016=0x0 -store-byte 0x4242000c=0x0 -store-byte 0x4242000d=0x0 -store-byte 0x42420006=0x0 -store-byte 0x42420005=0x0 -store-byte 0x42420015=0x0 -store-byte 0x42420004=0x0 -store-long 0x42420000=0x42420008 -store-long 0x42420008=0x42420010 -store-long 0x42420010=0x42420018 -region-limit 8 -dont-compare-linux-syscalls -random-seed 4544924 -- ./obfs_clone2_static 1332 1333 f tests
  Loading executable from ./obfs_clone2_static
  Loading       text segment from 00400000 to 00501900
  Loading       data segment from 00701eb0 to 00703db0
                Zero filling from 00703db0 to 00706528
          Extra zero filling from 00706528 to 00707000
  Setting initial break to 0x00707000
  Loading       NOTE segment from 00400190 to 004001d4
  Loading        TLS segment from 00701eb0 to 00701ed0
  Loading      STACK segment from 00000000 to 00000000
  Loading      RELRO segment from 00701eb0 to 00702000
  Skipping missing env. var DISPLAY
  Skipping missing env. var EDITOR
  From real env., setting env. var HOME to /home/grad06/xxxxxxx
  From real env., setting env. var LANG to en_US.UTF-8
  From real env., setting env. var LOGNAME to xxxxxxx
  Skipping missing env. var PAGER
  From real env., setting env. var PATH to /home/grad06/xxxxxxx/.opam/system/bin:/home/fac05/xxxxxxxx/soft/amd64/caml/ocaml/4.02.1/bin:/home/fac05/xxxxxxxx/soft/amd64/caml/opam/1.1.2/bin:/soft/scheme/mit-gnu/9.2/trusty64/bin:/soft/perl5.14.1/bin:/soft/jdk1.7.0_76/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/soft/netbeans-8.0.2/bin:/opt/gnu/bin:/opt/local/bin:/soft/vt-1.07:/usr/X11R6/bin:/soft/X11R6.3/bin:/soft/math8.0.1/bin:/export/scratch/xxxxxxx/fuzzball-adaptorsynth/exec_utils/:/export/scratch/xxxxxxx/fuzzball-adaptorsynth/stp:/export/scratch/xxxxxxx/code/dwarfdump/:/export/scratch/xxxxxxx/fuzzball-adaptorsynth/libasmir/apps:/export/scratch/xxxxxxx/spim-install/usr/bin/spim/:/export/scratch/xxxxxxx/LLVM/build/bin:/export/scratch/xxxxxxx/solvers
  From real env., setting env. var PWD to /export/scratch/xxxxxxx/fuzzball-synth/eg/artifact/obfs
  From real env., setting env. var SHELL to /bin/bash
  From real env., setting env. var TERM to xterm-256color
  From real env., setting env. var USER to xxxxxxx
  Skipping missing env. var USERNAME
  Skipping missing env. var XAUTHORITY
  Initial stack pointer is 0xbfffd000
  Starting address 0x00400f7e, fuzz start 0x0042df90
  Initial registers:
  %rax: 0:reg64_t
  %rbx: 0:reg64_t
  %rcx: 0:reg64_t
  %rdx: 0:reg64_t
  %rsi: 0:reg64_t
  %rdi: 0:reg64_t
  %rsp: 0xbfffd000:reg64_t
  %rbp: 0:reg64_t
  %r8: 0:reg64_t
  %r9: 0:reg64_t
  %r10: 0:reg64_t
  %r11: 0:reg64_t
  %r12: 0:reg64_t
  %r13: 0:reg64_t
  %r14: 0:reg64_t
  %r15: 0:reg64_t
  CF: false
  PF: false
  AF: false
  ZF: false
  SF: false
  OF: false
  YMM0: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  YMM1: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  YMM2: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  YMM3: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  YMM4: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  YMM5: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  YMM6: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  YMM7: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  YMM8: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  YMM9: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  YMM10: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  YMM11: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  YMM12: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  YMM13: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  YMM14: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  YMM15: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  Pre-fuzzing execution...
  uname(0xbfffcd80) = 0 (0x00000000)
  brk(0x00000000) = 7368704 (0x00707000)
  brk(0x007081c0) = 7373248 (0x007081c0)
  arch_prctl(4098, 0x00707880) = 0 (0x00000000)
  readlink("/proc/self/exe", 0xbfffbeb0, 4096) = 63 (0x0000003f)
  brk(0x007291c0) = 7508416 (0x007291c0)
  brk(0x0072a000) = 7512064 (0x0072a000)
  access("/etc/ld.so.nohwcap", 0x0) = -2 (0xfffffffffffffffe)
  open("tests", 0x0, 0o0) = 3 (0x00000003)
  GSSM#make_snap 1 -> 2
  GSM#make_snap called
  Setting up symbolic values:
  GSSSM#make_snap 2 -> 3
  linux_syscalls#make_snap called
  Took snapshot
  Iteration 1:
  fstat(3, 0xbfffc8b0) = 0 (0x00000000)
  mmap(0x00000000, 4096, 0x3, 0x22, -1, 0) = 1342177280 (0x50000000)
  read(3, 0x50000000, 4096) = 31 (0x0000001f)
  fstat(1, 0xbfffc570) = 0 (0x00000000)
  mmap(0x00000000, 4096, 0x3, 0x22, -1, 0) = 1342181376 (0x50001000)
  write(1, 0x50001000, 12)
  read a test
   = 12 (0x0000000c)
  write(1, 0x50001000, 12)
  Starting f1
   = 12 (0x0000000c)
  SRFM#make_sym_snap called
  FM#make_f1_conc_snap called
  GSSM#make_snap 3 -> 4
  GSM#make_snap called
  FM#make_f1_special_handlers_snap
  linux_syscalls#make_f1_snap called
  linux_syscalls#make_snap called
  SRFM#save_sym_se saving f1_hash_list.length = 0
  FM#save_f1_conc_se called
  AS#ready to apply (0.000000 sec). eof1
  GSSM#reset4_3 4 -> 3 
  GSM#reset called
  GHM#clear called
  FM#reset_f1_special_handlers_snap
  linux_syscalls#reset_f1_snap called
  write(1, 0x50001000, 13)
  Completed f1
   = 13 (0x0000000d)
  write(1, 0x50001000, 20)
  Starting adapted_f1
   = 20 (0x00000014)
  SRFM#make_f2_sym_snap called
  FM#make_f2_conc_snap called
  GSSM#make_snap 3 -> 4
  GSM#make_snap called
  FM#make_f2_special_handlers_snap
  linux_syscalls#make_f2_snap called
  linux_syscalls#make_snap called
  Starting simple adaptor
  setting arg= f_is_const_13318:reg1_t <> false  ? f_val_13317:reg64_t :
   ( f_val_13317:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420000:reg64_t)
  setting arg= e_is_const_13322:reg1_t <> false  ? e_val_13321:reg64_t :
   ( e_val_13321:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420000:reg64_t)
  setting arg= d_is_const_13326:reg1_t <> false  ? d_val_13325:reg64_t :
   ( d_val_13325:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420000:reg64_t)
  setting arg= c_is_const_13330:reg1_t <> false  ? c_val_13329:reg64_t :
   ( c_val_13329:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420000:reg64_t)
  setting arg= b_is_const_13334:reg1_t <> false  ? b_val_13333:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420000:reg64_t)
  setting arg= a_is_const_13338:reg1_t <> false  ? a_val_13337:reg64_t :
   ( a_val_13337:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420000:reg64_t)
  AS#ready to apply (0.000000 sec). sof2
  SRFM#Generating structure adaptor formulas...exec_runloop#thunk() should save arg regs here
  t0 =  a_is_const_13338:reg1_t <> false  ? cast(a_val_13337:reg64_t)L:reg32_t :
   ( a_val_13337:reg64_t == 1:reg64_t  ? 1:reg32_t : 0x42420000:reg32_t)
  t1 =  b_is_const_13334:reg1_t <> false  ? b_val_13333:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420000:reg64_t)
  t2 =  cast(cast(-cast(t0_22073:reg32_t)U:reg64_t)L:reg32_t)H:reg1_t
   ^  0:reg32_t <$ t0_22073:reg32_t 
   
  t3 =  cast(cast(-cast(t0_22073:reg32_t)U:reg64_t)L:reg32_t)H:reg1_t
   ^ t2_22371:reg1_t
    ? 0x99895f28:reg64_t : 0xc790fe97:reg64_t
  t4 =  cast(cast(
   cast(cast(t3_22388:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff83a9a43f:reg64_t
   )L:reg32_t)H:reg1_t
   ^  cast(t3_22388:reg64_t)L:reg32_t <$ 0x7c565bc1:reg32_t 
   
  t5 =   cast(
   cast(cast(t3_22388:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff83a9a43f:reg64_t
   )L:reg32_t
   == 0:reg32_t
    | 
   (cast(cast(
   cast(cast(t3_22388:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff83a9a43f:reg64_t
   )L:reg32_t)H:reg1_t
   ^ t4_22397:reg1_t)
    
  Symbolic branch condition (0x0042d9b6) t5_22398:reg1_t
  Current Path String: 
  Trying false: Unsatisfiable.
  Trying true: Satisfiable.
  Current Path String: 1
  Current path: 1
  t6 =  cast(cast(
   cast(cast(t3_22388:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff85ab9f8f:reg64_t
   )L:reg32_t)H:reg1_t
   ^  cast(t3_22388:reg64_t)L:reg32_t <$ 0x7a546071:reg32_t 
   
  t7 =   cast(
   cast(cast(t3_22388:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff85ab9f8f:reg64_t
   )L:reg32_t
   == 0:reg32_t
    | 
   (cast(cast(
   cast(cast(t3_22388:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff85ab9f8f:reg64_t
   )L:reg32_t)H:reg1_t
   ^ t6_22399:reg1_t)
    
  Symbolic branch condition (0x0042d9cc) t7_22400:reg1_t
  Current Path String: 1
  Trying true: Satisfiable.
  Trying false: Unsatisfiable.
  Current Path String: 11
  Current path: 11
  t8 =  cast(cast(
   cast(cast(t3_22388:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffffc3e8eeb8:reg64_t
   )L:reg32_t)H:reg1_t
   ^  cast(t3_22388:reg64_t)L:reg32_t <$ 0x3c171148:reg32_t 
   
  t9 =   cast(
   cast(cast(t3_22388:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffffc3e8eeb8:reg64_t
   )L:reg32_t
   == 0:reg32_t
    | 
   (cast(cast(
   cast(cast(t3_22388:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffffc3e8eeb8:reg64_t
   )L:reg32_t)H:reg1_t
   ^ t8_22401:reg1_t)
    
  Symbolic branch condition (0x0042d9e2) t9_22402:reg1_t
  Current Path String: 11
  Trying false: Unsatisfiable.
  Trying true: Satisfiable.
  Current Path String: 111
  Current path: 111
  t10 =  cast(cast(
   cast(cast(t3_22388:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffffcc015d57:reg64_t
   )L:reg32_t)H:reg1_t
   ^  cast(t3_22388:reg64_t)L:reg32_t <$ 0x33fea2a9:reg32_t 
   
  t11 =   cast(
   cast(cast(t3_22388:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffffcc015d57:reg64_t
   )L:reg32_t
   == 0:reg32_t
    | 
   (cast(cast(
   cast(cast(t3_22388:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffffcc015d57:reg64_t
   )L:reg32_t)H:reg1_t
   ^ t10_22403:reg1_t)
    
  Symbolic branch condition (0x0042d9f8) t11_22404:reg1_t
  Current Path String: 111
  Trying true: Satisfiable.
  Trying false: Unsatisfiable.
  Current Path String: 1111
  Current path: 1111
  t12 =  cast(cast(
   cast(cast(t3_22388:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff175b4f23:reg64_t
   )L:reg32_t)H:reg1_t
   ^  cast(t3_22388:reg64_t)L:reg32_t <$ 0xe8a4b0dd:reg32_t 
   
  t13 =   cast(
   cast(cast(t3_22388:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff175b4f23:reg64_t
   )L:reg32_t
   == 0:reg32_t
    | 
   (cast(cast(
   cast(cast(t3_22388:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff175b4f23:reg64_t
   )L:reg32_t)H:reg1_t
   ^ t12_22405:reg1_t)
    
  Symbolic branch condition (0x0042da0e) t13_22406:reg1_t
  Current Path String: 1111
  Trying true: Satisfiable.
  Trying false: Unsatisfiable.
  Current Path String: 11111
  Current path: 11111
  t14 =  cast(cast(
   cast(cast(t3_22388:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff200063f5:reg64_t
   )L:reg32_t)H:reg1_t
   ^  cast(t3_22388:reg64_t)L:reg32_t <$ 0xdfff9c0b:reg32_t 
   
  t15 =   cast(
   cast(cast(t3_22388:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff200063f5:reg64_t
   )L:reg32_t
   == 0:reg32_t
    | 
   (cast(cast(
   cast(cast(t3_22388:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff200063f5:reg64_t
   )L:reg32_t)H:reg1_t
   ^ t14_22407:reg1_t)
    
  Symbolic branch condition (0x0042da24) t15_22408:reg1_t
  Current Path String: 11111
  Trying true: Satisfiable.
  Trying false: Unsatisfiable.
  Current Path String: 111111
  Current path: 111111
  t16 =  cast(cast(
   cast(cast(t3_22388:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff2b866e48:reg64_t
   )L:reg32_t)H:reg1_t
   ^  cast(t3_22388:reg64_t)L:reg32_t <$ 0xd47991b8:reg32_t 
   
  t17 =   cast(
   cast(cast(t3_22388:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff2b866e48:reg64_t
   )L:reg32_t
   == 0:reg32_t
    | 
   (cast(cast(
   cast(cast(t3_22388:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff2b866e48:reg64_t
   )L:reg32_t)H:reg1_t
   ^ t16_22409:reg1_t)
    
  Symbolic branch condition (0x0042da3a) t17_22410:reg1_t
  Current Path String: 111111
  Trying false: Unsatisfiable.
  Trying true: Satisfiable.
  Current Path String: 1111111
  Current path: 1111111
  t18 =  cast(cast(
   cast(cast(t3_22388:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff66c88c0d:reg64_t
   )L:reg32_t)H:reg1_t
   ^  cast(t3_22388:reg64_t)L:reg32_t <$ 0x993773f3:reg32_t 
   
  Symbolic branch condition (0x0042da50)  cast(
   cast(cast(t3_22388:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff66c88c0d:reg64_t
   )L:reg32_t
   == 0:reg32_t
   
  Current Path String: 1111111
  Trying false: Satisfiable.
  Trying true: Unsatisfiable.
  Current Path String: 11111110
  Current path: 11111110
  t19 =  cast(cast(
   cast(cast(t3_22388:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff6676a0d8:reg64_t
   )L:reg32_t)H:reg1_t
   ^  cast(t3_22388:reg64_t)L:reg32_t <$ 0x99895f28:reg32_t 
   
  Symbolic branch condition (0x0042da66)  cast(
   cast(cast(t3_22388:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff6676a0d8:reg64_t
   )L:reg32_t
   == 0:reg32_t
   
  Current Path String: 11111110
  Trying false: Satisfiable.
  Trying true: Satisfiable.
  Current Path String: 111111100
  Current path: 111111100
  t20 =  cast(cast(
   cast(cast(t3_22388:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff386f0169:reg64_t
   )L:reg32_t)H:reg1_t
   ^  cast(t3_22388:reg64_t)L:reg32_t <$ 0xc790fe97:reg32_t 
   
  Symbolic branch condition (0x0042da7c)  cast(
   cast(cast(t3_22388:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff386f0169:reg64_t
   )L:reg32_t
   == 0:reg32_t
   
  Current Path String: 111111100
  Trying false: Unsatisfiable.
  Trying true: Satisfiable.
  Current Path String: 1111111001
  Current path: 1111111001
  Starting return-typeconv adaptor
  SRFM#compare_sym_se called len(f1_h_l) = 0 len(f2_h_l)=0
  f1_hash_list_len = 0 f2_hash_list_len = 0
  FM#compare_conc_se called
  all side-effects were equal
  GSSM#reset4_3 4 -> 3 
  GSM#reset called
  GHM#clear called
  FM#reset_f2_special_handlers_snap
  linux_syscalls#reset_f2_snap called
  t21 =  ret_type_13339:reg8_t == 0:reg8_t  ? 0:reg64_t :
   ( ret_type_13339:reg8_t == 1:reg8_t  ? ret_val_13340:reg64_t :
   ( ret_type_13339:reg8_t == 0xb:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
   cast(cast(f_val_13317:reg64_t)L:reg32_t)S:reg64_t :
   ( f_val_13317:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
   cast(cast(e_val_13321:reg64_t)L:reg32_t)S:reg64_t :
   ( e_val_13321:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
   cast(cast(d_val_13325:reg64_t)L:reg32_t)S:reg64_t :
   ( d_val_13325:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
   cast(cast(c_val_13329:reg64_t)L:reg32_t)S:reg64_t :
   ( c_val_13329:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
   cast(cast(b_val_13333:reg64_t)L:reg32_t)S:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x42420000:reg64_t))
   :
   ( a_is_const_13338:reg1_t <> false  ?
   cast(cast(a_val_13337:reg64_t)L:reg32_t)S:reg64_t :
   ( a_val_13337:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x42420000:reg64_t)))))))
   :
   ( ret_type_13339:reg8_t == 0xc:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
   cast(cast(f_val_13317:reg64_t)L:reg32_t)U:reg64_t :
   ( f_val_13317:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
   cast(cast(e_val_13321:reg64_t)L:reg32_t)U:reg64_t :
   ( e_val_13321:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
   cast(cast(d_val_13325:reg64_t)L:reg32_t)U:reg64_t :
   ( d_val_13325:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
   cast(cast(c_val_13329:reg64_t)L:reg32_t)U:reg64_t :
   ( c_val_13329:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
   cast(cast(b_val_13333:reg64_t)L:reg32_t)U:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x42420000:reg64_t))
   :
   ( a_is_const_13338:reg1_t <> false  ?
   cast(cast(a_val_13337:reg64_t)L:reg32_t)U:reg64_t :
   ( a_val_13337:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x42420000:reg64_t)))))))
   :
   ( ret_type_13339:reg8_t == 0x15:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
   cast(cast(f_val_13317:reg64_t)L:reg16_t)S:reg64_t :
   ( f_val_13317:reg64_t == 1:reg64_t  ? 1:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
   cast(cast(e_val_13321:reg64_t)L:reg16_t)S:reg64_t :
   ( e_val_13321:reg64_t == 1:reg64_t  ? 1:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
   cast(cast(d_val_13325:reg64_t)L:reg16_t)S:reg64_t :
   ( d_val_13325:reg64_t == 1:reg64_t  ? 1:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
   cast(cast(c_val_13329:reg64_t)L:reg16_t)S:reg64_t :
   ( c_val_13329:reg64_t == 1:reg64_t  ? 1:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
   cast(cast(b_val_13333:reg64_t)L:reg16_t)S:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t))
   :
   ( a_is_const_13338:reg1_t <> false  ?
   cast(cast(a_val_13337:reg64_t)L:reg16_t)S:reg64_t :
   ( a_val_13337:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t)))))))
   :
   ( ret_type_13339:reg8_t == 0x16:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
   cast(cast(f_val_13317:reg64_t)L:reg16_t)U:reg64_t :
   ( f_val_13317:reg64_t == 1:reg64_t  ? 1:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
   cast(cast(e_val_13321:reg64_t)L:reg16_t)U:reg64_t :
   ( e_val_13321:reg64_t == 1:reg64_t  ? 1:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
   cast(cast(d_val_13325:reg64_t)L:reg16_t)U:reg64_t :
   ( d_val_13325:reg64_t == 1:reg64_t  ? 1:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
   cast(cast(c_val_13329:reg64_t)L:reg16_t)U:reg64_t :
   ( c_val_13329:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
   cast(cast(b_val_13333:reg64_t)L:reg16_t)U:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t))
   :
   ( a_is_const_13338:reg1_t <> false  ?
   cast(cast(a_val_13337:reg64_t)L:reg16_t)U:reg64_t :
   ( a_val_13337:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t)))))))
   :
   ( ret_type_13339:reg8_t == 0x1f:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
   cast(cast(f_val_13317:reg64_t)L:reg8_t)S:reg64_t :
   ( f_val_13317:reg64_t == 1:reg64_t  ? 1:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
   cast(cast(e_val_13321:reg64_t)L:reg8_t)S:reg64_t :
   ( e_val_13321:reg64_t == 1:reg64_t  ? 1:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
   cast(cast(d_val_13325:reg64_t)L:reg8_t)S:reg64_t :
   ( d_val_13325:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
   cast(cast(c_val_13329:reg64_t)L:reg8_t)S:reg64_t :
   ( c_val_13329:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
   cast(cast(b_val_13333:reg64_t)L:reg8_t)S:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t))
   :
   ( a_is_const_13338:reg1_t <> false  ?
   cast(cast(a_val_13337:reg64_t)L:reg8_t)S:reg64_t :
   ( a_val_13337:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t)))))))
   :
   ( ret_type_13339:reg8_t == 0x20:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
   cast(cast(f_val_13317:reg64_t)L:reg8_t)U:reg64_t :
   ( f_val_13317:reg64_t == 1:reg64_t  ? 1:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
   cast(cast(e_val_13321:reg64_t)L:reg8_t)U:reg64_t :
   ( e_val_13321:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
   cast(cast(d_val_13325:reg64_t)L:reg8_t)U:reg64_t :
   ( d_val_13325:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
   cast(cast(c_val_13329:reg64_t)L:reg8_t)U:reg64_t :
   ( c_val_13329:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
   cast(cast(b_val_13333:reg64_t)L:reg8_t)U:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t))
   :
   ( a_is_const_13338:reg1_t <> false  ?
   cast(cast(a_val_13337:reg64_t)L:reg8_t)U:reg64_t :
   ( a_val_13337:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t)))))))
   :
   ( ret_type_13339:reg8_t == 0x29:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
   cast(cast(f_val_13317:reg64_t)L:reg1_t)S:reg64_t :
   ( f_val_13317:reg64_t == 1:reg64_t  ?
   0xffffffffffffffff:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
   cast(cast(e_val_13321:reg64_t)L:reg1_t)S:reg64_t :
   ( e_val_13321:reg64_t == 1:reg64_t  ?
   0xffffffffffffffff:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
   cast(cast(d_val_13325:reg64_t)L:reg1_t)S:reg64_t :
   ( d_val_13325:reg64_t == 1:reg64_t  ?
   0xffffffffffffffff:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
   cast(cast(c_val_13329:reg64_t)L:reg1_t)S:reg64_t :
   ( c_val_13329:reg64_t == 1:reg64_t  ?
   0xffffffffffffffff:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
   cast(cast(b_val_13333:reg64_t)L:reg1_t)S:reg64_t
   :
   ( b_val_13333:reg64_t == 1:reg64_t  ?
   0xffffffffffffffff:reg64_t : 0:reg64_t))
   :
   ( a_is_const_13338:reg1_t <> false  ?
   cast(cast(a_val_13337:reg64_t)L:reg1_t)S:reg64_t
   :
   ( a_val_13337:reg64_t == 1:reg64_t  ?
   0xffffffffffffffff:reg64_t : 0:reg64_t)))))))
   :
   ( ret_type_13339:reg8_t == 0x2a:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
   cast(cast(f_val_13317:reg64_t)L:reg1_t)U:reg64_t :
   ( f_val_13317:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
   cast(cast(e_val_13321:reg64_t)L:reg1_t)U:reg64_t :
   ( e_val_13321:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
   cast(cast(d_val_13325:reg64_t)L:reg1_t)U:reg64_t :
   ( d_val_13325:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
   cast(cast(c_val_13329:reg64_t)L:reg1_t)U:reg64_t
   :
   ( c_val_13329:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
   cast(cast(b_val_13333:reg64_t)L:reg1_t)U:
   reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t
   : 0:reg64_t))
   :
   ( a_is_const_13338:reg1_t <> false  ?
   cast(cast(a_val_13337:reg64_t)L:reg1_t)U:
   reg64_t :
   ( a_val_13337:reg64_t == 1:reg64_t  ? 1:reg64_t
   : 0:reg64_t)))))))
   : 0:reg64_t)))))))))
  t22 =  ret_type_13339:reg8_t == 0:reg8_t  ? 0:reg64_t :
   ( ret_type_13339:reg8_t == 1:reg8_t  ?
    ret_val_13340:reg64_t & 0xffffffffffffff00:reg64_t  :
   ( ret_type_13339:reg8_t == 0xb:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
    cast(cast(f_val_13317:reg64_t)L:reg32_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( f_val_13317:reg64_t == 1:reg64_t  ? 0:reg64_t : 0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
    cast(cast(e_val_13321:reg64_t)L:reg32_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( e_val_13321:reg64_t == 1:reg64_t  ? 0:reg64_t : 0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
    cast(cast(d_val_13325:reg64_t)L:reg32_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( d_val_13325:reg64_t == 1:reg64_t  ? 0:reg64_t :
   0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
    cast(cast(c_val_13329:reg64_t)L:reg32_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( c_val_13329:reg64_t == 1:reg64_t  ? 0:reg64_t :
   0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
    cast(cast(b_val_13333:reg64_t)L:reg32_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 0:reg64_t :
   0x42420000:reg64_t))
   :
   ( a_is_const_13338:reg1_t <> false  ?
    cast(cast(a_val_13337:reg64_t)L:reg32_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( a_val_13337:reg64_t == 1:reg64_t  ? 0:reg64_t :
   0x42420000:reg64_t)))))))
   :
   ( ret_type_13339:reg8_t == 0xc:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
    cast(cast(f_val_13317:reg64_t)L:reg32_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( f_val_13317:reg64_t == 1:reg64_t  ? 0:reg64_t : 0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
    cast(cast(e_val_13321:reg64_t)L:reg32_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( e_val_13321:reg64_t == 1:reg64_t  ? 0:reg64_t :
   0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
    cast(cast(d_val_13325:reg64_t)L:reg32_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( d_val_13325:reg64_t == 1:reg64_t  ? 0:reg64_t :
   0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
    cast(cast(c_val_13329:reg64_t)L:reg32_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( c_val_13329:reg64_t == 1:reg64_t  ? 0:reg64_t :
   0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
    cast(cast(b_val_13333:reg64_t)L:reg32_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 0:reg64_t :
   0x42420000:reg64_t))
   :
   ( a_is_const_13338:reg1_t <> false  ?
    cast(cast(a_val_13337:reg64_t)L:reg32_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( a_val_13337:reg64_t == 1:reg64_t  ? 0:reg64_t :
   0x42420000:reg64_t)))))))
   :
   ( ret_type_13339:reg8_t == 0x15:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
    cast(cast(f_val_13317:reg64_t)L:reg16_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
    cast(cast(e_val_13321:reg64_t)L:reg16_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
    cast(cast(d_val_13325:reg64_t)L:reg16_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
    cast(cast(c_val_13329:reg64_t)L:reg16_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
    cast(cast(b_val_13333:reg64_t)L:reg16_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( a_is_const_13338:reg1_t <> false  ?
    cast(cast(a_val_13337:reg64_t)L:reg16_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t))))))
   :
   ( ret_type_13339:reg8_t == 0x16:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
    cast(cast(f_val_13317:reg64_t)L:reg16_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
    cast(cast(e_val_13321:reg64_t)L:reg16_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
    cast(cast(d_val_13325:reg64_t)L:reg16_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
    cast(cast(c_val_13329:reg64_t)L:reg16_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
    cast(cast(b_val_13333:reg64_t)L:reg16_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( a_is_const_13338:reg1_t <> false  ?
    cast(cast(a_val_13337:reg64_t)L:reg16_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t))))))
   :
   ( ret_type_13339:reg8_t == 0x1f:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
    cast(cast(f_val_13317:reg64_t)L:reg8_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
    cast(cast(e_val_13321:reg64_t)L:reg8_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
    cast(cast(d_val_13325:reg64_t)L:reg8_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
    cast(cast(c_val_13329:reg64_t)L:reg8_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
    cast(cast(b_val_13333:reg64_t)L:reg8_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( a_is_const_13338:reg1_t <> false  ?
    cast(cast(a_val_13337:reg64_t)L:reg8_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t))))))
   :
   ( ret_type_13339:reg8_t == 0x20:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
    cast(cast(f_val_13317:reg64_t)L:reg8_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
    cast(cast(e_val_13321:reg64_t)L:reg8_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
    cast(cast(d_val_13325:reg64_t)L:reg8_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
    cast(cast(c_val_13329:reg64_t)L:reg8_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
    cast(cast(b_val_13333:reg64_t)L:reg8_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( a_is_const_13338:reg1_t <> false  ?
    cast(cast(a_val_13337:reg64_t)L:reg8_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t))))))
   :
   ( ret_type_13339:reg8_t == 0x29:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
    cast(cast(f_val_13317:reg64_t)L:reg1_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( f_val_13317:reg64_t == 1:reg64_t  ?
   0xffffffffffffff00:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
    cast(cast(e_val_13321:reg64_t)L:reg1_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( e_val_13321:reg64_t == 1:reg64_t  ?
   0xffffffffffffff00:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
    cast(cast(d_val_13325:reg64_t)L:reg1_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( d_val_13325:reg64_t == 1:reg64_t  ?
   0xffffffffffffff00:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
    cast(cast(c_val_13329:reg64_t)L:reg1_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( c_val_13329:reg64_t == 1:reg64_t  ?
   0xffffffffffffff00:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
    cast(cast(b_val_13333:reg64_t)L:reg1_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( b_val_13333:reg64_t == 1:reg64_t  ?
   0xffffffffffffff00:reg64_t : 0:reg64_t))
   :
   ( a_is_const_13338:reg1_t <> false  ?
    cast(cast(a_val_13337:reg64_t)L:reg1_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( a_val_13337:reg64_t == 1:reg64_t  ?
   0xffffffffffffff00:reg64_t : 0:reg64_t)))))))
   :
   ( ret_type_13339:reg8_t == 0x2a:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
    cast(cast(f_val_13317:reg64_t)L:reg1_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
    cast(cast(e_val_13321:reg64_t)L:reg1_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
    cast(cast(d_val_13325:reg64_t)L:reg1_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
    cast(cast(c_val_13329:reg64_t)L:reg1_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
    cast(cast(b_val_13333:reg64_t)L:reg1_t)U:
   reg64_t & 0xffffffffffffff00:reg64_t  :
   0:reg64_t)
   :
   ( a_is_const_13338:reg1_t <> false  ?
    cast(cast(a_val_13337:reg64_t)L:reg1_t)U:
   reg64_t & 0xffffffffffffff00:reg64_t  :
   0:reg64_t))))))
   : 0:reg64_t)))))))))
  t23 =  e_is_const_13322:reg1_t <> false  ? e_val_13321:reg64_t :
   ( e_val_13321:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420000:reg64_t)
  t24 =  f_is_const_13318:reg1_t <> false  ? f_val_13317:reg64_t :
   ( f_val_13317:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420000:reg64_t)
  Symbolic branch condition (0x004423c2)  cast(cast(t22_22644:reg64_t)L:reg8_t)U:reg64_t == 0:reg64_t 
  Current Path String: 1111111001
  Trying true: Satisfiable.
  Trying false: Unsatisfiable.
  Current Path String: 11111110011
  Current path: 11111110011
  write(1, 0x50001000, 21)
  Completed adapted_f1
   = 21 (0x00000015)
  Symbolic branch condition (0x0042df12)  t21_22642:reg64_t == 0xdcd967bf:reg64_t 
  Current Path String: 11111110011
  Trying true: Satisfiable.
  Trying false: Satisfiable.
  Current Path String: 111111100111
  Current path: 111111100111
  t25 =  cast( cast( t21_22642:reg64_t == 0xdcd967bf:reg64_t )U:reg8_t & 1:reg8_t )U:
   reg64_t == 0:reg64_t 
  t26 =  cast( cast( t21_22642:reg64_t == 0xdcd967bf:reg64_t )U:reg8_t & 1:reg8_t )U:
   reg64_t
   | 
   (
   (cast( t21_22642:reg64_t == 0xdcd967bf:reg64_t )U:reg64_t
   | 0xa686300:reg64_t)
    & 0xffffffffffffff00:reg64_t)
    
  Symbolic branch condition (0x0042e570)  cast(t26_22771:reg64_t)L:reg8_t == 0:reg8_t 
  Current Path String: 111111100111
  Trying true: Unsatisfiable.
  Trying false: Satisfiable.
  Current Path String: 1111111001110
  Current path: 1111111001110
  read(3, 0x50000000, 4096) = 0 (0x00000000)
  write(1, 0x50001000, 27)
  Match
  All tests succeeded!
   = 27 (0x0000001b)
  exit_group(0) (no return)
  Stopping when program called exit() at 0x004717a7
  Coverage increased to 4187 on 1
  Path: 1111111001110
  Final path: 1111111001110
  Satisfiable.
  Input vars: e_is_const=0x1 d_is_const=0x1 b_val=0x1 f_is_const=0x1 e_val=0x7 d_val=0xffffffffffffffff a_is_const=0x1 f_val=0xffffffffffffffff ret_type=0x1 ret_val=0xdcd967bf 
Synthesized arg adaptor 1,,,1,,,1,18446744073709551615,1,7,1,18446744073709551615 and return adaptor 1,3705235391
elapsed time = 1, last AS search time = 1
Checking simple adaptor = 1,,,1,,,1,18446744073709551615,1,7,1,18446744073709551615, ret adaptor = 1,3705235391
../bin/fuzzball -linux-syscalls -arch x64 ./obfs_clone2_static -solver smtlib -solver-path ../bin/stp-old-dynamic -smtlib-solver-type stp -fuzz-start-addr 0x000000000042df90 -symbolic-long 0x0000000000705db0=a -symbolic-long 0x0000000000705db8=b -symbolic-long 0x0000000000705dc0=c -symbolic-long 0x0000000000705de0=d -symbolic-long 0x0000000000705dd0=e -symbolic-long 0x0000000000705da0=f -trace-sym-addr-details -trace-sym-addrs -trace-syscalls -omit-pf-af -trace-temps -trace-regions -trace-memory-snapshots -trace-tables -table-limit 12 -trace-binary-paths-bracketed -trace-basic -trace-conditions -trace-decisions -store-byte 0x42420018=0x61 -match-syscalls-in-addr-range 0x42de84:0x42de89:0x42dedd:0x42dee2 -store-long 0x42420018=0x42420020 -store-long 0x42420020=0x42420028 -store-long 0x42420028=0x42420030 -synthesize-adaptor simple:0x42dedd:2:0x000000000042d980:6 -extra-condition a_is_const:reg1_t==0x1:reg1_t -extra-condition a_val:reg64_t==0x0000000000000000:reg64_t -extra-condition b_is_const:reg1_t==0x0:reg1_t -extra-condition b_val:reg64_t==0x0000000000000001:reg64_t -extra-condition c_is_const:reg1_t==0x0:reg1_t -extra-condition c_val:reg64_t==0x0000000000000000:reg64_t -extra-condition d_is_const:reg1_t==0x1:reg1_t -extra-condition d_val:reg64_t==0xffffffffffffffff:reg64_t -extra-condition e_is_const:reg1_t==0x1:reg1_t -extra-condition e_val:reg64_t==0x0000000000000007:reg64_t -extra-condition f_is_const:reg1_t==0x1:reg1_t -extra-condition f_val:reg64_t==0xffffffffffffffff:reg64_t -extra-condition 'a_is_const:reg1_t==0:reg1_t | a_val:reg64_t>=$0xffffffffffffffff:reg64_t' -extra-condition 'a_is_const:reg1_t==0:reg1_t | a_val:reg64_t<=$0xf:reg64_t' -extra-condition 'b_is_const:reg1_t==0:reg1_t | b_val:reg64_t>=$0xffffffffffffffff:reg64_t' -extra-condition 'b_is_const:reg1_t==0:reg1_t | b_val:reg64_t<=$0xf:reg64_t' -extra-condition 'c_is_const:reg1_t==0:reg1_t | c_val:reg64_t>=$0xffffffffffffffff:reg64_t' -extra-condition 'c_is_const:reg1_t==0:reg1_t | c_val:reg64_t<=$0xf:reg64_t' -extra-condition 'd_is_const:reg1_t==0:reg1_t | d_val:reg64_t>=$0xffffffffffffffff:reg64_t' -extra-condition 'd_is_const:reg1_t==0:reg1_t | d_val:reg64_t<=$0xf:reg64_t' -extra-condition 'e_is_const:reg1_t==0:reg1_t | e_val:reg64_t>=$0xffffffffffffffff:reg64_t' -extra-condition 'e_is_const:reg1_t==0:reg1_t | e_val:reg64_t<=$0xf:reg64_t' -extra-condition 'f_is_const:reg1_t==0:reg1_t | f_val:reg64_t>=$0xffffffffffffffff:reg64_t' -extra-condition 'f_is_const:reg1_t==0:reg1_t | f_val:reg64_t<=$0xf:reg64_t' -synthesize-return-adaptor return-typeconv:0x000000000042d980:0x42dee2:6 -extra-condition ret_type:reg8_t==0x1:reg8_t -extra-condition ret_val:reg64_t==0x00000000dcd967bf:reg64_t -disable-ce-cache -return-zero-missing-x64-syscalls -iteration-limit 100000000 -dont-compare-linux-syscalls -region-limit 8 -branch-preference 0x42df12:0 -trace-iterations -trace-assigns -solve-final-pc -trace-stopping -random-seed 8348172 -- ./obfs_clone2_static 1332 1333 g ceinputs
  Loading executable from ./obfs_clone2_static
  Loading       text segment from 00400000 to 00501900
  Loading       data segment from 00701eb0 to 00703db0
                Zero filling from 00703db0 to 00706528
          Extra zero filling from 00706528 to 00707000
  Setting initial break to 0x00707000
  Loading       NOTE segment from 00400190 to 004001d4
  Loading        TLS segment from 00701eb0 to 00701ed0
  Loading      STACK segment from 00000000 to 00000000
  Loading      RELRO segment from 00701eb0 to 00702000
  Skipping missing env. var DISPLAY
  Skipping missing env. var EDITOR
  From real env., setting env. var HOME to /home/grad06/xxxxxxx
  From real env., setting env. var LANG to en_US.UTF-8
  From real env., setting env. var LOGNAME to xxxxxxx
  Skipping missing env. var PAGER
  From real env., setting env. var PATH to /home/grad06/xxxxxxx/.opam/system/bin:/home/fac05/xxxxxxxx/soft/amd64/caml/ocaml/4.02.1/bin:/home/fac05/xxxxxxxx/soft/amd64/caml/opam/1.1.2/bin:/soft/scheme/mit-gnu/9.2/trusty64/bin:/soft/perl5.14.1/bin:/soft/jdk1.7.0_76/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/soft/netbeans-8.0.2/bin:/opt/gnu/bin:/opt/local/bin:/soft/vt-1.07:/usr/X11R6/bin:/soft/X11R6.3/bin:/soft/math8.0.1/bin:/export/scratch/xxxxxxx/fuzzball-adaptorsynth/exec_utils/:/export/scratch/xxxxxxx/fuzzball-adaptorsynth/stp:/export/scratch/xxxxxxx/code/dwarfdump/:/export/scratch/xxxxxxx/fuzzball-adaptorsynth/libasmir/apps:/export/scratch/xxxxxxx/spim-install/usr/bin/spim/:/export/scratch/xxxxxxx/LLVM/build/bin:/export/scratch/xxxxxxx/solvers
  From real env., setting env. var PWD to /export/scratch/xxxxxxx/fuzzball-synth/eg/artifact/obfs
  From real env., setting env. var SHELL to /bin/bash
  From real env., setting env. var TERM to xterm-256color
  From real env., setting env. var USER to xxxxxxx
  Skipping missing env. var USERNAME
  Skipping missing env. var XAUTHORITY
  Initial stack pointer is 0xbfffd000
  Starting address 0x00400f7e, fuzz start 0x0042df90
  Initial registers:
  %rax: 0:reg64_t
  %rbx: 0:reg64_t
  %rcx: 0:reg64_t
  %rdx: 0:reg64_t
  %rsi: 0:reg64_t
  %rdi: 0:reg64_t
  %rsp: 0xbfffd000:reg64_t
  %rbp: 0:reg64_t
  %r8: 0:reg64_t
  %r9: 0:reg64_t
  %r10: 0:reg64_t
  %r11: 0:reg64_t
  %r12: 0:reg64_t
  %r13: 0:reg64_t
  %r14: 0:reg64_t
  %r15: 0:reg64_t
  CF: false
  PF: false
  AF: false
  ZF: false
  SF: false
  OF: false
  YMM0: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  YMM1: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  YMM2: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  YMM3: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  YMM4: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  YMM5: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  YMM6: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  YMM7: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  YMM8: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  YMM9: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  YMM10: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  YMM11: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  YMM12: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  YMM13: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  YMM14: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  YMM15: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  Pre-fuzzing execution...
  uname(0xbfffcd80) = 0 (0x00000000)
  brk(0x00000000) = 7368704 (0x00707000)
  brk(0x007081c0) = 7373248 (0x007081c0)
  arch_prctl(4098, 0x00707880) = 0 (0x00000000)
  readlink("/proc/self/exe", 0xbfffbeb0, 4096) = 63 (0x0000003f)
  brk(0x007291c0) = 7508416 (0x007291c0)
  brk(0x0072a000) = 7512064 (0x0072a000)
  access("/etc/ld.so.nohwcap", 0x0) = -2 (0xfffffffffffffffe)
  open("ceinputs", 0x0, 0o0) = 3 (0x00000003)
  GSSM#make_snap 1 -> 2
  GSM#make_snap called
  Setting up symbolic values:
  GSSSM#make_snap 2 -> 3
  linux_syscalls#make_snap called
  Took snapshot
  Iteration 1:
  fstat(3, 0xbfffc8b0) = 0 (0x00000000)
  mmap(0x00000000, 4096, 0x3, 0x22, -1, 0) = 1342177280 (0x50000000)
  read(3, 0x50000000, 4096) = 31 (0x0000001f)
  fstat(1, 0xbfffc570) = 0 (0x00000000)
  mmap(0x00000000, 4096, 0x3, 0x22, -1, 0) = 1342181376 (0x50001000)
  write(1, 0x50001000, 15)
  read ce inputs
   = 15 (0x0000000f)
  write(1, 0x50001000, 12)
  Starting f1
   = 12 (0x0000000c)
  SRFM#make_sym_snap called
  FM#make_f1_conc_snap called
  GSSM#make_snap 3 -> 4
  GSM#make_snap called
  FM#make_f1_special_handlers_snap
  linux_syscalls#make_f1_snap called
  linux_syscalls#make_snap called
  SRFM#save_sym_se saving f1_hash_list.length = 0
  FM#save_f1_conc_se called
  AS#ready to apply (0.000000 sec). eof1
  GSSM#reset4_3 4 -> 3 
  GSM#reset called
  GHM#clear called
  FM#reset_f1_special_handlers_snap
  linux_syscalls#reset_f1_snap called
  write(1, 0x50001000, 13)
  Completed f1
   = 13 (0x0000000d)
  write(1, 0x50001000, 20)
  Starting adapted_f1
   = 20 (0x00000014)
  SRFM#make_f2_sym_snap called
  FM#make_f2_conc_snap called
  GSSM#make_snap 3 -> 4
  GSM#make_snap called
  FM#make_f2_special_handlers_snap
  linux_syscalls#make_f2_snap called
  linux_syscalls#make_snap called
  Starting simple adaptor
  setting arg=0xffffffffffffffff:reg64_t
  setting arg=7:reg64_t
  setting arg=0xffffffffffffffff:reg64_t
  setting arg=0x42420018:reg64_t
  setting arg=1:reg64_t
  setting arg=0:reg64_t
  AS#ready to apply (0.000000 sec). sof2
  SRFM#Generating structure adaptor formulas...SRFM#ready to apply (0.000000 sec).
  exec_runloop#thunk() should save arg regs here
  Starting return-typeconv adaptor
  SRFM#compare_sym_se called len(f1_h_l) = 0 len(f2_h_l)=0
  f1_hash_list_len = 0 f2_hash_list_len = 0
  FM#compare_conc_se called
  all side-effects were equal
  GSSM#reset4_3 4 -> 3 
  GSM#reset called
  GHM#clear called
  FM#reset_f2_special_handlers_snap
  linux_syscalls#reset_f2_snap called
  t0 =  ret_type_13357:reg8_t == 0:reg8_t  ? 0:reg64_t :
   ( ret_type_13357:reg8_t == 1:reg8_t  ? ret_val_13358:reg64_t :
   ( ret_type_13357:reg8_t == 0xb:reg8_t  ?
   ( ret_val_13358:reg64_t == 5:reg64_t  ? 0xffffffffffffffff:reg64_t :
   ( ret_val_13358:reg64_t == 4:reg64_t  ? 7:reg64_t :
   ( ret_val_13358:reg64_t == 3:reg64_t  ? 0xffffffffffffffff:reg64_t :
   ( ret_val_13358:reg64_t == 2:reg64_t  ? 0x42420018:reg64_t :
   ( ret_val_13358:reg64_t == 1:reg64_t  ? 1:reg64_t : 0:reg64_t)))))
   :
   ( ret_type_13357:reg8_t == 0xc:reg8_t  ?
   ( ret_val_13358:reg64_t == 5:reg64_t  ? 0xffffffff:reg64_t :
   ( ret_val_13358:reg64_t == 4:reg64_t  ? 7:reg64_t :
   ( ret_val_13358:reg64_t == 3:reg64_t  ? 0xffffffff:reg64_t :
   ( ret_val_13358:reg64_t == 2:reg64_t  ? 0x42420018:reg64_t :
   ( ret_val_13358:reg64_t == 1:reg64_t  ? 1:reg64_t : 0:reg64_t)))))
   :
   ( ret_type_13357:reg8_t == 0x15:reg8_t  ?
   ( ret_val_13358:reg64_t == 5:reg64_t  ? 0xffffffffffffffff:reg64_t :
   ( ret_val_13358:reg64_t == 4:reg64_t  ? 7:reg64_t :
   ( ret_val_13358:reg64_t == 3:reg64_t  ? 0xffffffffffffffff:reg64_t
   :
   ( ret_val_13358:reg64_t == 2:reg64_t  ? 0x18:reg64_t :
   ( ret_val_13358:reg64_t == 1:reg64_t  ? 1:reg64_t : 0:reg64_t)))))
   :
   ( ret_type_13357:reg8_t == 0x16:reg8_t  ?
   ( ret_val_13358:reg64_t == 5:reg64_t  ? 0xffff:reg64_t :
   ( ret_val_13358:reg64_t == 4:reg64_t  ? 7:reg64_t :
   ( ret_val_13358:reg64_t == 3:reg64_t  ? 0xffff:reg64_t :
   ( ret_val_13358:reg64_t == 2:reg64_t  ? 0x18:reg64_t :
   ( ret_val_13358:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t)))))
   :
   ( ret_type_13357:reg8_t == 0x1f:reg8_t  ?
   ( ret_val_13358:reg64_t == 5:reg64_t  ? 0xffffffffffffffff:reg64_t
   :
   ( ret_val_13358:reg64_t == 4:reg64_t  ? 7:reg64_t :
   ( ret_val_13358:reg64_t == 3:reg64_t  ?
   0xffffffffffffffff:reg64_t :
   ( ret_val_13358:reg64_t == 2:reg64_t  ? 0x18:reg64_t :
   ( ret_val_13358:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t)))))
   :
   ( ret_type_13357:reg8_t == 0x20:reg8_t  ?
   ( ret_val_13358:reg64_t == 5:reg64_t  ? 0xff:reg64_t :
   ( ret_val_13358:reg64_t == 4:reg64_t  ? 7:reg64_t :
   ( ret_val_13358:reg64_t == 3:reg64_t  ? 0xff:reg64_t :
   ( ret_val_13358:reg64_t == 2:reg64_t  ? 0x18:reg64_t :
   ( ret_val_13358:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t)))))
   :
   ( ret_type_13357:reg8_t == 0x29:reg8_t  ?
   ( ret_val_13358:reg64_t == 5:reg64_t  ?
   0xffffffffffffffff:reg64_t :
   ( ret_val_13358:reg64_t == 4:reg64_t  ?
   0xffffffffffffffff:reg64_t :
   ( ret_val_13358:reg64_t == 3:reg64_t  ?
   0xffffffffffffffff:reg64_t :
   ( ret_val_13358:reg64_t == 2:reg64_t  ? 0:reg64_t :
   ( ret_val_13358:reg64_t == 1:reg64_t  ?
   0xffffffffffffffff:reg64_t : 0:reg64_t)))))
   :
   ( ret_type_13357:reg8_t == 0x2a:reg8_t  ?
   ( ret_val_13358:reg64_t == 5:reg64_t  ? 1:reg64_t :
   ( ret_val_13358:reg64_t == 4:reg64_t  ? 1:reg64_t :
   ( ret_val_13358:reg64_t == 3:reg64_t  ? 1:reg64_t :
   ( ret_val_13358:reg64_t == 2:reg64_t  ? 0:reg64_t :
   ( ret_val_13358:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t)))))
   : 0:reg64_t)))))))))
  t1 =  ret_type_13357:reg8_t == 0:reg8_t  ? 0:reg64_t :
   ( ret_type_13357:reg8_t == 1:reg8_t  ?
    ret_val_13358:reg64_t & 0xffffffffffffff00:reg64_t  :
   ( ret_type_13357:reg8_t == 0xb:reg8_t  ?
   ( ret_val_13358:reg64_t == 5:reg64_t  ? 0xffffffffffffff00:reg64_t :
   ( ret_val_13358:reg64_t == 4:reg64_t  ? 0:reg64_t :
   ( ret_val_13358:reg64_t == 3:reg64_t  ? 0xffffffffffffff00:reg64_t :
   ( ret_val_13358:reg64_t == 2:reg64_t  ? 0x42420000:reg64_t :
   0:reg64_t))))
   :
   ( ret_type_13357:reg8_t == 0xc:reg8_t  ?
   ( ret_val_13358:reg64_t == 5:reg64_t  ? 0xffffff00:reg64_t :
   ( ret_val_13358:reg64_t == 4:reg64_t  ? 0:reg64_t :
   ( ret_val_13358:reg64_t == 3:reg64_t  ? 0xffffff00:reg64_t :
   ( ret_val_13358:reg64_t == 2:reg64_t  ? 0x42420000:reg64_t :
   0:reg64_t))))
   :
   ( ret_type_13357:reg8_t == 0x15:reg8_t  ?
   ( ret_val_13358:reg64_t == 5:reg64_t  ? 0xffffffffffffff00:reg64_t :
   ( ret_val_13358:reg64_t == 4:reg64_t  ? 0:reg64_t :
   ( ret_val_13358:reg64_t == 3:reg64_t  ? 0xffffffffffffff00:reg64_t
   : 0:reg64_t)))
   :
   ( ret_type_13357:reg8_t == 0x16:reg8_t  ?
   ( ret_val_13358:reg64_t == 5:reg64_t  ? 0xff00:reg64_t :
   ( ret_val_13358:reg64_t == 4:reg64_t  ? 0:reg64_t :
   ( ret_val_13358:reg64_t == 3:reg64_t  ? 0xff00:reg64_t :
   0:reg64_t)))
   :
   ( ret_type_13357:reg8_t == 0x1f:reg8_t  ?
   ( ret_val_13358:reg64_t == 5:reg64_t  ? 0xffffffffffffff00:reg64_t
   :
   ( ret_val_13358:reg64_t == 4:reg64_t  ? 0:reg64_t :
   ( ret_val_13358:reg64_t == 3:reg64_t  ?
   0xffffffffffffff00:reg64_t : 0:reg64_t)))
   :
   ( ret_type_13357:reg8_t == 0x20:reg8_t  ? 0:reg64_t :
   ( ret_type_13357:reg8_t == 0x29:reg8_t  ?
   ( ret_val_13358:reg64_t == 5:reg64_t  ?
   0xffffffffffffff00:reg64_t :
   ( ret_val_13358:reg64_t == 4:reg64_t  ?
   0xffffffffffffff00:reg64_t :
   ( ret_val_13358:reg64_t == 3:reg64_t  ?
   0xffffffffffffff00:reg64_t :
   ( ret_val_13358:reg64_t == 2:reg64_t  ? 0:reg64_t :
   ( ret_val_13358:reg64_t == 1:reg64_t  ?
   0xffffffffffffff00:reg64_t : 0:reg64_t)))))
   : 0:reg64_t))))))))
  Symbolic branch condition (0x004423c2)  cast(cast(t1_22556:reg64_t)L:reg8_t)U:reg64_t == 0:reg64_t 
  Current Path String: 
  Trying false: Unsatisfiable.
  Trying true: Satisfiable.
  Input vars: a_is_const=0x1 e_is_const=0x1 b_val=0x1 d_is_const=0x1 d_val=0xffffffffffffffff f_is_const=0x1 f_val=0xffffffffffffffff ret_type=0x1 e_val=0x7 ret_val=0xdcd967bf 
  Current Path String: 1
  Current path: 1
  write(1, 0x50001000, 21)
  Completed adapted_f1
   = 21 (0x00000015)
  Symbolic branch condition (0x0042df12)  t0_22554:reg64_t == 0xe96ccf45:reg64_t 
  Current Path String: 1
  Trying false: Satisfiable.
  Input vars: ret_val=0xdcd967bf e_val=0x7 f_is_const=0x1 d_val=0xffffffffffffffff d_is_const=0x1 b_val=0x1 ret_type=0x1 f_val=0xffffffffffffffff e_is_const=0x1 a_is_const=0x1 
  Trying true: Unsatisfiable.
  Current Path String: 10
  Current path: 10
  t2 =  cast( cast( t0_22554:reg64_t == 0xe96ccf45:reg64_t )U:reg8_t & 1:reg8_t )U:
   reg64_t == 0:reg64_t 
  t3 =  cast( cast( t0_22554:reg64_t == 0xe96ccf45:reg64_t )U:reg8_t & 1:reg8_t )U:
   reg64_t
   | 
   (
   (cast( t0_22554:reg64_t == 0xe96ccf45:reg64_t )U:reg64_t
   | 0xa686374616d7300:reg64_t)
    & 0xffffffffffffff00:reg64_t)
    
  write(1, 0x50001000, 9)
  Mismatch
   = 9 (0x00000009)
  exit_group(0) (no return)
  Stopping when program called exit() at 0x004717a7
  Coverage increased to 4129 on 1
  Path: 10
  Final path: 10
  Satisfiable.
  Input vars: a_is_const=0x1 b_val=0x1 d_is_const=0x1 d_val=0xffffffffffffffff e_val=0x7 f_is_const=0x1 e_is_const=0x1 f_val=0xffffffffffffffff ret_type=0x1 ret_val=0xdcd967bf 
elapsed time = 1, last CE search time = 0
Mismatch on input 0x42420018, 0x1; adding as test
Trying to synthesize with sane_addr=0x42420030
../bin/fuzzball -linux-syscalls -arch x64 ./obfs_clone2_static -solver smtlib -solver-path ../bin/stp-old-dynamic -smtlib-solver-type stp -fuzz-start-addr 0x000000000042df90 -trace-temps -adaptor-search-mode -trace-iterations -trace-assigns -solve-final-pc -table-limit 12 -return-zero-missing-x64-syscalls -disable-ce-cache -synthesize-adaptor simple:0x42dedd:2:0x000000000042d980:6 -extra-condition 'a_is_const:reg1_t==0:reg1_t | a_val:reg64_t>=$0xffffffffffffffff:reg64_t' -extra-condition 'a_is_const:reg1_t==0:reg1_t | a_val:reg64_t<=$0xf:reg64_t' -extra-condition 'b_is_const:reg1_t==0:reg1_t | b_val:reg64_t>=$0xffffffffffffffff:reg64_t' -extra-condition 'b_is_const:reg1_t==0:reg1_t | b_val:reg64_t<=$0xf:reg64_t' -extra-condition 'c_is_const:reg1_t==0:reg1_t | c_val:reg64_t>=$0xffffffffffffffff:reg64_t' -extra-condition 'c_is_const:reg1_t==0:reg1_t | c_val:reg64_t<=$0xf:reg64_t' -extra-condition 'd_is_const:reg1_t==0:reg1_t | d_val:reg64_t>=$0xffffffffffffffff:reg64_t' -extra-condition 'd_is_const:reg1_t==0:reg1_t | d_val:reg64_t<=$0xf:reg64_t' -extra-condition 'e_is_const:reg1_t==0:reg1_t | e_val:reg64_t>=$0xffffffffffffffff:reg64_t' -extra-condition 'e_is_const:reg1_t==0:reg1_t | e_val:reg64_t<=$0xf:reg64_t' -extra-condition 'f_is_const:reg1_t==0:reg1_t | f_val:reg64_t>=$0xffffffffffffffff:reg64_t' -extra-condition 'f_is_const:reg1_t==0:reg1_t | f_val:reg64_t<=$0xf:reg64_t' -synthesize-return-adaptor return-typeconv:0x000000000042d980:0x42dee2:6 -match-syscalls-in-addr-range 0x42de84:0x42de89:0x42dedd:0x42dee2 -branch-preference 0x42df12:1 -trace-conditions -omit-pf-af -trace-syscalls -trace-decisions -trace-stopping -trace-regions -trace-binary-paths-bracketed -trace-memory-snapshots -trace-sym-addr-details -trace-sym-addrs -trace-tables -trace-basic -zero-memory -store-byte 0x42420014=0x0 -store-byte 0x4242000f=0x0 -store-byte 0x4242000e=0x0 -store-byte 0x42420007=0x0 -store-byte 0x42420017=0x0 -store-byte 0x42420016=0x0 -store-byte 0x4242000c=0x0 -store-byte 0x4242000d=0x0 -store-byte 0x42420006=0x0 -store-byte 0x42420005=0x0 -store-byte 0x42420015=0x0 -store-byte 0x42420004=0x0 -store-long 0x42420000=0x42420008 -store-long 0x42420008=0x42420010 -store-long 0x42420010=0x42420018 -store-byte 0x4242001d=0x0 -store-byte 0x4242002f=0x0 -store-byte 0x42420024=0x0 -store-byte 0x42420026=0x0 -store-byte 0x4242001f=0x0 -store-byte 0x4242002c=0x0 -store-byte 0x4242002e=0x0 -store-byte 0x42420025=0x0 -store-byte 0x42420027=0x0 -store-byte 0x4242001c=0x0 -store-byte 0x4242002d=0x0 -store-byte 0x4242001e=0x0 -store-long 0x42420018=0x42420020 -store-long 0x42420020=0x42420028 -store-long 0x42420028=0x42420030 -region-limit 8 -dont-compare-linux-syscalls -random-seed 3359860 -- ./obfs_clone2_static 1332 1333 f tests
  Loading executable from ./obfs_clone2_static
  Loading       text segment from 00400000 to 00501900
  Loading       data segment from 00701eb0 to 00703db0
                Zero filling from 00703db0 to 00706528
          Extra zero filling from 00706528 to 00707000
  Setting initial break to 0x00707000
  Loading       NOTE segment from 00400190 to 004001d4
  Loading        TLS segment from 00701eb0 to 00701ed0
  Loading      STACK segment from 00000000 to 00000000
  Loading      RELRO segment from 00701eb0 to 00702000
  Skipping missing env. var DISPLAY
  Skipping missing env. var EDITOR
  From real env., setting env. var HOME to /home/grad06/xxxxxxx
  From real env., setting env. var LANG to en_US.UTF-8
  From real env., setting env. var LOGNAME to xxxxxxx
  Skipping missing env. var PAGER
  From real env., setting env. var PATH to /home/grad06/xxxxxxx/.opam/system/bin:/home/fac05/xxxxxxxx/soft/amd64/caml/ocaml/4.02.1/bin:/home/fac05/xxxxxxxx/soft/amd64/caml/opam/1.1.2/bin:/soft/scheme/mit-gnu/9.2/trusty64/bin:/soft/perl5.14.1/bin:/soft/jdk1.7.0_76/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/soft/netbeans-8.0.2/bin:/opt/gnu/bin:/opt/local/bin:/soft/vt-1.07:/usr/X11R6/bin:/soft/X11R6.3/bin:/soft/math8.0.1/bin:/export/scratch/xxxxxxx/fuzzball-adaptorsynth/exec_utils/:/export/scratch/xxxxxxx/fuzzball-adaptorsynth/stp:/export/scratch/xxxxxxx/code/dwarfdump/:/export/scratch/xxxxxxx/fuzzball-adaptorsynth/libasmir/apps:/export/scratch/xxxxxxx/spim-install/usr/bin/spim/:/export/scratch/xxxxxxx/LLVM/build/bin:/export/scratch/xxxxxxx/solvers
  From real env., setting env. var PWD to /export/scratch/xxxxxxx/fuzzball-synth/eg/artifact/obfs
  From real env., setting env. var SHELL to /bin/bash
  From real env., setting env. var TERM to xterm-256color
  From real env., setting env. var USER to xxxxxxx
  Skipping missing env. var USERNAME
  Skipping missing env. var XAUTHORITY
  Initial stack pointer is 0xbfffd000
  Starting address 0x00400f7e, fuzz start 0x0042df90
  Initial registers:
  %rax: 0:reg64_t
  %rbx: 0:reg64_t
  %rcx: 0:reg64_t
  %rdx: 0:reg64_t
  %rsi: 0:reg64_t
  %rdi: 0:reg64_t
  %rsp: 0xbfffd000:reg64_t
  %rbp: 0:reg64_t
  %r8: 0:reg64_t
  %r9: 0:reg64_t
  %r10: 0:reg64_t
  %r11: 0:reg64_t
  %r12: 0:reg64_t
  %r13: 0:reg64_t
  %r14: 0:reg64_t
  %r15: 0:reg64_t
  CF: false
  PF: false
  AF: false
  ZF: false
  SF: false
  OF: false
  YMM0: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  YMM1: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  YMM2: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  YMM3: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  YMM4: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  YMM5: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  YMM6: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  YMM7: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  YMM8: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  YMM9: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  YMM10: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  YMM11: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  YMM12: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  YMM13: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  YMM14: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  YMM15: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  Pre-fuzzing execution...
  uname(0xbfffcd80) = 0 (0x00000000)
  brk(0x00000000) = 7368704 (0x00707000)
  brk(0x007081c0) = 7373248 (0x007081c0)
  arch_prctl(4098, 0x00707880) = 0 (0x00000000)
  readlink("/proc/self/exe", 0xbfffbeb0, 4096) = 63 (0x0000003f)
  brk(0x007291c0) = 7508416 (0x007291c0)
  brk(0x0072a000) = 7512064 (0x0072a000)
  access("/etc/ld.so.nohwcap", 0x0) = -2 (0xfffffffffffffffe)
  open("tests", 0x0, 0o0) = 3 (0x00000003)
  GSSM#make_snap 1 -> 2
  GSM#make_snap called
  Setting up symbolic values:
  GSSSM#make_snap 2 -> 3
  linux_syscalls#make_snap called
  Took snapshot
  Iteration 1:
  fstat(3, 0xbfffc8b0) = 0 (0x00000000)
  mmap(0x00000000, 4096, 0x3, 0x22, -1, 0) = 1342177280 (0x50000000)
  read(3, 0x50000000, 4096) = 62 (0x0000003e)
  fstat(1, 0xbfffc570) = 0 (0x00000000)
  mmap(0x00000000, 4096, 0x3, 0x22, -1, 0) = 1342181376 (0x50001000)
  write(1, 0x50001000, 12)
  read a test
   = 12 (0x0000000c)
  write(1, 0x50001000, 12)
  Starting f1
   = 12 (0x0000000c)
  SRFM#make_sym_snap called
  FM#make_f1_conc_snap called
  GSSM#make_snap 3 -> 4
  GSM#make_snap called
  FM#make_f1_special_handlers_snap
  linux_syscalls#make_f1_snap called
  linux_syscalls#make_snap called
  SRFM#save_sym_se saving f1_hash_list.length = 0
  FM#save_f1_conc_se called
  AS#ready to apply (0.000000 sec). eof1
  GSSM#reset4_3 4 -> 3 
  GSM#reset called
  GHM#clear called
  FM#reset_f1_special_handlers_snap
  linux_syscalls#reset_f1_snap called
  write(1, 0x50001000, 13)
  Completed f1
   = 13 (0x0000000d)
  write(1, 0x50001000, 20)
  Starting adapted_f1
   = 20 (0x00000014)
  SRFM#make_f2_sym_snap called
  FM#make_f2_conc_snap called
  GSSM#make_snap 3 -> 4
  GSM#make_snap called
  FM#make_f2_special_handlers_snap
  linux_syscalls#make_f2_snap called
  linux_syscalls#make_snap called
  Starting simple adaptor
  setting arg= f_is_const_13318:reg1_t <> false  ? f_val_13317:reg64_t :
   ( f_val_13317:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420000:reg64_t)
  setting arg= e_is_const_13322:reg1_t <> false  ? e_val_13321:reg64_t :
   ( e_val_13321:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420000:reg64_t)
  setting arg= d_is_const_13326:reg1_t <> false  ? d_val_13325:reg64_t :
   ( d_val_13325:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420000:reg64_t)
  setting arg= c_is_const_13330:reg1_t <> false  ? c_val_13329:reg64_t :
   ( c_val_13329:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420000:reg64_t)
  setting arg= b_is_const_13334:reg1_t <> false  ? b_val_13333:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420000:reg64_t)
  setting arg= a_is_const_13338:reg1_t <> false  ? a_val_13337:reg64_t :
   ( a_val_13337:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420000:reg64_t)
  AS#ready to apply (0.000000 sec). sof2
  SRFM#Generating structure adaptor formulas...exec_runloop#thunk() should save arg regs here
  t0 =  a_is_const_13338:reg1_t <> false  ? cast(a_val_13337:reg64_t)L:reg32_t :
   ( a_val_13337:reg64_t == 1:reg64_t  ? 1:reg32_t : 0x42420000:reg32_t)
  t1 =  b_is_const_13334:reg1_t <> false  ? b_val_13333:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420000:reg64_t)
  t2 =  cast(cast(-cast(t0_22073:reg32_t)U:reg64_t)L:reg32_t)H:reg1_t
   ^  0:reg32_t <$ t0_22073:reg32_t 
   
  t3 =  cast(cast(-cast(t0_22073:reg32_t)U:reg64_t)L:reg32_t)H:reg1_t
   ^ t2_22371:reg1_t
    ? 0x99895f28:reg64_t : 0xc790fe97:reg64_t
  t4 =  cast(cast(
   cast(cast(t3_22388:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff83a9a43f:reg64_t
   )L:reg32_t)H:reg1_t
   ^  cast(t3_22388:reg64_t)L:reg32_t <$ 0x7c565bc1:reg32_t 
   
  t5 =   cast(
   cast(cast(t3_22388:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff83a9a43f:reg64_t
   )L:reg32_t
   == 0:reg32_t
    | 
   (cast(cast(
   cast(cast(t3_22388:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff83a9a43f:reg64_t
   )L:reg32_t)H:reg1_t
   ^ t4_22397:reg1_t)
    
  Symbolic branch condition (0x0042d9b6) t5_22398:reg1_t
  Current Path String: 
  Trying false: Unsatisfiable.
  Trying true: Satisfiable.
  Current Path String: 1
  Current path: 1
  t6 =  cast(cast(
   cast(cast(t3_22388:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff85ab9f8f:reg64_t
   )L:reg32_t)H:reg1_t
   ^  cast(t3_22388:reg64_t)L:reg32_t <$ 0x7a546071:reg32_t 
   
  t7 =   cast(
   cast(cast(t3_22388:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff85ab9f8f:reg64_t
   )L:reg32_t
   == 0:reg32_t
    | 
   (cast(cast(
   cast(cast(t3_22388:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff85ab9f8f:reg64_t
   )L:reg32_t)H:reg1_t
   ^ t6_22399:reg1_t)
    
  Symbolic branch condition (0x0042d9cc) t7_22400:reg1_t
  Current Path String: 1
  Trying false: Unsatisfiable.
  Trying true: Satisfiable.
  Current Path String: 11
  Current path: 11
  t8 =  cast(cast(
   cast(cast(t3_22388:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffffc3e8eeb8:reg64_t
   )L:reg32_t)H:reg1_t
   ^  cast(t3_22388:reg64_t)L:reg32_t <$ 0x3c171148:reg32_t 
   
  t9 =   cast(
   cast(cast(t3_22388:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffffc3e8eeb8:reg64_t
   )L:reg32_t
   == 0:reg32_t
    | 
   (cast(cast(
   cast(cast(t3_22388:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffffc3e8eeb8:reg64_t
   )L:reg32_t)H:reg1_t
   ^ t8_22401:reg1_t)
    
  Symbolic branch condition (0x0042d9e2) t9_22402:reg1_t
  Current Path String: 11
  Trying false: Unsatisfiable.
  Trying true: Satisfiable.
  Current Path String: 111
  Current path: 111
  t10 =  cast(cast(
   cast(cast(t3_22388:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffffcc015d57:reg64_t
   )L:reg32_t)H:reg1_t
   ^  cast(t3_22388:reg64_t)L:reg32_t <$ 0x33fea2a9:reg32_t 
   
  t11 =   cast(
   cast(cast(t3_22388:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffffcc015d57:reg64_t
   )L:reg32_t
   == 0:reg32_t
    | 
   (cast(cast(
   cast(cast(t3_22388:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffffcc015d57:reg64_t
   )L:reg32_t)H:reg1_t
   ^ t10_22403:reg1_t)
    
  Symbolic branch condition (0x0042d9f8) t11_22404:reg1_t
  Current Path String: 111
  Trying false: Unsatisfiable.
  Trying true: Satisfiable.
  Current Path String: 1111
  Current path: 1111
  t12 =  cast(cast(
   cast(cast(t3_22388:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff175b4f23:reg64_t
   )L:reg32_t)H:reg1_t
   ^  cast(t3_22388:reg64_t)L:reg32_t <$ 0xe8a4b0dd:reg32_t 
   
  t13 =   cast(
   cast(cast(t3_22388:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff175b4f23:reg64_t
   )L:reg32_t
   == 0:reg32_t
    | 
   (cast(cast(
   cast(cast(t3_22388:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff175b4f23:reg64_t
   )L:reg32_t)H:reg1_t
   ^ t12_22405:reg1_t)
    
  Symbolic branch condition (0x0042da0e) t13_22406:reg1_t
  Current Path String: 1111
  Trying false: Unsatisfiable.
  Trying true: Satisfiable.
  Current Path String: 11111
  Current path: 11111
  t14 =  cast(cast(
   cast(cast(t3_22388:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff200063f5:reg64_t
   )L:reg32_t)H:reg1_t
   ^  cast(t3_22388:reg64_t)L:reg32_t <$ 0xdfff9c0b:reg32_t 
   
  t15 =   cast(
   cast(cast(t3_22388:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff200063f5:reg64_t
   )L:reg32_t
   == 0:reg32_t
    | 
   (cast(cast(
   cast(cast(t3_22388:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff200063f5:reg64_t
   )L:reg32_t)H:reg1_t
   ^ t14_22407:reg1_t)
    
  Symbolic branch condition (0x0042da24) t15_22408:reg1_t
  Current Path String: 11111
  Trying true: Satisfiable.
  Trying false: Unsatisfiable.
  Current Path String: 111111
  Current path: 111111
  t16 =  cast(cast(
   cast(cast(t3_22388:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff2b866e48:reg64_t
   )L:reg32_t)H:reg1_t
   ^  cast(t3_22388:reg64_t)L:reg32_t <$ 0xd47991b8:reg32_t 
   
  t17 =   cast(
   cast(cast(t3_22388:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff2b866e48:reg64_t
   )L:reg32_t
   == 0:reg32_t
    | 
   (cast(cast(
   cast(cast(t3_22388:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff2b866e48:reg64_t
   )L:reg32_t)H:reg1_t
   ^ t16_22409:reg1_t)
    
  Symbolic branch condition (0x0042da3a) t17_22410:reg1_t
  Current Path String: 111111
  Trying true: Satisfiable.
  Trying false: Unsatisfiable.
  Current Path String: 1111111
  Current path: 1111111
  t18 =  cast(cast(
   cast(cast(t3_22388:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff66c88c0d:reg64_t
   )L:reg32_t)H:reg1_t
   ^  cast(t3_22388:reg64_t)L:reg32_t <$ 0x993773f3:reg32_t 
   
  Symbolic branch condition (0x0042da50)  cast(
   cast(cast(t3_22388:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff66c88c0d:reg64_t
   )L:reg32_t
   == 0:reg32_t
   
  Current Path String: 1111111
  Trying true: Unsatisfiable.
  Trying false: Satisfiable.
  Current Path String: 11111110
  Current path: 11111110
  t19 =  cast(cast(
   cast(cast(t3_22388:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff6676a0d8:reg64_t
   )L:reg32_t)H:reg1_t
   ^  cast(t3_22388:reg64_t)L:reg32_t <$ 0x99895f28:reg32_t 
   
  Symbolic branch condition (0x0042da66)  cast(
   cast(cast(t3_22388:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff6676a0d8:reg64_t
   )L:reg32_t
   == 0:reg32_t
   
  Current Path String: 11111110
  Trying true: Satisfiable.
  Trying false: Satisfiable.
  Current Path String: 111111101
  Current path: 111111101
  Symbolic address t1_22079:reg64_t @ (0x42db54)
  Concrete base terms: 
  Concrete offset terms: 
  Offset expression terms: 
  Ambiguous expression terms:  b_is_const_13334:reg1_t <> false  ? b_val_13333:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420000:reg64_t)
  Ambiguous symbol terms: 
  Current Path String: 111111101
  Trying true: Satisfiable.
  Trying false: Satisfiable.
  Current Path String: 1111111011
  Current path: 1111111011
  SRFM#region_for took branch true in Not_found case expr =  b_is_const_13334:reg1_t <> false  ? b_val_13333:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420000:reg64_t)
  Current Path String: 1111111011
  Trying true: Satisfiable.
  Trying false: Satisfiable.
  Current Path String: 11111110111
  Current path: 11111110111
  SRFM#region_for using concrete address 42420000 for  b_is_const_13334:reg1_t <> false  ? b_val_13333:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420000:reg64_t)
  SRFM#region_for regions seen in this path = 0
  Address  b_is_const_13334:reg1_t <> false  ? b_val_13333:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420000:reg64_t) is region 1
  t20 =  cast(cast( -cast(t0_22073:reg32_t)U:reg64_t + 1:reg64_t )L:reg32_t)H:reg1_t
   ^  1:reg32_t <$ t0_22073:reg32_t 
   
  t21 =  cast(cast( -cast(t0_22073:reg32_t)U:reg64_t + 1:reg64_t )L:reg32_t)H:reg1_t
   ^ t20_23619:reg1_t
    ? 0x99895f28:reg64_t : 0xc790fe97:reg64_t
  t22 =  cast(cast(
   cast(cast(t21_23620:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff83a9a43f:reg64_t
   )L:reg32_t)H:reg1_t
   ^  cast(t21_23620:reg64_t)L:reg32_t <$ 0x7c565bc1:reg32_t 
   
  t23 =   cast(
   cast(cast(t21_23620:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff83a9a43f:reg64_t
   )L:reg32_t
   == 0:reg32_t
    | 
   (cast(cast(
   cast(cast(t21_23620:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff83a9a43f:reg64_t
   )L:reg32_t)H:reg1_t
   ^ t22_23621:reg1_t)
    
  Symbolic branch condition (0x0042d9b6) t23_23622:reg1_t
  Current Path String: 11111110111
  Trying false: Unsatisfiable.
  Trying true: Satisfiable.
  Current Path String: 111111101111
  Current path: 111111101111
  t24 =  cast(cast(
   cast(cast(t21_23620:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff85ab9f8f:reg64_t
   )L:reg32_t)H:reg1_t
   ^  cast(t21_23620:reg64_t)L:reg32_t <$ 0x7a546071:reg32_t 
   
  t25 =   cast(
   cast(cast(t21_23620:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff85ab9f8f:reg64_t
   )L:reg32_t
   == 0:reg32_t
    | 
   (cast(cast(
   cast(cast(t21_23620:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff85ab9f8f:reg64_t
   )L:reg32_t)H:reg1_t
   ^ t24_23623:reg1_t)
    
  Symbolic branch condition (0x0042d9cc) t25_23624:reg1_t
  Current Path String: 111111101111
  Trying true: Satisfiable.
  Trying false: Unsatisfiable.
  Current Path String: 1111111011111
  Current path: 1111111011111
  t26 =  cast(cast(
   cast(cast(t21_23620:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffffc3e8eeb8:reg64_t
   )L:reg32_t)H:reg1_t
   ^  cast(t21_23620:reg64_t)L:reg32_t <$ 0x3c171148:reg32_t 
   
  t27 =   cast(
   cast(cast(t21_23620:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffffc3e8eeb8:reg64_t
   )L:reg32_t
   == 0:reg32_t
    | 
   (cast(cast(
   cast(cast(t21_23620:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffffc3e8eeb8:reg64_t
   )L:reg32_t)H:reg1_t
   ^ t26_23625:reg1_t)
    
  Symbolic branch condition (0x0042d9e2) t27_23626:reg1_t
  Current Path String: 1111111011111
  Trying true: Satisfiable.
  Trying false: Unsatisfiable.
  Current Path String: 11111110111111
  Current path: 11111110111111
  t28 =  cast(cast(
   cast(cast(t21_23620:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffffcc015d57:reg64_t
   )L:reg32_t)H:reg1_t
   ^  cast(t21_23620:reg64_t)L:reg32_t <$ 0x33fea2a9:reg32_t 
   
  t29 =   cast(
   cast(cast(t21_23620:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffffcc015d57:reg64_t
   )L:reg32_t
   == 0:reg32_t
    | 
   (cast(cast(
   cast(cast(t21_23620:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffffcc015d57:reg64_t
   )L:reg32_t)H:reg1_t
   ^ t28_23627:reg1_t)
    
  Symbolic branch condition (0x0042d9f8) t29_23628:reg1_t
  Current Path String: 11111110111111
  Trying true: Satisfiable.
  Trying false: Unsatisfiable.
  Current Path String: 111111101111111
  Current path: 111111101111111
  t30 =  cast(cast(
   cast(cast(t21_23620:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff175b4f23:reg64_t
   )L:reg32_t)H:reg1_t
   ^  cast(t21_23620:reg64_t)L:reg32_t <$ 0xe8a4b0dd:reg32_t 
   
  t31 =   cast(
   cast(cast(t21_23620:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff175b4f23:reg64_t
   )L:reg32_t
   == 0:reg32_t
    | 
   (cast(cast(
   cast(cast(t21_23620:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff175b4f23:reg64_t
   )L:reg32_t)H:reg1_t
   ^ t30_23629:reg1_t)
    
  Symbolic branch condition (0x0042da0e) t31_23630:reg1_t
  Current Path String: 111111101111111
  Trying false: Unsatisfiable.
  Trying true: Satisfiable.
  Current Path String: 1111111011111111
  Current path: 1111111011111111
  t32 =  cast(cast(
   cast(cast(t21_23620:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff200063f5:reg64_t
   )L:reg32_t)H:reg1_t
   ^  cast(t21_23620:reg64_t)L:reg32_t <$ 0xdfff9c0b:reg32_t 
   
  t33 =   cast(
   cast(cast(t21_23620:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff200063f5:reg64_t
   )L:reg32_t
   == 0:reg32_t
    | 
   (cast(cast(
   cast(cast(t21_23620:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff200063f5:reg64_t
   )L:reg32_t)H:reg1_t
   ^ t32_23631:reg1_t)
    
  Symbolic branch condition (0x0042da24) t33_23632:reg1_t
  Current Path String: 1111111011111111
  Trying true: Satisfiable.
  Trying false: Unsatisfiable.
  Current Path String: 11111110111111111
  Current path: 11111110111111111
  t34 =  cast(cast(
   cast(cast(t21_23620:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff2b866e48:reg64_t
   )L:reg32_t)H:reg1_t
   ^  cast(t21_23620:reg64_t)L:reg32_t <$ 0xd47991b8:reg32_t 
   
  t35 =   cast(
   cast(cast(t21_23620:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff2b866e48:reg64_t
   )L:reg32_t
   == 0:reg32_t
    | 
   (cast(cast(
   cast(cast(t21_23620:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff2b866e48:reg64_t
   )L:reg32_t)H:reg1_t
   ^ t34_23633:reg1_t)
    
  Symbolic branch condition (0x0042da3a) t35_23634:reg1_t
  Current Path String: 11111110111111111
  Trying true: Satisfiable.
  Trying false: Unsatisfiable.
  Current Path String: 111111101111111111
  Current path: 111111101111111111
  t36 =  cast(cast(
   cast(cast(t21_23620:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff66c88c0d:reg64_t
   )L:reg32_t)H:reg1_t
   ^  cast(t21_23620:reg64_t)L:reg32_t <$ 0x993773f3:reg32_t 
   
  Symbolic branch condition (0x0042da50)  cast(
   cast(cast(t21_23620:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff66c88c0d:reg64_t
   )L:reg32_t
   == 0:reg32_t
   
  Current Path String: 111111101111111111
  Trying true: Unsatisfiable.
  Trying false: Satisfiable.
  Current Path String: 1111111011111111110
  Current path: 1111111011111111110
  t37 =  cast(cast(
   cast(cast(t21_23620:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff6676a0d8:reg64_t
   )L:reg32_t)H:reg1_t
   ^  cast(t21_23620:reg64_t)L:reg32_t <$ 0x99895f28:reg32_t 
   
  Symbolic branch condition (0x0042da66)  cast(
   cast(cast(t21_23620:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff6676a0d8:reg64_t
   )L:reg32_t
   == 0:reg32_t
   
  Current Path String: 1111111011111111110
  Trying true: Satisfiable.
  Trying false: Satisfiable.
  Current Path String: 11111110111111111101
  Current path: 11111110111111111101
  Symbolic address  t1_22079:reg64_t + 1:reg64_t  @ (0x42db54)
  Concrete base terms: 
  Concrete offset terms: 0x00000001
  Offset expression terms: 
  Ambiguous expression terms:  b_is_const_13334:reg1_t <> false  ? b_val_13333:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420000:reg64_t)
  Ambiguous symbol terms: 
  SRFM#region_for found in region_val_queried expr =  b_is_const_13334:reg1_t <> false  ? b_val_13333:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420000:reg64_t)
  SRFM#region_for found region number in region_vals, ret = 1 expr =  b_is_const_13334:reg1_t <> false  ? b_val_13333:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420000:reg64_t)
  t38 =  cast(cast( -cast(t0_22073:reg32_t)U:reg64_t + 2:reg64_t )L:reg32_t)H:reg1_t
   ^  2:reg32_t <$ t0_22073:reg32_t 
   
  t39 =  cast(cast( -cast(t0_22073:reg32_t)U:reg64_t + 2:reg64_t )L:reg32_t)H:reg1_t
   ^ t38_23637:reg1_t
    ? 0x99895f28:reg64_t : 0xc790fe97:reg64_t
  t40 =  cast(cast(
   cast(cast(t39_23638:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff83a9a43f:reg64_t
   )L:reg32_t)H:reg1_t
   ^  cast(t39_23638:reg64_t)L:reg32_t <$ 0x7c565bc1:reg32_t 
   
  t41 =   cast(
   cast(cast(t39_23638:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff83a9a43f:reg64_t
   )L:reg32_t
   == 0:reg32_t
    | 
   (cast(cast(
   cast(cast(t39_23638:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff83a9a43f:reg64_t
   )L:reg32_t)H:reg1_t
   ^ t40_23639:reg1_t)
    
  Symbolic branch condition (0x0042d9b6) t41_23640:reg1_t
  Current Path String: 11111110111111111101
  Trying false: Unsatisfiable.
  Trying true: Satisfiable.
  Current Path String: 111111101111111111011
  Current path: 111111101111111111011
  t42 =  cast(cast(
   cast(cast(t39_23638:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff85ab9f8f:reg64_t
   )L:reg32_t)H:reg1_t
   ^  cast(t39_23638:reg64_t)L:reg32_t <$ 0x7a546071:reg32_t 
   
  t43 =   cast(
   cast(cast(t39_23638:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff85ab9f8f:reg64_t
   )L:reg32_t
   == 0:reg32_t
    | 
   (cast(cast(
   cast(cast(t39_23638:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff85ab9f8f:reg64_t
   )L:reg32_t)H:reg1_t
   ^ t42_23641:reg1_t)
    
  Symbolic branch condition (0x0042d9cc) t43_23642:reg1_t
  Current Path String: 111111101111111111011
  Trying false: Unsatisfiable.
  Trying true: Satisfiable.
  Current Path String: 1111111011111111110111
  Current path: 1111111011111111110111
  t44 =  cast(cast(
   cast(cast(t39_23638:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffffc3e8eeb8:reg64_t
   )L:reg32_t)H:reg1_t
   ^  cast(t39_23638:reg64_t)L:reg32_t <$ 0x3c171148:reg32_t 
   
  t45 =   cast(
   cast(cast(t39_23638:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffffc3e8eeb8:reg64_t
   )L:reg32_t
   == 0:reg32_t
    | 
   (cast(cast(
   cast(cast(t39_23638:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffffc3e8eeb8:reg64_t
   )L:reg32_t)H:reg1_t
   ^ t44_23643:reg1_t)
    
  Symbolic branch condition (0x0042d9e2) t45_23644:reg1_t
  Current Path String: 1111111011111111110111
  Trying false: Unsatisfiable.
  Trying true: Satisfiable.
  Current Path String: 11111110111111111101111
  Current path: 11111110111111111101111
  t46 =  cast(cast(
   cast(cast(t39_23638:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffffcc015d57:reg64_t
   )L:reg32_t)H:reg1_t
   ^  cast(t39_23638:reg64_t)L:reg32_t <$ 0x33fea2a9:reg32_t 
   
  t47 =   cast(
   cast(cast(t39_23638:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffffcc015d57:reg64_t
   )L:reg32_t
   == 0:reg32_t
    | 
   (cast(cast(
   cast(cast(t39_23638:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffffcc015d57:reg64_t
   )L:reg32_t)H:reg1_t
   ^ t46_23645:reg1_t)
    
  Symbolic branch condition (0x0042d9f8) t47_23646:reg1_t
  Current Path String: 11111110111111111101111
  Trying true: Satisfiable.
  Trying false: Unsatisfiable.
  Current Path String: 111111101111111111011111
  Current path: 111111101111111111011111
  t48 =  cast(cast(
   cast(cast(t39_23638:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff175b4f23:reg64_t
   )L:reg32_t)H:reg1_t
   ^  cast(t39_23638:reg64_t)L:reg32_t <$ 0xe8a4b0dd:reg32_t 
   
  t49 =   cast(
   cast(cast(t39_23638:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff175b4f23:reg64_t
   )L:reg32_t
   == 0:reg32_t
    | 
   (cast(cast(
   cast(cast(t39_23638:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff175b4f23:reg64_t
   )L:reg32_t)H:reg1_t
   ^ t48_23647:reg1_t)
    
  Symbolic branch condition (0x0042da0e) t49_23648:reg1_t
  Current Path String: 111111101111111111011111
  Trying false: Unsatisfiable.
  Trying true: Satisfiable.
  Current Path String: 1111111011111111110111111
  Current path: 1111111011111111110111111
  t50 =  cast(cast(
   cast(cast(t39_23638:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff200063f5:reg64_t
   )L:reg32_t)H:reg1_t
   ^  cast(t39_23638:reg64_t)L:reg32_t <$ 0xdfff9c0b:reg32_t 
   
  t51 =   cast(
   cast(cast(t39_23638:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff200063f5:reg64_t
   )L:reg32_t
   == 0:reg32_t
    | 
   (cast(cast(
   cast(cast(t39_23638:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff200063f5:reg64_t
   )L:reg32_t)H:reg1_t
   ^ t50_23649:reg1_t)
    
  Symbolic branch condition (0x0042da24) t51_23650:reg1_t
  Current Path String: 1111111011111111110111111
  Trying true: Satisfiable.
  Trying false: Unsatisfiable.
  Current Path String: 11111110111111111101111111
  Current path: 11111110111111111101111111
  t52 =  cast(cast(
   cast(cast(t39_23638:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff2b866e48:reg64_t
   )L:reg32_t)H:reg1_t
   ^  cast(t39_23638:reg64_t)L:reg32_t <$ 0xd47991b8:reg32_t 
   
  t53 =   cast(
   cast(cast(t39_23638:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff2b866e48:reg64_t
   )L:reg32_t
   == 0:reg32_t
    | 
   (cast(cast(
   cast(cast(t39_23638:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff2b866e48:reg64_t
   )L:reg32_t)H:reg1_t
   ^ t52_23651:reg1_t)
    
  Symbolic branch condition (0x0042da3a) t53_23652:reg1_t
  Current Path String: 11111110111111111101111111
  Trying false: Unsatisfiable.
  Trying true: Satisfiable.
  Current Path String: 111111101111111111011111111
  Current path: 111111101111111111011111111
  t54 =  cast(cast(
   cast(cast(t39_23638:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff66c88c0d:reg64_t
   )L:reg32_t)H:reg1_t
   ^  cast(t39_23638:reg64_t)L:reg32_t <$ 0x993773f3:reg32_t 
   
  Symbolic branch condition (0x0042da50)  cast(
   cast(cast(t39_23638:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff66c88c0d:reg64_t
   )L:reg32_t
   == 0:reg32_t
   
  Current Path String: 111111101111111111011111111
  Trying false: Satisfiable.
  Trying true: Unsatisfiable.
  Current Path String: 1111111011111111110111111110
  Current path: 1111111011111111110111111110
  t55 =  cast(cast(
   cast(cast(t39_23638:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff6676a0d8:reg64_t
   )L:reg32_t)H:reg1_t
   ^  cast(t39_23638:reg64_t)L:reg32_t <$ 0x99895f28:reg32_t 
   
  Symbolic branch condition (0x0042da66)  cast(
   cast(cast(t39_23638:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff6676a0d8:reg64_t
   )L:reg32_t
   == 0:reg32_t
   
  Current Path String: 1111111011111111110111111110
  Trying false: Satisfiable.
  Trying true: Satisfiable.
  Current Path String: 11111110111111111101111111100
  Current path: 11111110111111111101111111100
  t56 =  cast(cast(
   cast(cast(t39_23638:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff386f0169:reg64_t
   )L:reg32_t)H:reg1_t
   ^  cast(t39_23638:reg64_t)L:reg32_t <$ 0xc790fe97:reg32_t 
   
  Symbolic branch condition (0x0042da7c)  cast(
   cast(cast(t39_23638:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff386f0169:reg64_t
   )L:reg32_t
   == 0:reg32_t
   
  Current Path String: 11111110111111111101111111100
  Trying false: Unsatisfiable.
  Trying true: Satisfiable.
  Current Path String: 111111101111111111011111111001
  Current path: 111111101111111111011111111001
  Starting return-typeconv adaptor
  SRFM#compare_sym_se called len(f1_h_l) = 0 len(f2_h_l)=0
  f1_hash_list_len = 0 f2_hash_list_len = 1
  GSM#reset called
  GHM#clear called
  FM#compare_conc_se called
  all side-effects were equal
  GSSM#reset4_3 4 -> 3 
  GSM#reset called
  GHM#clear called
  FM#reset_f2_special_handlers_snap
  linux_syscalls#reset_f2_snap called
  t57 =  ret_type_13339:reg8_t == 0:reg8_t  ? 0x890098f7:reg64_t :
   ( ret_type_13339:reg8_t == 1:reg8_t  ? ret_val_13340:reg64_t :
   ( ret_type_13339:reg8_t == 0xb:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
   cast(cast(f_val_13317:reg64_t)L:reg32_t)S:reg64_t :
   ( f_val_13317:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
   cast(cast(e_val_13321:reg64_t)L:reg32_t)S:reg64_t :
   ( e_val_13321:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
   cast(cast(d_val_13325:reg64_t)L:reg32_t)S:reg64_t :
   ( d_val_13325:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
   cast(cast(c_val_13329:reg64_t)L:reg32_t)S:reg64_t :
   ( c_val_13329:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
   cast(cast(b_val_13333:reg64_t)L:reg32_t)S:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x42420000:reg64_t))
   :
   ( a_is_const_13338:reg1_t <> false  ?
   cast(cast(a_val_13337:reg64_t)L:reg32_t)S:reg64_t :
   ( a_val_13337:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x42420000:reg64_t)))))))
   :
   ( ret_type_13339:reg8_t == 0xc:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
   cast(cast(f_val_13317:reg64_t)L:reg32_t)U:reg64_t :
   ( f_val_13317:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
   cast(cast(e_val_13321:reg64_t)L:reg32_t)U:reg64_t :
   ( e_val_13321:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
   cast(cast(d_val_13325:reg64_t)L:reg32_t)U:reg64_t :
   ( d_val_13325:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
   cast(cast(c_val_13329:reg64_t)L:reg32_t)U:reg64_t :
   ( c_val_13329:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
   cast(cast(b_val_13333:reg64_t)L:reg32_t)U:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x42420000:reg64_t))
   :
   ( a_is_const_13338:reg1_t <> false  ?
   cast(cast(a_val_13337:reg64_t)L:reg32_t)U:reg64_t :
   ( a_val_13337:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x42420000:reg64_t)))))))
   :
   ( ret_type_13339:reg8_t == 0x15:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
   cast(cast(f_val_13317:reg64_t)L:reg16_t)S:reg64_t :
   ( f_val_13317:reg64_t == 1:reg64_t  ? 1:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
   cast(cast(e_val_13321:reg64_t)L:reg16_t)S:reg64_t :
   ( e_val_13321:reg64_t == 1:reg64_t  ? 1:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
   cast(cast(d_val_13325:reg64_t)L:reg16_t)S:reg64_t :
   ( d_val_13325:reg64_t == 1:reg64_t  ? 1:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
   cast(cast(c_val_13329:reg64_t)L:reg16_t)S:reg64_t :
   ( c_val_13329:reg64_t == 1:reg64_t  ? 1:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
   cast(cast(b_val_13333:reg64_t)L:reg16_t)S:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t))
   :
   ( a_is_const_13338:reg1_t <> false  ?
   cast(cast(a_val_13337:reg64_t)L:reg16_t)S:reg64_t :
   ( a_val_13337:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t)))))))
   :
   ( ret_type_13339:reg8_t == 0x16:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
   cast(cast(f_val_13317:reg64_t)L:reg16_t)U:reg64_t :
   ( f_val_13317:reg64_t == 1:reg64_t  ? 1:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
   cast(cast(e_val_13321:reg64_t)L:reg16_t)U:reg64_t :
   ( e_val_13321:reg64_t == 1:reg64_t  ? 1:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
   cast(cast(d_val_13325:reg64_t)L:reg16_t)U:reg64_t :
   ( d_val_13325:reg64_t == 1:reg64_t  ? 1:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
   cast(cast(c_val_13329:reg64_t)L:reg16_t)U:reg64_t :
   ( c_val_13329:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
   cast(cast(b_val_13333:reg64_t)L:reg16_t)U:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t))
   :
   ( a_is_const_13338:reg1_t <> false  ?
   cast(cast(a_val_13337:reg64_t)L:reg16_t)U:reg64_t :
   ( a_val_13337:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t)))))))
   :
   ( ret_type_13339:reg8_t == 0x1f:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
   cast(cast(f_val_13317:reg64_t)L:reg8_t)S:reg64_t :
   ( f_val_13317:reg64_t == 1:reg64_t  ? 1:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
   cast(cast(e_val_13321:reg64_t)L:reg8_t)S:reg64_t :
   ( e_val_13321:reg64_t == 1:reg64_t  ? 1:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
   cast(cast(d_val_13325:reg64_t)L:reg8_t)S:reg64_t :
   ( d_val_13325:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
   cast(cast(c_val_13329:reg64_t)L:reg8_t)S:reg64_t :
   ( c_val_13329:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
   cast(cast(b_val_13333:reg64_t)L:reg8_t)S:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t))
   :
   ( a_is_const_13338:reg1_t <> false  ?
   cast(cast(a_val_13337:reg64_t)L:reg8_t)S:reg64_t :
   ( a_val_13337:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t)))))))
   :
   ( ret_type_13339:reg8_t == 0x20:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
   cast(cast(f_val_13317:reg64_t)L:reg8_t)U:reg64_t :
   ( f_val_13317:reg64_t == 1:reg64_t  ? 1:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
   cast(cast(e_val_13321:reg64_t)L:reg8_t)U:reg64_t :
   ( e_val_13321:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
   cast(cast(d_val_13325:reg64_t)L:reg8_t)U:reg64_t :
   ( d_val_13325:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
   cast(cast(c_val_13329:reg64_t)L:reg8_t)U:reg64_t :
   ( c_val_13329:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
   cast(cast(b_val_13333:reg64_t)L:reg8_t)U:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t))
   :
   ( a_is_const_13338:reg1_t <> false  ?
   cast(cast(a_val_13337:reg64_t)L:reg8_t)U:reg64_t :
   ( a_val_13337:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t)))))))
   :
   ( ret_type_13339:reg8_t == 0x29:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
   cast(cast(f_val_13317:reg64_t)L:reg1_t)S:reg64_t :
   ( f_val_13317:reg64_t == 1:reg64_t  ?
   0xffffffffffffffff:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
   cast(cast(e_val_13321:reg64_t)L:reg1_t)S:reg64_t :
   ( e_val_13321:reg64_t == 1:reg64_t  ?
   0xffffffffffffffff:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
   cast(cast(d_val_13325:reg64_t)L:reg1_t)S:reg64_t :
   ( d_val_13325:reg64_t == 1:reg64_t  ?
   0xffffffffffffffff:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
   cast(cast(c_val_13329:reg64_t)L:reg1_t)S:reg64_t :
   ( c_val_13329:reg64_t == 1:reg64_t  ?
   0xffffffffffffffff:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
   cast(cast(b_val_13333:reg64_t)L:reg1_t)S:reg64_t
   :
   ( b_val_13333:reg64_t == 1:reg64_t  ?
   0xffffffffffffffff:reg64_t : 0:reg64_t))
   :
   ( a_is_const_13338:reg1_t <> false  ?
   cast(cast(a_val_13337:reg64_t)L:reg1_t)S:reg64_t
   :
   ( a_val_13337:reg64_t == 1:reg64_t  ?
   0xffffffffffffffff:reg64_t : 0:reg64_t)))))))
   :
   ( ret_type_13339:reg8_t == 0x2a:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
   cast(cast(f_val_13317:reg64_t)L:reg1_t)U:reg64_t :
   ( f_val_13317:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
   cast(cast(e_val_13321:reg64_t)L:reg1_t)U:reg64_t :
   ( e_val_13321:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
   cast(cast(d_val_13325:reg64_t)L:reg1_t)U:reg64_t :
   ( d_val_13325:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
   cast(cast(c_val_13329:reg64_t)L:reg1_t)U:reg64_t
   :
   ( c_val_13329:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
   cast(cast(b_val_13333:reg64_t)L:reg1_t)U:
   reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t
   : 0:reg64_t))
   :
   ( a_is_const_13338:reg1_t <> false  ?
   cast(cast(a_val_13337:reg64_t)L:reg1_t)U:
   reg64_t :
   ( a_val_13337:reg64_t == 1:reg64_t  ? 1:reg64_t
   : 0:reg64_t)))))))
   :
   ( ret_type_13339:reg8_t == 0x33:reg8_t  ?
   0xffffffff890098f7:reg64_t :
   ( ret_type_13339:reg8_t == 0x34:reg8_t  ?
   0x890098f7:reg64_t :
   ( ret_type_13339:reg8_t == 0x35:reg8_t  ? 1:reg64_t :
   ( ret_type_13339:reg8_t == 0x3d:reg8_t  ?
   0xffffffffffff98f7:reg64_t :
   ( ret_type_13339:reg8_t == 0x3e:reg8_t  ?
   0x98f7:reg64_t :
   ( ret_type_13339:reg8_t == 0x47:reg8_t  ?
   0xfffffffffffffff7:reg64_t :
   ( ret_type_13339:reg8_t == 0x48:reg8_t  ?
   0xf7:reg64_t :
   ( ret_type_13339:reg8_t == 0x51:reg8_t  ?
   0xffffffffffffffff:reg64_t : 1:reg64_t)))))))))))))))))
  t58 =  ret_type_13339:reg8_t == 0:reg8_t  ? 0x89009800:reg64_t :
   ( ret_type_13339:reg8_t == 1:reg8_t  ?
    ret_val_13340:reg64_t & 0xffffffffffffff00:reg64_t  :
   ( ret_type_13339:reg8_t == 0xb:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
    cast(cast(f_val_13317:reg64_t)L:reg32_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( f_val_13317:reg64_t == 1:reg64_t  ? 0:reg64_t : 0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
    cast(cast(e_val_13321:reg64_t)L:reg32_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( e_val_13321:reg64_t == 1:reg64_t  ? 0:reg64_t : 0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
    cast(cast(d_val_13325:reg64_t)L:reg32_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( d_val_13325:reg64_t == 1:reg64_t  ? 0:reg64_t :
   0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
    cast(cast(c_val_13329:reg64_t)L:reg32_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( c_val_13329:reg64_t == 1:reg64_t  ? 0:reg64_t :
   0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
    cast(cast(b_val_13333:reg64_t)L:reg32_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 0:reg64_t :
   0x42420000:reg64_t))
   :
   ( a_is_const_13338:reg1_t <> false  ?
    cast(cast(a_val_13337:reg64_t)L:reg32_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( a_val_13337:reg64_t == 1:reg64_t  ? 0:reg64_t :
   0x42420000:reg64_t)))))))
   :
   ( ret_type_13339:reg8_t == 0xc:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
    cast(cast(f_val_13317:reg64_t)L:reg32_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( f_val_13317:reg64_t == 1:reg64_t  ? 0:reg64_t : 0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
    cast(cast(e_val_13321:reg64_t)L:reg32_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( e_val_13321:reg64_t == 1:reg64_t  ? 0:reg64_t :
   0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
    cast(cast(d_val_13325:reg64_t)L:reg32_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( d_val_13325:reg64_t == 1:reg64_t  ? 0:reg64_t :
   0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
    cast(cast(c_val_13329:reg64_t)L:reg32_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( c_val_13329:reg64_t == 1:reg64_t  ? 0:reg64_t :
   0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
    cast(cast(b_val_13333:reg64_t)L:reg32_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 0:reg64_t :
   0x42420000:reg64_t))
   :
   ( a_is_const_13338:reg1_t <> false  ?
    cast(cast(a_val_13337:reg64_t)L:reg32_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( a_val_13337:reg64_t == 1:reg64_t  ? 0:reg64_t :
   0x42420000:reg64_t)))))))
   :
   ( ret_type_13339:reg8_t == 0x15:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
    cast(cast(f_val_13317:reg64_t)L:reg16_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
    cast(cast(e_val_13321:reg64_t)L:reg16_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
    cast(cast(d_val_13325:reg64_t)L:reg16_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
    cast(cast(c_val_13329:reg64_t)L:reg16_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
    cast(cast(b_val_13333:reg64_t)L:reg16_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( a_is_const_13338:reg1_t <> false  ?
    cast(cast(a_val_13337:reg64_t)L:reg16_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t))))))
   :
   ( ret_type_13339:reg8_t == 0x16:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
    cast(cast(f_val_13317:reg64_t)L:reg16_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
    cast(cast(e_val_13321:reg64_t)L:reg16_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
    cast(cast(d_val_13325:reg64_t)L:reg16_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
    cast(cast(c_val_13329:reg64_t)L:reg16_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
    cast(cast(b_val_13333:reg64_t)L:reg16_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( a_is_const_13338:reg1_t <> false  ?
    cast(cast(a_val_13337:reg64_t)L:reg16_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t))))))
   :
   ( ret_type_13339:reg8_t == 0x1f:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
    cast(cast(f_val_13317:reg64_t)L:reg8_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
    cast(cast(e_val_13321:reg64_t)L:reg8_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
    cast(cast(d_val_13325:reg64_t)L:reg8_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
    cast(cast(c_val_13329:reg64_t)L:reg8_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
    cast(cast(b_val_13333:reg64_t)L:reg8_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( a_is_const_13338:reg1_t <> false  ?
    cast(cast(a_val_13337:reg64_t)L:reg8_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t))))))
   :
   ( ret_type_13339:reg8_t == 0x20:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
    cast(cast(f_val_13317:reg64_t)L:reg8_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
    cast(cast(e_val_13321:reg64_t)L:reg8_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
    cast(cast(d_val_13325:reg64_t)L:reg8_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
    cast(cast(c_val_13329:reg64_t)L:reg8_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
    cast(cast(b_val_13333:reg64_t)L:reg8_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( a_is_const_13338:reg1_t <> false  ?
    cast(cast(a_val_13337:reg64_t)L:reg8_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t))))))
   :
   ( ret_type_13339:reg8_t == 0x29:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
    cast(cast(f_val_13317:reg64_t)L:reg1_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( f_val_13317:reg64_t == 1:reg64_t  ?
   0xffffffffffffff00:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
    cast(cast(e_val_13321:reg64_t)L:reg1_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( e_val_13321:reg64_t == 1:reg64_t  ?
   0xffffffffffffff00:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
    cast(cast(d_val_13325:reg64_t)L:reg1_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( d_val_13325:reg64_t == 1:reg64_t  ?
   0xffffffffffffff00:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
    cast(cast(c_val_13329:reg64_t)L:reg1_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( c_val_13329:reg64_t == 1:reg64_t  ?
   0xffffffffffffff00:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
    cast(cast(b_val_13333:reg64_t)L:reg1_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( b_val_13333:reg64_t == 1:reg64_t  ?
   0xffffffffffffff00:reg64_t : 0:reg64_t))
   :
   ( a_is_const_13338:reg1_t <> false  ?
    cast(cast(a_val_13337:reg64_t)L:reg1_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( a_val_13337:reg64_t == 1:reg64_t  ?
   0xffffffffffffff00:reg64_t : 0:reg64_t)))))))
   :
   ( ret_type_13339:reg8_t == 0x2a:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
    cast(cast(f_val_13317:reg64_t)L:reg1_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
    cast(cast(e_val_13321:reg64_t)L:reg1_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
    cast(cast(d_val_13325:reg64_t)L:reg1_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
    cast(cast(c_val_13329:reg64_t)L:reg1_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
    cast(cast(b_val_13333:reg64_t)L:reg1_t)U:
   reg64_t & 0xffffffffffffff00:reg64_t  :
   0:reg64_t)
   :
   ( a_is_const_13338:reg1_t <> false  ?
    cast(cast(a_val_13337:reg64_t)L:reg1_t)U:
   reg64_t & 0xffffffffffffff00:reg64_t  :
   0:reg64_t))))))
   :
   ( ret_type_13339:reg8_t == 0x33:reg8_t  ?
   0xffffffff89009800:reg64_t :
   ( ret_type_13339:reg8_t == 0x34:reg8_t  ?
   0x89009800:reg64_t :
   ( ret_type_13339:reg8_t == 0x35:reg8_t  ? 0:reg64_t :
   ( ret_type_13339:reg8_t == 0x3d:reg8_t  ?
   0xffffffffffff9800:reg64_t :
   ( ret_type_13339:reg8_t == 0x3e:reg8_t  ?
   0x9800:reg64_t :
   ( ret_type_13339:reg8_t == 0x47:reg8_t  ?
   0xffffffffffffff00:reg64_t :
   ( ret_type_13339:reg8_t == 0x48:reg8_t  ?
   0:reg64_t :
   ( ret_type_13339:reg8_t == 0x51:reg8_t  ?
   0xffffffffffffff00:reg64_t : 0:reg64_t)))))))))))))))))
  Symbolic branch condition (0x004423c2)  cast(cast(t58_23824:reg64_t)L:reg8_t)U:reg64_t == 0:reg64_t 
  Current Path String: 111111101111111111011111111001
  Trying false: Unsatisfiable.
  Trying true: Satisfiable.
  Current Path String: 1111111011111111110111111110011
  Current path: 1111111011111111110111111110011
  write(1, 0x50001000, 21)
  Completed adapted_f1
   = 21 (0x00000015)
  Symbolic branch condition (0x0042df12)  t57_23822:reg64_t == 0xdcd967bf:reg64_t 
  Current Path String: 1111111011111111110111111110011
  Trying true: Satisfiable.
  Trying false: Satisfiable.
  Current Path String: 11111110111111111101111111100111
  Current path: 11111110111111111101111111100111
  t59 =  cast( cast( t57_23822:reg64_t == 0xdcd967bf:reg64_t )U:reg8_t & 1:reg8_t )U:
   reg64_t == 0:reg64_t 
  t60 =  cast( cast( t57_23822:reg64_t == 0xdcd967bf:reg64_t )U:reg8_t & 1:reg8_t )U:
   reg64_t
   | 
   (
   (cast( t57_23822:reg64_t == 0xdcd967bf:reg64_t )U:reg64_t
   | 0xa686300:reg64_t)
    & 0xffffffffffffff00:reg64_t)
    
  Symbolic branch condition (0x0042e570)  cast(t60_23949:reg64_t)L:reg8_t == 0:reg8_t 
  Current Path String: 11111110111111111101111111100111
  Trying false: Satisfiable.
  Trying true: Unsatisfiable.
  Current Path String: 111111101111111111011111111001110
  Current path: 111111101111111111011111111001110
  write(1, 0x50001000, 18)
  Match
  read a test
   = 18 (0x00000012)
  write(1, 0x50001000, 12)
  Starting f1
   = 12 (0x0000000c)
  SRFM#make_sym_snap called
  GSM#make_snap called
  FM#make_f1_conc_snap called
  GSSM#make_snap 3 -> 4
  GSM#make_snap called
  FM#make_f1_special_handlers_snap
  linux_syscalls#make_f1_snap called
  linux_syscalls#make_snap called
  SRFM#save_sym_se saving f1_hash_list.length = 1
  FM#save_f1_conc_se called
  AS#ready to apply (0.000000 sec). eof1
  GSSM#reset4_3 4 -> 3 
  GSM#reset called
  GHM#clear called
  FM#reset_f1_special_handlers_snap
  linux_syscalls#reset_f1_snap called
  write(1, 0x50001000, 13)
  Completed f1
   = 13 (0x0000000d)
  write(1, 0x50001000, 20)
  Starting adapted_f1
   = 20 (0x00000014)
  SRFM#make_f2_sym_snap called
  GSM#reset called
  GHM#clear called
  FM#make_f2_conc_snap called
  GSSM#make_snap 3 -> 4
  GSM#make_snap called
  FM#make_f2_special_handlers_snap
  linux_syscalls#make_f2_snap called
  linux_syscalls#make_snap called
  Starting simple adaptor
  setting arg= f_is_const_13318:reg1_t <> false  ? f_val_13317:reg64_t :
   ( f_val_13317:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420018:reg64_t)
  setting arg= e_is_const_13322:reg1_t <> false  ? e_val_13321:reg64_t :
   ( e_val_13321:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420018:reg64_t)
  setting arg= d_is_const_13326:reg1_t <> false  ? d_val_13325:reg64_t :
   ( d_val_13325:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420018:reg64_t)
  setting arg= c_is_const_13330:reg1_t <> false  ? c_val_13329:reg64_t :
   ( c_val_13329:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420018:reg64_t)
  setting arg= b_is_const_13334:reg1_t <> false  ? b_val_13333:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420018:reg64_t)
  setting arg= a_is_const_13338:reg1_t <> false  ? a_val_13337:reg64_t :
   ( a_val_13337:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420018:reg64_t)
  AS#ready to apply (0.000000 sec). sof2
  SRFM#Generating structure adaptor formulas...exec_runloop#thunk() should save arg regs here
  t61 =  a_is_const_13338:reg1_t <> false  ? cast(a_val_13337:reg64_t)L:reg32_t :
   ( a_val_13337:reg64_t == 1:reg64_t  ? 1:reg32_t : 0x42420018:reg32_t)
  t62 =  b_is_const_13334:reg1_t <> false  ? b_val_13333:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420018:reg64_t)
  t63 =  cast(cast(-cast(t61_24017:reg32_t)U:reg64_t)L:reg32_t)H:reg1_t
   ^  0:reg32_t <$ t61_24017:reg32_t 
   
  t64 =  cast(cast(-cast(t61_24017:reg32_t)U:reg64_t)L:reg32_t)H:reg1_t
   ^ t63_24019:reg1_t
    ? 0x99895f28:reg64_t : 0xc790fe97:reg64_t
  t65 =  cast(cast(
   cast(cast(t64_24020:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff83a9a43f:reg64_t
   )L:reg32_t)H:reg1_t
   ^  cast(t64_24020:reg64_t)L:reg32_t <$ 0x7c565bc1:reg32_t 
   
  t66 =   cast(
   cast(cast(t64_24020:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff83a9a43f:reg64_t
   )L:reg32_t
   == 0:reg32_t
    | 
   (cast(cast(
   cast(cast(t64_24020:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff83a9a43f:reg64_t
   )L:reg32_t)H:reg1_t
   ^ t65_24021:reg1_t)
    
  Symbolic branch condition (0x0042d9b6) t66_24022:reg1_t
  Current Path String: 111111101111111111011111111001110
  Trying false: Unsatisfiable.
  Trying true: Satisfiable.
  Current Path String: 1111111011111111110111111110011101
  Current path: 1111111011111111110111111110011101
  t67 =  cast(cast(
   cast(cast(t64_24020:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff85ab9f8f:reg64_t
   )L:reg32_t)H:reg1_t
   ^  cast(t64_24020:reg64_t)L:reg32_t <$ 0x7a546071:reg32_t 
   
  t68 =   cast(
   cast(cast(t64_24020:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff85ab9f8f:reg64_t
   )L:reg32_t
   == 0:reg32_t
    | 
   (cast(cast(
   cast(cast(t64_24020:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff85ab9f8f:reg64_t
   )L:reg32_t)H:reg1_t
   ^ t67_24023:reg1_t)
    
  Symbolic branch condition (0x0042d9cc) t68_24024:reg1_t
  Current Path String: 1111111011111111110111111110011101
  Trying true: Satisfiable.
  Trying false: Unsatisfiable.
  Current Path String: 11111110111111111101111111100111011
  Current path: 11111110111111111101111111100111011
  t69 =  cast(cast(
   cast(cast(t64_24020:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffffc3e8eeb8:reg64_t
   )L:reg32_t)H:reg1_t
   ^  cast(t64_24020:reg64_t)L:reg32_t <$ 0x3c171148:reg32_t 
   
  t70 =   cast(
   cast(cast(t64_24020:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffffc3e8eeb8:reg64_t
   )L:reg32_t
   == 0:reg32_t
    | 
   (cast(cast(
   cast(cast(t64_24020:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffffc3e8eeb8:reg64_t
   )L:reg32_t)H:reg1_t
   ^ t69_24025:reg1_t)
    
  Symbolic branch condition (0x0042d9e2) t70_24026:reg1_t
  Current Path String: 11111110111111111101111111100111011
  Trying false: Unsatisfiable.
  Trying true: Satisfiable.
  Current Path String: 111111101111111111011111111001110111
  Current path: 111111101111111111011111111001110111
  t71 =  cast(cast(
   cast(cast(t64_24020:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffffcc015d57:reg64_t
   )L:reg32_t)H:reg1_t
   ^  cast(t64_24020:reg64_t)L:reg32_t <$ 0x33fea2a9:reg32_t 
   
  t72 =   cast(
   cast(cast(t64_24020:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffffcc015d57:reg64_t
   )L:reg32_t
   == 0:reg32_t
    | 
   (cast(cast(
   cast(cast(t64_24020:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffffcc015d57:reg64_t
   )L:reg32_t)H:reg1_t
   ^ t71_24027:reg1_t)
    
  Symbolic branch condition (0x0042d9f8) t72_24028:reg1_t
  Current Path String: 111111101111111111011111111001110111
  Trying true: Satisfiable.
  Trying false: Unsatisfiable.
  Current Path String: 1111111011111111110111111110011101111
  Current path: 1111111011111111110111111110011101111
  t73 =  cast(cast(
   cast(cast(t64_24020:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff175b4f23:reg64_t
   )L:reg32_t)H:reg1_t
   ^  cast(t64_24020:reg64_t)L:reg32_t <$ 0xe8a4b0dd:reg32_t 
   
  t74 =   cast(
   cast(cast(t64_24020:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff175b4f23:reg64_t
   )L:reg32_t
   == 0:reg32_t
    | 
   (cast(cast(
   cast(cast(t64_24020:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff175b4f23:reg64_t
   )L:reg32_t)H:reg1_t
   ^ t73_24029:reg1_t)
    
  Symbolic branch condition (0x0042da0e) t74_24030:reg1_t
  Current Path String: 1111111011111111110111111110011101111
  Trying true: Satisfiable.
  Trying false: Unsatisfiable.
  Current Path String: 11111110111111111101111111100111011111
  Current path: 11111110111111111101111111100111011111
  t75 =  cast(cast(
   cast(cast(t64_24020:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff200063f5:reg64_t
   )L:reg32_t)H:reg1_t
   ^  cast(t64_24020:reg64_t)L:reg32_t <$ 0xdfff9c0b:reg32_t 
   
  t76 =   cast(
   cast(cast(t64_24020:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff200063f5:reg64_t
   )L:reg32_t
   == 0:reg32_t
    | 
   (cast(cast(
   cast(cast(t64_24020:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff200063f5:reg64_t
   )L:reg32_t)H:reg1_t
   ^ t75_24031:reg1_t)
    
  Symbolic branch condition (0x0042da24) t76_24032:reg1_t
  Current Path String: 11111110111111111101111111100111011111
  Trying true: Satisfiable.
  Trying false: Unsatisfiable.
  Current Path String: 111111101111111111011111111001110111111
  Current path: 111111101111111111011111111001110111111
  t77 =  cast(cast(
   cast(cast(t64_24020:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff2b866e48:reg64_t
   )L:reg32_t)H:reg1_t
   ^  cast(t64_24020:reg64_t)L:reg32_t <$ 0xd47991b8:reg32_t 
   
  t78 =   cast(
   cast(cast(t64_24020:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff2b866e48:reg64_t
   )L:reg32_t
   == 0:reg32_t
    | 
   (cast(cast(
   cast(cast(t64_24020:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff2b866e48:reg64_t
   )L:reg32_t)H:reg1_t
   ^ t77_24033:reg1_t)
    
  Symbolic branch condition (0x0042da3a) t78_24034:reg1_t
  Current Path String: 111111101111111111011111111001110111111
  Trying false: Unsatisfiable.
  Trying true: Satisfiable.
  Current Path String: 1111111011111111110111111110011101111111
  Current path: 1111111011111111110111111110011101111111
  t79 =  cast(cast(
   cast(cast(t64_24020:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff66c88c0d:reg64_t
   )L:reg32_t)H:reg1_t
   ^  cast(t64_24020:reg64_t)L:reg32_t <$ 0x993773f3:reg32_t 
   
  Symbolic branch condition (0x0042da50)  cast(
   cast(cast(t64_24020:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff66c88c0d:reg64_t
   )L:reg32_t
   == 0:reg32_t
   
  Current Path String: 1111111011111111110111111110011101111111
  Trying false: Satisfiable.
  Trying true: Unsatisfiable.
  Current Path String: 11111110111111111101111111100111011111110
  Current path: 11111110111111111101111111100111011111110
  t80 =  cast(cast(
   cast(cast(t64_24020:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff6676a0d8:reg64_t
   )L:reg32_t)H:reg1_t
   ^  cast(t64_24020:reg64_t)L:reg32_t <$ 0x99895f28:reg32_t 
   
  Symbolic branch condition (0x0042da66)  cast(
   cast(cast(t64_24020:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff6676a0d8:reg64_t
   )L:reg32_t
   == 0:reg32_t
   
  Current Path String: 11111110111111111101111111100111011111110
  Trying true: Satisfiable.
  Trying false: Unsatisfiable.
  Current Path String: 111111101111111111011111111001110111111101
  Current path: 111111101111111111011111111001110111111101
  Symbolic address t62_24018:reg64_t @ (0x42db54)
  Concrete base terms: 
  Concrete offset terms: 
  Offset expression terms: 
  Ambiguous expression terms:  b_is_const_13334:reg1_t <> false  ? b_val_13333:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420018:reg64_t)
  Ambiguous symbol terms: 
  Current Path String: 111111101111111111011111111001110111111101
  Trying true: Satisfiable.
  Trying false: Unsatisfiable.
  Current Path String: 1111111011111111110111111110011101111111011
  Current path: 1111111011111111110111111110011101111111011
  SRFM#region_for took branch true in Not_found case expr =  b_is_const_13334:reg1_t <> false  ? b_val_13333:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420018:reg64_t)
  Current Path String: 1111111011111111110111111110011101111111011
  Trying true: Satisfiable.
  Trying false: Unsatisfiable.
  Current Path String: 11111110111111111101111111100111011111110111
  Current path: 11111110111111111101111111100111011111110111
  SRFM#region_for using concrete address 42420018 for  b_is_const_13334:reg1_t <> false  ? b_val_13333:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420018:reg64_t)
  SRFM#region_for regions seen in this path = 1
  Current Path String: 11111110111111111101111111100111011111110111
  Trying false: Satisfiable.
  Trying true: Unsatisfiable.
  Current Path String: 111111101111111111011111111001110111111101110
  Current path: 111111101111111111011111111001110111111101110
  Address  b_is_const_13334:reg1_t <> false  ? b_val_13333:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420018:reg64_t) is region 2
  t81 =  cast(cast( -cast(t61_24017:reg32_t)U:reg64_t + 1:reg64_t )L:reg32_t)H:reg1_t
   ^  1:reg32_t <$ t61_24017:reg32_t 
   
  t82 =  cast(cast( -cast(t61_24017:reg32_t)U:reg64_t + 1:reg64_t )L:reg32_t)H:reg1_t
   ^ t81_24037:reg1_t
    ? 0x99895f28:reg64_t : 0xc790fe97:reg64_t
  t83 =  cast(cast(
   cast(cast(t82_24038:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff83a9a43f:reg64_t
   )L:reg32_t)H:reg1_t
   ^  cast(t82_24038:reg64_t)L:reg32_t <$ 0x7c565bc1:reg32_t 
   
  t84 =   cast(
   cast(cast(t82_24038:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff83a9a43f:reg64_t
   )L:reg32_t
   == 0:reg32_t
    | 
   (cast(cast(
   cast(cast(t82_24038:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff83a9a43f:reg64_t
   )L:reg32_t)H:reg1_t
   ^ t83_24039:reg1_t)
    
  Symbolic branch condition (0x0042d9b6) t84_24040:reg1_t
  Current Path String: 111111101111111111011111111001110111111101110
  Trying false: Unsatisfiable.
  Trying true: Satisfiable.
  Current Path String: 1111111011111111110111111110011101111111011101
  Current path: 1111111011111111110111111110011101111111011101
  t85 =  cast(cast(
   cast(cast(t82_24038:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff85ab9f8f:reg64_t
   )L:reg32_t)H:reg1_t
   ^  cast(t82_24038:reg64_t)L:reg32_t <$ 0x7a546071:reg32_t 
   
  t86 =   cast(
   cast(cast(t82_24038:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff85ab9f8f:reg64_t
   )L:reg32_t
   == 0:reg32_t
    | 
   (cast(cast(
   cast(cast(t82_24038:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff85ab9f8f:reg64_t
   )L:reg32_t)H:reg1_t
   ^ t85_24041:reg1_t)
    
  Symbolic branch condition (0x0042d9cc) t86_24042:reg1_t
  Current Path String: 1111111011111111110111111110011101111111011101
  Trying false: Unsatisfiable.
  Trying true: Satisfiable.
  Current Path String: 11111110111111111101111111100111011111110111011
  Current path: 11111110111111111101111111100111011111110111011
  t87 =  cast(cast(
   cast(cast(t82_24038:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffffc3e8eeb8:reg64_t
   )L:reg32_t)H:reg1_t
   ^  cast(t82_24038:reg64_t)L:reg32_t <$ 0x3c171148:reg32_t 
   
  t88 =   cast(
   cast(cast(t82_24038:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffffc3e8eeb8:reg64_t
   )L:reg32_t
   == 0:reg32_t
    | 
   (cast(cast(
   cast(cast(t82_24038:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffffc3e8eeb8:reg64_t
   )L:reg32_t)H:reg1_t
   ^ t87_24043:reg1_t)
    
  Symbolic branch condition (0x0042d9e2) t88_24044:reg1_t
  Current Path String: 11111110111111111101111111100111011111110111011
  Trying false: Unsatisfiable.
  Trying true: Satisfiable.
  Current Path String: 111111101111111111011111111001110111111101110111
  Current path: 111111101111111111011111111001110111111101110111
  t89 =  cast(cast(
   cast(cast(t82_24038:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffffcc015d57:reg64_t
   )L:reg32_t)H:reg1_t
   ^  cast(t82_24038:reg64_t)L:reg32_t <$ 0x33fea2a9:reg32_t 
   
  t90 =   cast(
   cast(cast(t82_24038:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffffcc015d57:reg64_t
   )L:reg32_t
   == 0:reg32_t
    | 
   (cast(cast(
   cast(cast(t82_24038:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffffcc015d57:reg64_t
   )L:reg32_t)H:reg1_t
   ^ t89_24045:reg1_t)
    
  Symbolic branch condition (0x0042d9f8) t90_24046:reg1_t
  Current Path String: 111111101111111111011111111001110111111101110111
  Trying true: Satisfiable.
  Trying false: Unsatisfiable.
  Current Path String: 1111111011111111110111111110011101111111011101111
  Current path: 1111111011111111110111111110011101111111011101111
  t91 =  cast(cast(
   cast(cast(t82_24038:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff175b4f23:reg64_t
   )L:reg32_t)H:reg1_t
   ^  cast(t82_24038:reg64_t)L:reg32_t <$ 0xe8a4b0dd:reg32_t 
   
  t92 =   cast(
   cast(cast(t82_24038:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff175b4f23:reg64_t
   )L:reg32_t
   == 0:reg32_t
    | 
   (cast(cast(
   cast(cast(t82_24038:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff175b4f23:reg64_t
   )L:reg32_t)H:reg1_t
   ^ t91_24047:reg1_t)
    
  Symbolic branch condition (0x0042da0e) t92_24048:reg1_t
  Current Path String: 1111111011111111110111111110011101111111011101111
  Trying false: Unsatisfiable.
  Trying true: Satisfiable.
  Current Path String: 11111110111111111101111111100111011111110111011111
  Current path: 11111110111111111101111111100111011111110111011111
  t93 =  cast(cast(
   cast(cast(t82_24038:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff200063f5:reg64_t
   )L:reg32_t)H:reg1_t
   ^  cast(t82_24038:reg64_t)L:reg32_t <$ 0xdfff9c0b:reg32_t 
   
  t94 =   cast(
   cast(cast(t82_24038:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff200063f5:reg64_t
   )L:reg32_t
   == 0:reg32_t
    | 
   (cast(cast(
   cast(cast(t82_24038:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff200063f5:reg64_t
   )L:reg32_t)H:reg1_t
   ^ t93_24049:reg1_t)
    
  Symbolic branch condition (0x0042da24) t94_24050:reg1_t
  Current Path String: 11111110111111111101111111100111011111110111011111
  Trying false: Unsatisfiable.
  Trying true: Satisfiable.
  Current Path String: 111111101111111111011111111001110111111101110111111
  Current path: 111111101111111111011111111001110111111101110111111
  t95 =  cast(cast(
   cast(cast(t82_24038:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff2b866e48:reg64_t
   )L:reg32_t)H:reg1_t
   ^  cast(t82_24038:reg64_t)L:reg32_t <$ 0xd47991b8:reg32_t 
   
  t96 =   cast(
   cast(cast(t82_24038:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff2b866e48:reg64_t
   )L:reg32_t
   == 0:reg32_t
    | 
   (cast(cast(
   cast(cast(t82_24038:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff2b866e48:reg64_t
   )L:reg32_t)H:reg1_t
   ^ t95_24051:reg1_t)
    
  Symbolic branch condition (0x0042da3a) t96_24052:reg1_t
  Current Path String: 111111101111111111011111111001110111111101110111111
  Trying true: Satisfiable.
  Trying false: Unsatisfiable.
  Current Path String: 1111111011111111110111111110011101111111011101111111
  Current path: 1111111011111111110111111110011101111111011101111111
  t97 =  cast(cast(
   cast(cast(t82_24038:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff66c88c0d:reg64_t
   )L:reg32_t)H:reg1_t
   ^  cast(t82_24038:reg64_t)L:reg32_t <$ 0x993773f3:reg32_t 
   
  Symbolic branch condition (0x0042da50)  cast(
   cast(cast(t82_24038:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff66c88c0d:reg64_t
   )L:reg32_t
   == 0:reg32_t
   
  Current Path String: 1111111011111111110111111110011101111111011101111111
  Trying false: Satisfiable.
  Trying true: Unsatisfiable.
  Current Path String: 11111110111111111101111111100111011111110111011111110
  Current path: 11111110111111111101111111100111011111110111011111110
  t98 =  cast(cast(
   cast(cast(t82_24038:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff6676a0d8:reg64_t
   )L:reg32_t)H:reg1_t
   ^  cast(t82_24038:reg64_t)L:reg32_t <$ 0x99895f28:reg32_t 
   
  Symbolic branch condition (0x0042da66)  cast(
   cast(cast(t82_24038:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff6676a0d8:reg64_t
   )L:reg32_t
   == 0:reg32_t
   
  Current Path String: 11111110111111111101111111100111011111110111011111110
  Trying true: Satisfiable.
  Trying false: Unsatisfiable.
  Current Path String: 111111101111111111011111111001110111111101110111111101
  Current path: 111111101111111111011111111001110111111101110111111101
  Symbolic address  t62_24018:reg64_t + 1:reg64_t  @ (0x42db54)
  Concrete base terms: 
  Concrete offset terms: 0x00000001
  Offset expression terms: 
  Ambiguous expression terms:  b_is_const_13334:reg1_t <> false  ? b_val_13333:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420018:reg64_t)
  Ambiguous symbol terms: 
  SRFM#region_for found in region_val_queried expr =  b_is_const_13334:reg1_t <> false  ? b_val_13333:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420018:reg64_t)
  SRFM#region_for found region number in region_vals, ret = 2 expr =  b_is_const_13334:reg1_t <> false  ? b_val_13333:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420018:reg64_t)
  t99 =  cast(cast( -cast(t61_24017:reg32_t)U:reg64_t + 2:reg64_t )L:reg32_t)H:reg1_t
   ^  2:reg32_t <$ t61_24017:reg32_t 
   
  t100 =  cast(cast( -cast(t61_24017:reg32_t)U:reg64_t + 2:reg64_t )L:reg32_t)H:reg1_t
   ^ t99_24055:reg1_t
    ? 0x99895f28:reg64_t : 0xc790fe97:reg64_t
  t101 =  cast(cast(
   cast(cast(t100_24056:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff83a9a43f:reg64_t
   )L:reg32_t)H:reg1_t
   ^  cast(t100_24056:reg64_t)L:reg32_t <$ 0x7c565bc1:reg32_t 
   
  t102 =   cast(
   cast(cast(t100_24056:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff83a9a43f:reg64_t
   )L:reg32_t
   == 0:reg32_t
    | 
   (cast(cast(
   cast(cast(t100_24056:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff83a9a43f:reg64_t
   )L:reg32_t)H:reg1_t
   ^ t101_24057:reg1_t)
    
  Symbolic branch condition (0x0042d9b6) t102_24058:reg1_t
  Current Path String: 111111101111111111011111111001110111111101110111111101
  Trying false: Unsatisfiable.
  Trying true: Satisfiable.
  Current Path String: 1111111011111111110111111110011101111111011101111111011
  Current path: 1111111011111111110111111110011101111111011101111111011
  t103 =  cast(cast(
   cast(cast(t100_24056:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff85ab9f8f:reg64_t
   )L:reg32_t)H:reg1_t
   ^  cast(t100_24056:reg64_t)L:reg32_t <$ 0x7a546071:reg32_t 
   
  t104 =   cast(
   cast(cast(t100_24056:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff85ab9f8f:reg64_t
   )L:reg32_t
   == 0:reg32_t
    | 
   (cast(cast(
   cast(cast(t100_24056:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff85ab9f8f:reg64_t
   )L:reg32_t)H:reg1_t
   ^ t103_24059:reg1_t)
    
  Symbolic branch condition (0x0042d9cc) t104_24060:reg1_t
  Current Path String: 1111111011111111110111111110011101111111011101111111011
  Trying false: Unsatisfiable.
  Trying true: Satisfiable.
  Current Path String: 11111110111111111101111111100111011111110111011111110111
  Current path: 11111110111111111101111111100111011111110111011111110111
  t105 =  cast(cast(
   cast(cast(t100_24056:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffffc3e8eeb8:reg64_t
   )L:reg32_t)H:reg1_t
   ^  cast(t100_24056:reg64_t)L:reg32_t <$ 0x3c171148:reg32_t 
   
  t106 =   cast(
   cast(cast(t100_24056:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffffc3e8eeb8:reg64_t
   )L:reg32_t
   == 0:reg32_t
    | 
   (cast(cast(
   cast(cast(t100_24056:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffffc3e8eeb8:reg64_t
   )L:reg32_t)H:reg1_t
   ^ t105_24061:reg1_t)
    
  Symbolic branch condition (0x0042d9e2) t106_24062:reg1_t
  Current Path String: 11111110111111111101111111100111011111110111011111110111
  Trying true: Satisfiable.
  Trying false: Unsatisfiable.
  Current Path String: 111111101111111111011111111001110111111101110111111101111
  Current path: 111111101111111111011111111001110111111101110111111101111
  t107 =  cast(cast(
   cast(cast(t100_24056:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffffcc015d57:reg64_t
   )L:reg32_t)H:reg1_t
   ^  cast(t100_24056:reg64_t)L:reg32_t <$ 0x33fea2a9:reg32_t 
   
  t108 =   cast(
   cast(cast(t100_24056:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffffcc015d57:reg64_t
   )L:reg32_t
   == 0:reg32_t
    | 
   (cast(cast(
   cast(cast(t100_24056:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffffcc015d57:reg64_t
   )L:reg32_t)H:reg1_t
   ^ t107_24063:reg1_t)
    
  Symbolic branch condition (0x0042d9f8) t108_24064:reg1_t
  Current Path String: 111111101111111111011111111001110111111101110111111101111
  Trying true: Satisfiable.
  Trying false: Unsatisfiable.
  Current Path String: 1111111011111111110111111110011101111111011101111111011111
  Current path: 1111111011111111110111111110011101111111011101111111011111
  t109 =  cast(cast(
   cast(cast(t100_24056:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff175b4f23:reg64_t
   )L:reg32_t)H:reg1_t
   ^  cast(t100_24056:reg64_t)L:reg32_t <$ 0xe8a4b0dd:reg32_t 
   
  t110 =   cast(
   cast(cast(t100_24056:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff175b4f23:reg64_t
   )L:reg32_t
   == 0:reg32_t
    | 
   (cast(cast(
   cast(cast(t100_24056:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff175b4f23:reg64_t
   )L:reg32_t)H:reg1_t
   ^ t109_24065:reg1_t)
    
  Symbolic branch condition (0x0042da0e) t110_24066:reg1_t
  Current Path String: 1111111011111111110111111110011101111111011101111111011111
  Trying false: Unsatisfiable.
  Trying true: Satisfiable.
  Current Path String: 11111110111111111101111111100111011111110111011111110111111
  Current path: 11111110111111111101111111100111011111110111011111110111111
  t111 =  cast(cast(
   cast(cast(t100_24056:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff200063f5:reg64_t
   )L:reg32_t)H:reg1_t
   ^  cast(t100_24056:reg64_t)L:reg32_t <$ 0xdfff9c0b:reg32_t 
   
  t112 =   cast(
   cast(cast(t100_24056:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff200063f5:reg64_t
   )L:reg32_t
   == 0:reg32_t
    | 
   (cast(cast(
   cast(cast(t100_24056:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff200063f5:reg64_t
   )L:reg32_t)H:reg1_t
   ^ t111_24067:reg1_t)
    
  Symbolic branch condition (0x0042da24) t112_24068:reg1_t
  Current Path String: 11111110111111111101111111100111011111110111011111110111111
  Trying true: Satisfiable.
  Trying false: Unsatisfiable.
  Current Path String: 111111101111111111011111111001110111111101110111111101111111
  Current path: 111111101111111111011111111001110111111101110111111101111111
  t113 =  cast(cast(
   cast(cast(t100_24056:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff2b866e48:reg64_t
   )L:reg32_t)H:reg1_t
   ^  cast(t100_24056:reg64_t)L:reg32_t <$ 0xd47991b8:reg32_t 
   
  t114 =   cast(
   cast(cast(t100_24056:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff2b866e48:reg64_t
   )L:reg32_t
   == 0:reg32_t
    | 
   (cast(cast(
   cast(cast(t100_24056:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff2b866e48:reg64_t
   )L:reg32_t)H:reg1_t
   ^ t113_24069:reg1_t)
    
  Symbolic branch condition (0x0042da3a) t114_24070:reg1_t
  Current Path String: 111111101111111111011111111001110111111101110111111101111111
  Trying true: Satisfiable.
  Trying false: Unsatisfiable.
  Current Path String: 1111111011111111110111111110011101111111011101111111011111111
  Current path: 1111111011111111110111111110011101111111011101111111011111111
  t115 =  cast(cast(
   cast(cast(t100_24056:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff66c88c0d:reg64_t
   )L:reg32_t)H:reg1_t
   ^  cast(t100_24056:reg64_t)L:reg32_t <$ 0x993773f3:reg32_t 
   
  Symbolic branch condition (0x0042da50)  cast(
   cast(cast(t100_24056:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff66c88c0d:reg64_t
   )L:reg32_t
   == 0:reg32_t
   
  Current Path String: 1111111011111111110111111110011101111111011101111111011111111
  Trying true: Unsatisfiable.
  Trying false: Satisfiable.
  Current Path String: 11111110111111111101111111100111011111110111011111110111111110
  Current path: 11111110111111111101111111100111011111110111011111110111111110
  t116 =  cast(cast(
   cast(cast(t100_24056:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff6676a0d8:reg64_t
   )L:reg32_t)H:reg1_t
   ^  cast(t100_24056:reg64_t)L:reg32_t <$ 0x99895f28:reg32_t 
   
  Symbolic branch condition (0x0042da66)  cast(
   cast(cast(t100_24056:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff6676a0d8:reg64_t
   )L:reg32_t
   == 0:reg32_t
   
  Current Path String: 11111110111111111101111111100111011111110111011111110111111110
  Trying false: Satisfiable.
  Trying true: Unsatisfiable.
  Current Path String: 111111101111111111011111111001110111111101110111111101111111100
  Current path: 111111101111111111011111111001110111111101110111111101111111100
  t117 =  cast(cast(
   cast(cast(t100_24056:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff386f0169:reg64_t
   )L:reg32_t)H:reg1_t
   ^  cast(t100_24056:reg64_t)L:reg32_t <$ 0xc790fe97:reg32_t 
   
  Symbolic branch condition (0x0042da7c)  cast(
   cast(cast(t100_24056:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff386f0169:reg64_t
   )L:reg32_t
   == 0:reg32_t
   
  Current Path String: 111111101111111111011111111001110111111101110111111101111111100
  Trying true: Satisfiable.
  Trying false: Unsatisfiable.
  Current Path String: 1111111011111111110111111110011101111111011101111111011111111001
  Current path: 1111111011111111110111111110011101111111011101111111011111111001
  Starting return-typeconv adaptor
  SRFM#compare_sym_se called len(f1_h_l) = 1 len(f2_h_l)=0
  f1_hash_list_len = 1 f2_hash_list_len = 2
  GSM#reset called
  GHM#clear called
  GSM#reset called
  GHM#clear called
  FM#compare_conc_se called
  all side-effects were equal
  GSSM#reset4_3 4 -> 3 
  GSM#reset called
  GHM#clear called
  FM#reset_f2_special_handlers_snap
  linux_syscalls#reset_f2_snap called
  t118 =  ret_type_13339:reg8_t == 0:reg8_t  ? 0xd45d365d:reg64_t :
   ( ret_type_13339:reg8_t == 1:reg8_t  ? ret_val_13340:reg64_t :
   ( ret_type_13339:reg8_t == 0xb:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
   cast(cast(f_val_13317:reg64_t)L:reg32_t)S:reg64_t :
   ( f_val_13317:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420018:reg64_t))
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
   cast(cast(e_val_13321:reg64_t)L:reg32_t)S:reg64_t :
   ( e_val_13321:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420018:reg64_t))
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
   cast(cast(d_val_13325:reg64_t)L:reg32_t)S:reg64_t :
   ( d_val_13325:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x42420018:reg64_t))
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
   cast(cast(c_val_13329:reg64_t)L:reg32_t)S:reg64_t :
   ( c_val_13329:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x42420018:reg64_t))
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
   cast(cast(b_val_13333:reg64_t)L:reg32_t)S:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x42420018:reg64_t))
   :
   ( a_is_const_13338:reg1_t <> false  ?
   cast(cast(a_val_13337:reg64_t)L:reg32_t)S:reg64_t :
   ( a_val_13337:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x42420018:reg64_t)))))))
   :
   ( ret_type_13339:reg8_t == 0xc:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
   cast(cast(f_val_13317:reg64_t)L:reg32_t)U:reg64_t :
   ( f_val_13317:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420018:reg64_t))
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
   cast(cast(e_val_13321:reg64_t)L:reg32_t)U:reg64_t :
   ( e_val_13321:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x42420018:reg64_t))
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
   cast(cast(d_val_13325:reg64_t)L:reg32_t)U:reg64_t :
   ( d_val_13325:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x42420018:reg64_t))
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
   cast(cast(c_val_13329:reg64_t)L:reg32_t)U:reg64_t :
   ( c_val_13329:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x42420018:reg64_t))
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
   cast(cast(b_val_13333:reg64_t)L:reg32_t)U:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x42420018:reg64_t))
   :
   ( a_is_const_13338:reg1_t <> false  ?
   cast(cast(a_val_13337:reg64_t)L:reg32_t)U:reg64_t :
   ( a_val_13337:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x42420018:reg64_t)))))))
   :
   ( ret_type_13339:reg8_t == 0x15:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
   cast(cast(f_val_13317:reg64_t)L:reg16_t)S:reg64_t :
   ( f_val_13317:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x18:reg64_t))
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
   cast(cast(e_val_13321:reg64_t)L:reg16_t)S:reg64_t :
   ( e_val_13321:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x18:reg64_t))
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
   cast(cast(d_val_13325:reg64_t)L:reg16_t)S:reg64_t :
   ( d_val_13325:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x18:reg64_t))
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
   cast(cast(c_val_13329:reg64_t)L:reg16_t)S:reg64_t :
   ( c_val_13329:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x18:reg64_t))
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
   cast(cast(b_val_13333:reg64_t)L:reg16_t)S:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x18:reg64_t))
   :
   ( a_is_const_13338:reg1_t <> false  ?
   cast(cast(a_val_13337:reg64_t)L:reg16_t)S:reg64_t :
   ( a_val_13337:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x18:reg64_t)))))))
   :
   ( ret_type_13339:reg8_t == 0x16:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
   cast(cast(f_val_13317:reg64_t)L:reg16_t)U:reg64_t :
   ( f_val_13317:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x18:reg64_t))
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
   cast(cast(e_val_13321:reg64_t)L:reg16_t)U:reg64_t :
   ( e_val_13321:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x18:reg64_t))
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
   cast(cast(d_val_13325:reg64_t)L:reg16_t)U:reg64_t :
   ( d_val_13325:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x18:reg64_t))
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
   cast(cast(c_val_13329:reg64_t)L:reg16_t)U:reg64_t :
   ( c_val_13329:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x18:reg64_t))
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
   cast(cast(b_val_13333:reg64_t)L:reg16_t)U:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x18:reg64_t))
   :
   ( a_is_const_13338:reg1_t <> false  ?
   cast(cast(a_val_13337:reg64_t)L:reg16_t)U:reg64_t :
   ( a_val_13337:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x18:reg64_t)))))))
   :
   ( ret_type_13339:reg8_t == 0x1f:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
   cast(cast(f_val_13317:reg64_t)L:reg8_t)S:reg64_t :
   ( f_val_13317:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x18:reg64_t))
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
   cast(cast(e_val_13321:reg64_t)L:reg8_t)S:reg64_t :
   ( e_val_13321:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x18:reg64_t))
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
   cast(cast(d_val_13325:reg64_t)L:reg8_t)S:reg64_t :
   ( d_val_13325:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x18:reg64_t))
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
   cast(cast(c_val_13329:reg64_t)L:reg8_t)S:reg64_t :
   ( c_val_13329:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x18:reg64_t))
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
   cast(cast(b_val_13333:reg64_t)L:reg8_t)S:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x18:reg64_t))
   :
   ( a_is_const_13338:reg1_t <> false  ?
   cast(cast(a_val_13337:reg64_t)L:reg8_t)S:reg64_t :
   ( a_val_13337:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x18:reg64_t)))))))
   :
   ( ret_type_13339:reg8_t == 0x20:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
   cast(cast(f_val_13317:reg64_t)L:reg8_t)U:reg64_t :
   ( f_val_13317:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x18:reg64_t))
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
   cast(cast(e_val_13321:reg64_t)L:reg8_t)U:reg64_t :
   ( e_val_13321:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x18:reg64_t))
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
   cast(cast(d_val_13325:reg64_t)L:reg8_t)U:reg64_t :
   ( d_val_13325:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x18:reg64_t))
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
   cast(cast(c_val_13329:reg64_t)L:reg8_t)U:reg64_t :
   ( c_val_13329:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x18:reg64_t))
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
   cast(cast(b_val_13333:reg64_t)L:reg8_t)U:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x18:reg64_t))
   :
   ( a_is_const_13338:reg1_t <> false  ?
   cast(cast(a_val_13337:reg64_t)L:reg8_t)U:reg64_t :
   ( a_val_13337:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x18:reg64_t)))))))
   :
   ( ret_type_13339:reg8_t == 0x29:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
   cast(cast(f_val_13317:reg64_t)L:reg1_t)S:reg64_t :
   ( f_val_13317:reg64_t == 1:reg64_t  ?
   0xffffffffffffffff:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
   cast(cast(e_val_13321:reg64_t)L:reg1_t)S:reg64_t :
   ( e_val_13321:reg64_t == 1:reg64_t  ?
   0xffffffffffffffff:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
   cast(cast(d_val_13325:reg64_t)L:reg1_t)S:reg64_t :
   ( d_val_13325:reg64_t == 1:reg64_t  ?
   0xffffffffffffffff:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
   cast(cast(c_val_13329:reg64_t)L:reg1_t)S:reg64_t :
   ( c_val_13329:reg64_t == 1:reg64_t  ?
   0xffffffffffffffff:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
   cast(cast(b_val_13333:reg64_t)L:reg1_t)S:reg64_t
   :
   ( b_val_13333:reg64_t == 1:reg64_t  ?
   0xffffffffffffffff:reg64_t : 0:reg64_t))
   :
   ( a_is_const_13338:reg1_t <> false  ?
   cast(cast(a_val_13337:reg64_t)L:reg1_t)S:reg64_t
   :
   ( a_val_13337:reg64_t == 1:reg64_t  ?
   0xffffffffffffffff:reg64_t : 0:reg64_t)))))))
   :
   ( ret_type_13339:reg8_t == 0x2a:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
   cast(cast(f_val_13317:reg64_t)L:reg1_t)U:reg64_t :
   ( f_val_13317:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
   cast(cast(e_val_13321:reg64_t)L:reg1_t)U:reg64_t :
   ( e_val_13321:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
   cast(cast(d_val_13325:reg64_t)L:reg1_t)U:reg64_t :
   ( d_val_13325:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
   cast(cast(c_val_13329:reg64_t)L:reg1_t)U:reg64_t
   :
   ( c_val_13329:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
   cast(cast(b_val_13333:reg64_t)L:reg1_t)U:
   reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t
   : 0:reg64_t))
   :
   ( a_is_const_13338:reg1_t <> false  ?
   cast(cast(a_val_13337:reg64_t)L:reg1_t)U:
   reg64_t :
   ( a_val_13337:reg64_t == 1:reg64_t  ? 1:reg64_t
   : 0:reg64_t)))))))
   :
   ( ret_type_13339:reg8_t == 0x33:reg8_t  ?
   0xffffffffd45d365d:reg64_t :
   ( ret_type_13339:reg8_t == 0x34:reg8_t  ?
   0xd45d365d:reg64_t :
   ( ret_type_13339:reg8_t == 0x35:reg8_t  ? 1:reg64_t :
   ( ret_type_13339:reg8_t == 0x3d:reg8_t  ?
   0x365d:reg64_t :
   ( ret_type_13339:reg8_t == 0x3e:reg8_t  ?
   0x365d:reg64_t :
   ( ret_type_13339:reg8_t == 0x47:reg8_t  ?
   0x5d:reg64_t :
   ( ret_type_13339:reg8_t == 0x48:reg8_t  ?
   0x5d:reg64_t :
   ( ret_type_13339:reg8_t == 0x51:reg8_t  ?
   0xffffffffffffffff:reg64_t : 1:reg64_t)))))))))))))))))
  t119 =  ret_type_13339:reg8_t == 0:reg8_t  ? 0xd45d3600:reg64_t :
   ( ret_type_13339:reg8_t == 1:reg8_t  ?
    ret_val_13340:reg64_t & 0xffffffffffffff00:reg64_t  :
   ( ret_type_13339:reg8_t == 0xb:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
    cast(cast(f_val_13317:reg64_t)L:reg32_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( f_val_13317:reg64_t == 1:reg64_t  ? 0:reg64_t : 0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
    cast(cast(e_val_13321:reg64_t)L:reg32_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( e_val_13321:reg64_t == 1:reg64_t  ? 0:reg64_t : 0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
    cast(cast(d_val_13325:reg64_t)L:reg32_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( d_val_13325:reg64_t == 1:reg64_t  ? 0:reg64_t :
   0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
    cast(cast(c_val_13329:reg64_t)L:reg32_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( c_val_13329:reg64_t == 1:reg64_t  ? 0:reg64_t :
   0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
    cast(cast(b_val_13333:reg64_t)L:reg32_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 0:reg64_t :
   0x42420000:reg64_t))
   :
   ( a_is_const_13338:reg1_t <> false  ?
    cast(cast(a_val_13337:reg64_t)L:reg32_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( a_val_13337:reg64_t == 1:reg64_t  ? 0:reg64_t :
   0x42420000:reg64_t)))))))
   :
   ( ret_type_13339:reg8_t == 0xc:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
    cast(cast(f_val_13317:reg64_t)L:reg32_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( f_val_13317:reg64_t == 1:reg64_t  ? 0:reg64_t : 0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
    cast(cast(e_val_13321:reg64_t)L:reg32_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( e_val_13321:reg64_t == 1:reg64_t  ? 0:reg64_t :
   0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
    cast(cast(d_val_13325:reg64_t)L:reg32_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( d_val_13325:reg64_t == 1:reg64_t  ? 0:reg64_t :
   0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
    cast(cast(c_val_13329:reg64_t)L:reg32_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( c_val_13329:reg64_t == 1:reg64_t  ? 0:reg64_t :
   0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
    cast(cast(b_val_13333:reg64_t)L:reg32_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 0:reg64_t :
   0x42420000:reg64_t))
   :
   ( a_is_const_13338:reg1_t <> false  ?
    cast(cast(a_val_13337:reg64_t)L:reg32_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( a_val_13337:reg64_t == 1:reg64_t  ? 0:reg64_t :
   0x42420000:reg64_t)))))))
   :
   ( ret_type_13339:reg8_t == 0x15:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
    cast(cast(f_val_13317:reg64_t)L:reg16_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
    cast(cast(e_val_13321:reg64_t)L:reg16_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
    cast(cast(d_val_13325:reg64_t)L:reg16_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
    cast(cast(c_val_13329:reg64_t)L:reg16_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
    cast(cast(b_val_13333:reg64_t)L:reg16_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( a_is_const_13338:reg1_t <> false  ?
    cast(cast(a_val_13337:reg64_t)L:reg16_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t))))))
   :
   ( ret_type_13339:reg8_t == 0x16:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
    cast(cast(f_val_13317:reg64_t)L:reg16_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
    cast(cast(e_val_13321:reg64_t)L:reg16_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
    cast(cast(d_val_13325:reg64_t)L:reg16_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
    cast(cast(c_val_13329:reg64_t)L:reg16_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
    cast(cast(b_val_13333:reg64_t)L:reg16_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( a_is_const_13338:reg1_t <> false  ?
    cast(cast(a_val_13337:reg64_t)L:reg16_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t))))))
   :
   ( ret_type_13339:reg8_t == 0x1f:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
    cast(cast(f_val_13317:reg64_t)L:reg8_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
    cast(cast(e_val_13321:reg64_t)L:reg8_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
    cast(cast(d_val_13325:reg64_t)L:reg8_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
    cast(cast(c_val_13329:reg64_t)L:reg8_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
    cast(cast(b_val_13333:reg64_t)L:reg8_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( a_is_const_13338:reg1_t <> false  ?
    cast(cast(a_val_13337:reg64_t)L:reg8_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t))))))
   :
   ( ret_type_13339:reg8_t == 0x20:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
    cast(cast(f_val_13317:reg64_t)L:reg8_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
    cast(cast(e_val_13321:reg64_t)L:reg8_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
    cast(cast(d_val_13325:reg64_t)L:reg8_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
    cast(cast(c_val_13329:reg64_t)L:reg8_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
    cast(cast(b_val_13333:reg64_t)L:reg8_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( a_is_const_13338:reg1_t <> false  ?
    cast(cast(a_val_13337:reg64_t)L:reg8_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t))))))
   :
   ( ret_type_13339:reg8_t == 0x29:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
    cast(cast(f_val_13317:reg64_t)L:reg1_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( f_val_13317:reg64_t == 1:reg64_t  ?
   0xffffffffffffff00:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
    cast(cast(e_val_13321:reg64_t)L:reg1_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( e_val_13321:reg64_t == 1:reg64_t  ?
   0xffffffffffffff00:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
    cast(cast(d_val_13325:reg64_t)L:reg1_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( d_val_13325:reg64_t == 1:reg64_t  ?
   0xffffffffffffff00:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
    cast(cast(c_val_13329:reg64_t)L:reg1_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( c_val_13329:reg64_t == 1:reg64_t  ?
   0xffffffffffffff00:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
    cast(cast(b_val_13333:reg64_t)L:reg1_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( b_val_13333:reg64_t == 1:reg64_t  ?
   0xffffffffffffff00:reg64_t : 0:reg64_t))
   :
   ( a_is_const_13338:reg1_t <> false  ?
    cast(cast(a_val_13337:reg64_t)L:reg1_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( a_val_13337:reg64_t == 1:reg64_t  ?
   0xffffffffffffff00:reg64_t : 0:reg64_t)))))))
   :
   ( ret_type_13339:reg8_t == 0x2a:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
    cast(cast(f_val_13317:reg64_t)L:reg1_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
    cast(cast(e_val_13321:reg64_t)L:reg1_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
    cast(cast(d_val_13325:reg64_t)L:reg1_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
    cast(cast(c_val_13329:reg64_t)L:reg1_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
    cast(cast(b_val_13333:reg64_t)L:reg1_t)U:
   reg64_t & 0xffffffffffffff00:reg64_t  :
   0:reg64_t)
   :
   ( a_is_const_13338:reg1_t <> false  ?
    cast(cast(a_val_13337:reg64_t)L:reg1_t)U:
   reg64_t & 0xffffffffffffff00:reg64_t  :
   0:reg64_t))))))
   :
   ( ret_type_13339:reg8_t == 0x33:reg8_t  ?
   0xffffffffd45d3600:reg64_t :
   ( ret_type_13339:reg8_t == 0x34:reg8_t  ?
   0xd45d3600:reg64_t :
   ( ret_type_13339:reg8_t == 0x35:reg8_t  ? 0:reg64_t :
   ( ret_type_13339:reg8_t == 0x3d:reg8_t  ?
   0x3600:reg64_t :
   ( ret_type_13339:reg8_t == 0x3e:reg8_t  ?
   0x3600:reg64_t :
   ( ret_type_13339:reg8_t == 0x47:reg8_t  ?
   0:reg64_t :
   ( ret_type_13339:reg8_t == 0x48:reg8_t  ?
   0:reg64_t :
   ( ret_type_13339:reg8_t == 0x51:reg8_t  ?
   0xffffffffffffff00:reg64_t : 0:reg64_t)))))))))))))))))
  Symbolic branch condition (0x004423c2)  cast(cast(t119_24075:reg64_t)L:reg8_t)U:reg64_t == 0:reg64_t 
  Current Path String: 1111111011111111110111111110011101111111011101111111011111111001
  Trying false: Unsatisfiable.
  Trying true: Satisfiable.
  Current Path String: 11111110111111111101111111100111011111110111011111110111111110011
  Current path: 11111110111111111101111111100111011111110111011111110111111110011
  write(1, 0x50001000, 21)
  Completed adapted_f1
   = 21 (0x00000015)
  Symbolic branch condition (0x0042df12)  t118_24074:reg64_t == 0xe96ccf45:reg64_t 
  Current Path String: 11111110111111111101111111100111011111110111011111110111111110011
  Trying true: Unsatisfiable.
  Trying false: Satisfiable.
  Current Path String: 111111101111111111011111111001110111111101110111111101111111100110
  Current path: 111111101111111111011111111001110111111101110111111101111111100110
  t120 =  cast( cast( t118_24074:reg64_t == 0xe96ccf45:reg64_t )U:reg8_t & 1:reg8_t )U:
   reg64_t == 0:reg64_t 
  t121 =  cast( cast( t118_24074:reg64_t == 0xe96ccf45:reg64_t )U:reg8_t & 1:reg8_t )U:
   reg64_t
   | 
   (
   (cast( t118_24074:reg64_t == 0xe96ccf45:reg64_t )U:reg64_t
   | 0xa686374616d7300:reg64_t)
    & 0xffffffffffffff00:reg64_t)
    
  Symbolic branch condition (0x0042e570)  cast(t121_24091:reg64_t)L:reg8_t == 0:reg8_t 
  Current Path String: 111111101111111111011111111001110111111101110111111101111111100110
  Trying false: Unsatisfiable.
  Trying true: Satisfiable.
  Current Path String: 1111111011111111110111111110011101111111011101111111011111111001101
  Current path: 1111111011111111110111111110011101111111011101111111011111111001101
  write(1, 0x50001000, 9)
  Mismatch
   = 9 (0x00000009)
  exit_group(1) (no return)
  Stopping when program called exit() at 0x004717a7
  Coverage increased to 4306 on 1
  Path: 1111111011111111110111111110011101111111011101111111011111111001101
  Final path: 1111111011111111110111111110011101111111011101111111011111111001101
  Satisfiable.
  SRFM#reset called
  FM#reset calling mem#reset()
  GSSM#reset called
  GSM#clear clearing diff
  GHM#clear called
  GSM#clear clearing main
  GHM#clear called
  linux_syscalls#reset called
  SRFM#reset clearing regions
  GSM#clear clearing diff
  GHM#clear called
  GSM#clear clearing main
  GHM#clear called
  GSM#clear clearing diff
  GHM#clear called
  GSM#clear clearing main
  GHM#clear called
  SRFM#reset cleared regions
  CPU time 0.244000 sec, 0.244000 total
  Wall time 1.440685 sec, 1.440688 total
  Iteration 2:
  fstat(3, 0xbfffc8b0) = 0 (0x00000000)
  mmap(0x00000000, 4096, 0x3, 0x22, -1, 0) = 1342177280 (0x50000000)
  read(3, 0x50000000, 4096) = 62 (0x0000003e)
  fstat(1, 0xbfffc570) = 0 (0x00000000)
  mmap(0x00000000, 4096, 0x3, 0x22, -1, 0) = 1342181376 (0x50001000)
  write(1, 0x50001000, 12)
  read a test
   = 12 (0x0000000c)
  write(1, 0x50001000, 12)
  Starting f1
   = 12 (0x0000000c)
  SRFM#make_sym_snap called
  GSM#make_snap called
  GSM#make_snap called
  FM#make_f1_conc_snap called
  GSSM#make_snap 3 -> 4
  GSM#make_snap called
  FM#make_f1_special_handlers_snap
  linux_syscalls#make_f1_snap called
  linux_syscalls#make_snap called
  SRFM#save_sym_se saving f1_hash_list.length = 2
  FM#save_f1_conc_se called
  AS#ready to apply (0.000000 sec). eof1
  GSSM#reset4_3 4 -> 3 
  GSM#reset called
  GHM#clear called
  FM#reset_f1_special_handlers_snap
  linux_syscalls#reset_f1_snap called
  write(1, 0x50001000, 13)
  Completed f1
   = 13 (0x0000000d)
  write(1, 0x50001000, 20)
  Starting adapted_f1
   = 20 (0x00000014)
  SRFM#make_f2_sym_snap called
  GSM#reset called
  GHM#clear called
  GSM#reset called
  GHM#clear called
  FM#make_f2_conc_snap called
  GSSM#make_snap 3 -> 4
  GSM#make_snap called
  FM#make_f2_special_handlers_snap
  linux_syscalls#make_f2_snap called
  linux_syscalls#make_snap called
  Starting simple adaptor
  setting arg= f_is_const_13318:reg1_t <> false  ? f_val_13317:reg64_t :
   ( f_val_13317:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420000:reg64_t)
  setting arg= e_is_const_13322:reg1_t <> false  ? e_val_13321:reg64_t :
   ( e_val_13321:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420000:reg64_t)
  setting arg= d_is_const_13326:reg1_t <> false  ? d_val_13325:reg64_t :
   ( d_val_13325:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420000:reg64_t)
  setting arg= c_is_const_13330:reg1_t <> false  ? c_val_13329:reg64_t :
   ( c_val_13329:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420000:reg64_t)
  setting arg= b_is_const_13334:reg1_t <> false  ? b_val_13333:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420000:reg64_t)
  setting arg= a_is_const_13338:reg1_t <> false  ? a_val_13337:reg64_t :
   ( a_val_13337:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420000:reg64_t)
  AS#ready to apply (0.000000 sec). sof2
  SRFM#Generating structure adaptor formulas...exec_runloop#thunk() should save arg regs here
  Symbolic branch condition (0x0042d9b6) t5_22398:reg1_t
  Current Path String: 
  Known true
  Current Path String: 1
  Current path: 1
  Symbolic branch condition (0x0042d9cc) t7_22400:reg1_t
  Current Path String: 1
  Known true
  Current Path String: 11
  Current path: 11
  Symbolic branch condition (0x0042d9e2) t9_22402:reg1_t
  Current Path String: 11
  Known true
  Current Path String: 111
  Current path: 111
  Symbolic branch condition (0x0042d9f8) t11_22404:reg1_t
  Current Path String: 111
  Known true
  Current Path String: 1111
  Current path: 1111
  Symbolic branch condition (0x0042da0e) t13_22406:reg1_t
  Current Path String: 1111
  Known true
  Current Path String: 11111
  Current path: 11111
  Symbolic branch condition (0x0042da24) t15_22408:reg1_t
  Current Path String: 11111
  Known true
  Current Path String: 111111
  Current path: 111111
  Symbolic branch condition (0x0042da3a) t17_22410:reg1_t
  Current Path String: 111111
  Known true
  Current Path String: 1111111
  Current path: 1111111
  Symbolic branch condition (0x0042da50)  cast(
   cast(cast(t3_22388:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff66c88c0d:reg64_t
   )L:reg32_t
   == 0:reg32_t
   
  Current Path String: 1111111
  Known false
  Current Path String: 11111110
  Current path: 11111110
  Symbolic branch condition (0x0042da66)  cast(
   cast(cast(t3_22388:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff6676a0d8:reg64_t
   )L:reg32_t
   == 0:reg32_t
   
  Current Path String: 11111110
  Known false
  Current Path String: 111111100
  Current path: 111111100
  t122 =  cast(cast(
   cast(cast(t3_22388:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff386f0169:reg64_t
   )L:reg32_t)H:reg1_t
   ^  cast(t3_22388:reg64_t)L:reg32_t <$ 0xc790fe97:reg32_t 
   
  Symbolic branch condition (0x0042da7c)  cast(
   cast(cast(t3_22388:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff386f0169:reg64_t
   )L:reg32_t
   == 0:reg32_t
   
  Current Path String: 111111100
  Trying true: Satisfiable.
  Trying false: Unsatisfiable.
  Current Path String: 1111111001
  Current path: 1111111001
  Starting return-typeconv adaptor
  SRFM#compare_sym_se called len(f1_h_l) = 2 len(f2_h_l)=0
  f1_hash_list_len = 2 f2_hash_list_len = 2
  GSM#reset called
  GHM#clear called
  GSM#reset called
  GHM#clear called
  FM#compare_conc_se called
  all side-effects were equal
  GSSM#reset4_3 4 -> 3 
  GSM#reset called
  GHM#clear called
  FM#reset_f2_special_handlers_snap
  linux_syscalls#reset_f2_snap called
  t123 =  ret_type_13339:reg8_t == 0:reg8_t  ? 0:reg64_t :
   ( ret_type_13339:reg8_t == 1:reg8_t  ? ret_val_13340:reg64_t :
   ( ret_type_13339:reg8_t == 0xb:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
   cast(cast(f_val_13317:reg64_t)L:reg32_t)S:reg64_t :
   ( f_val_13317:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
   cast(cast(e_val_13321:reg64_t)L:reg32_t)S:reg64_t :
   ( e_val_13321:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
   cast(cast(d_val_13325:reg64_t)L:reg32_t)S:reg64_t :
   ( d_val_13325:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
   cast(cast(c_val_13329:reg64_t)L:reg32_t)S:reg64_t :
   ( c_val_13329:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
   cast(cast(b_val_13333:reg64_t)L:reg32_t)S:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x42420000:reg64_t))
   :
   ( a_is_const_13338:reg1_t <> false  ?
   cast(cast(a_val_13337:reg64_t)L:reg32_t)S:reg64_t :
   ( a_val_13337:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x42420000:reg64_t)))))))
   :
   ( ret_type_13339:reg8_t == 0xc:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
   cast(cast(f_val_13317:reg64_t)L:reg32_t)U:reg64_t :
   ( f_val_13317:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
   cast(cast(e_val_13321:reg64_t)L:reg32_t)U:reg64_t :
   ( e_val_13321:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
   cast(cast(d_val_13325:reg64_t)L:reg32_t)U:reg64_t :
   ( d_val_13325:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
   cast(cast(c_val_13329:reg64_t)L:reg32_t)U:reg64_t :
   ( c_val_13329:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
   cast(cast(b_val_13333:reg64_t)L:reg32_t)U:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x42420000:reg64_t))
   :
   ( a_is_const_13338:reg1_t <> false  ?
   cast(cast(a_val_13337:reg64_t)L:reg32_t)U:reg64_t :
   ( a_val_13337:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x42420000:reg64_t)))))))
   :
   ( ret_type_13339:reg8_t == 0x15:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
   cast(cast(f_val_13317:reg64_t)L:reg16_t)S:reg64_t :
   ( f_val_13317:reg64_t == 1:reg64_t  ? 1:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
   cast(cast(e_val_13321:reg64_t)L:reg16_t)S:reg64_t :
   ( e_val_13321:reg64_t == 1:reg64_t  ? 1:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
   cast(cast(d_val_13325:reg64_t)L:reg16_t)S:reg64_t :
   ( d_val_13325:reg64_t == 1:reg64_t  ? 1:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
   cast(cast(c_val_13329:reg64_t)L:reg16_t)S:reg64_t :
   ( c_val_13329:reg64_t == 1:reg64_t  ? 1:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
   cast(cast(b_val_13333:reg64_t)L:reg16_t)S:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t))
   :
   ( a_is_const_13338:reg1_t <> false  ?
   cast(cast(a_val_13337:reg64_t)L:reg16_t)S:reg64_t :
   ( a_val_13337:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t)))))))
   :
   ( ret_type_13339:reg8_t == 0x16:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
   cast(cast(f_val_13317:reg64_t)L:reg16_t)U:reg64_t :
   ( f_val_13317:reg64_t == 1:reg64_t  ? 1:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
   cast(cast(e_val_13321:reg64_t)L:reg16_t)U:reg64_t :
   ( e_val_13321:reg64_t == 1:reg64_t  ? 1:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
   cast(cast(d_val_13325:reg64_t)L:reg16_t)U:reg64_t :
   ( d_val_13325:reg64_t == 1:reg64_t  ? 1:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
   cast(cast(c_val_13329:reg64_t)L:reg16_t)U:reg64_t :
   ( c_val_13329:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
   cast(cast(b_val_13333:reg64_t)L:reg16_t)U:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t))
   :
   ( a_is_const_13338:reg1_t <> false  ?
   cast(cast(a_val_13337:reg64_t)L:reg16_t)U:reg64_t :
   ( a_val_13337:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t)))))))
   :
   ( ret_type_13339:reg8_t == 0x1f:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
   cast(cast(f_val_13317:reg64_t)L:reg8_t)S:reg64_t :
   ( f_val_13317:reg64_t == 1:reg64_t  ? 1:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
   cast(cast(e_val_13321:reg64_t)L:reg8_t)S:reg64_t :
   ( e_val_13321:reg64_t == 1:reg64_t  ? 1:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
   cast(cast(d_val_13325:reg64_t)L:reg8_t)S:reg64_t :
   ( d_val_13325:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
   cast(cast(c_val_13329:reg64_t)L:reg8_t)S:reg64_t :
   ( c_val_13329:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
   cast(cast(b_val_13333:reg64_t)L:reg8_t)S:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t))
   :
   ( a_is_const_13338:reg1_t <> false  ?
   cast(cast(a_val_13337:reg64_t)L:reg8_t)S:reg64_t :
   ( a_val_13337:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t)))))))
   :
   ( ret_type_13339:reg8_t == 0x20:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
   cast(cast(f_val_13317:reg64_t)L:reg8_t)U:reg64_t :
   ( f_val_13317:reg64_t == 1:reg64_t  ? 1:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
   cast(cast(e_val_13321:reg64_t)L:reg8_t)U:reg64_t :
   ( e_val_13321:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
   cast(cast(d_val_13325:reg64_t)L:reg8_t)U:reg64_t :
   ( d_val_13325:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
   cast(cast(c_val_13329:reg64_t)L:reg8_t)U:reg64_t :
   ( c_val_13329:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
   cast(cast(b_val_13333:reg64_t)L:reg8_t)U:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t))
   :
   ( a_is_const_13338:reg1_t <> false  ?
   cast(cast(a_val_13337:reg64_t)L:reg8_t)U:reg64_t :
   ( a_val_13337:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t)))))))
   :
   ( ret_type_13339:reg8_t == 0x29:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
   cast(cast(f_val_13317:reg64_t)L:reg1_t)S:reg64_t :
   ( f_val_13317:reg64_t == 1:reg64_t  ?
   0xffffffffffffffff:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
   cast(cast(e_val_13321:reg64_t)L:reg1_t)S:reg64_t :
   ( e_val_13321:reg64_t == 1:reg64_t  ?
   0xffffffffffffffff:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
   cast(cast(d_val_13325:reg64_t)L:reg1_t)S:reg64_t :
   ( d_val_13325:reg64_t == 1:reg64_t  ?
   0xffffffffffffffff:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
   cast(cast(c_val_13329:reg64_t)L:reg1_t)S:reg64_t :
   ( c_val_13329:reg64_t == 1:reg64_t  ?
   0xffffffffffffffff:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
   cast(cast(b_val_13333:reg64_t)L:reg1_t)S:reg64_t
   :
   ( b_val_13333:reg64_t == 1:reg64_t  ?
   0xffffffffffffffff:reg64_t : 0:reg64_t))
   :
   ( a_is_const_13338:reg1_t <> false  ?
   cast(cast(a_val_13337:reg64_t)L:reg1_t)S:reg64_t
   :
   ( a_val_13337:reg64_t == 1:reg64_t  ?
   0xffffffffffffffff:reg64_t : 0:reg64_t)))))))
   :
   ( ret_type_13339:reg8_t == 0x2a:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
   cast(cast(f_val_13317:reg64_t)L:reg1_t)U:reg64_t :
   ( f_val_13317:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
   cast(cast(e_val_13321:reg64_t)L:reg1_t)U:reg64_t :
   ( e_val_13321:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
   cast(cast(d_val_13325:reg64_t)L:reg1_t)U:reg64_t :
   ( d_val_13325:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
   cast(cast(c_val_13329:reg64_t)L:reg1_t)U:reg64_t
   :
   ( c_val_13329:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
   cast(cast(b_val_13333:reg64_t)L:reg1_t)U:
   reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t
   : 0:reg64_t))
   :
   ( a_is_const_13338:reg1_t <> false  ?
   cast(cast(a_val_13337:reg64_t)L:reg1_t)U:
   reg64_t :
   ( a_val_13337:reg64_t == 1:reg64_t  ? 1:reg64_t
   : 0:reg64_t)))))))
   : 0:reg64_t)))))))))
  t124 =  ret_type_13339:reg8_t == 0:reg8_t  ? 0:reg64_t :
   ( ret_type_13339:reg8_t == 1:reg8_t  ?
    ret_val_13340:reg64_t & 0xffffffffffffff00:reg64_t  :
   ( ret_type_13339:reg8_t == 0xb:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
    cast(cast(f_val_13317:reg64_t)L:reg32_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( f_val_13317:reg64_t == 1:reg64_t  ? 0:reg64_t : 0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
    cast(cast(e_val_13321:reg64_t)L:reg32_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( e_val_13321:reg64_t == 1:reg64_t  ? 0:reg64_t : 0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
    cast(cast(d_val_13325:reg64_t)L:reg32_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( d_val_13325:reg64_t == 1:reg64_t  ? 0:reg64_t :
   0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
    cast(cast(c_val_13329:reg64_t)L:reg32_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( c_val_13329:reg64_t == 1:reg64_t  ? 0:reg64_t :
   0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
    cast(cast(b_val_13333:reg64_t)L:reg32_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 0:reg64_t :
   0x42420000:reg64_t))
   :
   ( a_is_const_13338:reg1_t <> false  ?
    cast(cast(a_val_13337:reg64_t)L:reg32_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( a_val_13337:reg64_t == 1:reg64_t  ? 0:reg64_t :
   0x42420000:reg64_t)))))))
   :
   ( ret_type_13339:reg8_t == 0xc:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
    cast(cast(f_val_13317:reg64_t)L:reg32_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( f_val_13317:reg64_t == 1:reg64_t  ? 0:reg64_t : 0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
    cast(cast(e_val_13321:reg64_t)L:reg32_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( e_val_13321:reg64_t == 1:reg64_t  ? 0:reg64_t :
   0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
    cast(cast(d_val_13325:reg64_t)L:reg32_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( d_val_13325:reg64_t == 1:reg64_t  ? 0:reg64_t :
   0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
    cast(cast(c_val_13329:reg64_t)L:reg32_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( c_val_13329:reg64_t == 1:reg64_t  ? 0:reg64_t :
   0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
    cast(cast(b_val_13333:reg64_t)L:reg32_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 0:reg64_t :
   0x42420000:reg64_t))
   :
   ( a_is_const_13338:reg1_t <> false  ?
    cast(cast(a_val_13337:reg64_t)L:reg32_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( a_val_13337:reg64_t == 1:reg64_t  ? 0:reg64_t :
   0x42420000:reg64_t)))))))
   :
   ( ret_type_13339:reg8_t == 0x15:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
    cast(cast(f_val_13317:reg64_t)L:reg16_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
    cast(cast(e_val_13321:reg64_t)L:reg16_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
    cast(cast(d_val_13325:reg64_t)L:reg16_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
    cast(cast(c_val_13329:reg64_t)L:reg16_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
    cast(cast(b_val_13333:reg64_t)L:reg16_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( a_is_const_13338:reg1_t <> false  ?
    cast(cast(a_val_13337:reg64_t)L:reg16_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t))))))
   :
   ( ret_type_13339:reg8_t == 0x16:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
    cast(cast(f_val_13317:reg64_t)L:reg16_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
    cast(cast(e_val_13321:reg64_t)L:reg16_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
    cast(cast(d_val_13325:reg64_t)L:reg16_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
    cast(cast(c_val_13329:reg64_t)L:reg16_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
    cast(cast(b_val_13333:reg64_t)L:reg16_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( a_is_const_13338:reg1_t <> false  ?
    cast(cast(a_val_13337:reg64_t)L:reg16_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t))))))
   :
   ( ret_type_13339:reg8_t == 0x1f:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
    cast(cast(f_val_13317:reg64_t)L:reg8_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
    cast(cast(e_val_13321:reg64_t)L:reg8_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
    cast(cast(d_val_13325:reg64_t)L:reg8_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
    cast(cast(c_val_13329:reg64_t)L:reg8_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
    cast(cast(b_val_13333:reg64_t)L:reg8_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( a_is_const_13338:reg1_t <> false  ?
    cast(cast(a_val_13337:reg64_t)L:reg8_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t))))))
   :
   ( ret_type_13339:reg8_t == 0x20:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
    cast(cast(f_val_13317:reg64_t)L:reg8_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
    cast(cast(e_val_13321:reg64_t)L:reg8_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
    cast(cast(d_val_13325:reg64_t)L:reg8_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
    cast(cast(c_val_13329:reg64_t)L:reg8_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
    cast(cast(b_val_13333:reg64_t)L:reg8_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( a_is_const_13338:reg1_t <> false  ?
    cast(cast(a_val_13337:reg64_t)L:reg8_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t))))))
   :
   ( ret_type_13339:reg8_t == 0x29:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
    cast(cast(f_val_13317:reg64_t)L:reg1_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( f_val_13317:reg64_t == 1:reg64_t  ?
   0xffffffffffffff00:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
    cast(cast(e_val_13321:reg64_t)L:reg1_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( e_val_13321:reg64_t == 1:reg64_t  ?
   0xffffffffffffff00:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
    cast(cast(d_val_13325:reg64_t)L:reg1_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( d_val_13325:reg64_t == 1:reg64_t  ?
   0xffffffffffffff00:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
    cast(cast(c_val_13329:reg64_t)L:reg1_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( c_val_13329:reg64_t == 1:reg64_t  ?
   0xffffffffffffff00:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
    cast(cast(b_val_13333:reg64_t)L:reg1_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( b_val_13333:reg64_t == 1:reg64_t  ?
   0xffffffffffffff00:reg64_t : 0:reg64_t))
   :
   ( a_is_const_13338:reg1_t <> false  ?
    cast(cast(a_val_13337:reg64_t)L:reg1_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( a_val_13337:reg64_t == 1:reg64_t  ?
   0xffffffffffffff00:reg64_t : 0:reg64_t)))))))
   :
   ( ret_type_13339:reg8_t == 0x2a:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
    cast(cast(f_val_13317:reg64_t)L:reg1_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
    cast(cast(e_val_13321:reg64_t)L:reg1_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
    cast(cast(d_val_13325:reg64_t)L:reg1_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
    cast(cast(c_val_13329:reg64_t)L:reg1_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
    cast(cast(b_val_13333:reg64_t)L:reg1_t)U:
   reg64_t & 0xffffffffffffff00:reg64_t  :
   0:reg64_t)
   :
   ( a_is_const_13338:reg1_t <> false  ?
    cast(cast(a_val_13337:reg64_t)L:reg1_t)U:
   reg64_t & 0xffffffffffffff00:reg64_t  :
   0:reg64_t))))))
   : 0:reg64_t)))))))))
  t125 =  e_is_const_13322:reg1_t <> false  ? e_val_13321:reg64_t :
   ( e_val_13321:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420000:reg64_t)
  t126 =  f_is_const_13318:reg1_t <> false  ? f_val_13317:reg64_t :
   ( f_val_13317:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420000:reg64_t)
  Symbolic branch condition (0x004423c2)  cast(cast(t124_25766:reg64_t)L:reg8_t)U:reg64_t == 0:reg64_t 
  Current Path String: 1111111001
  Trying true: Satisfiable.
  Trying false: Unsatisfiable.
  Current Path String: 11111110011
  Current path: 11111110011
  write(1, 0x50001000, 21)
  Completed adapted_f1
   = 21 (0x00000015)
  Symbolic branch condition (0x0042df12)  t123_25765:reg64_t == 0xdcd967bf:reg64_t 
  Current Path String: 11111110011
  Trying true: Satisfiable.
  Trying false: Satisfiable.
  Current Path String: 111111100111
  Current path: 111111100111
  t127 =  cast( cast( t123_25765:reg64_t == 0xdcd967bf:reg64_t )U:reg8_t & 1:reg8_t )U:
   reg64_t == 0:reg64_t 
  t128 =  cast( cast( t123_25765:reg64_t == 0xdcd967bf:reg64_t )U:reg8_t & 1:reg8_t )U:
   reg64_t
   | 
   (
   (cast( t123_25765:reg64_t == 0xdcd967bf:reg64_t )U:reg64_t
   | 0xa686300:reg64_t)
    & 0xffffffffffffff00:reg64_t)
    
  Symbolic branch condition (0x0042e570)  cast(t128_25770:reg64_t)L:reg8_t == 0:reg8_t 
  Current Path String: 111111100111
  Trying true: Unsatisfiable.
  Trying false: Satisfiable.
  Current Path String: 1111111001110
  Current path: 1111111001110
  write(1, 0x50001000, 18)
  Match
  read a test
   = 18 (0x00000012)
  write(1, 0x50001000, 12)
  Starting f1
   = 12 (0x0000000c)
  SRFM#make_sym_snap called
  GSM#make_snap called
  GSM#make_snap called
  FM#make_f1_conc_snap called
  GSSM#make_snap 3 -> 4
  GSM#make_snap called
  FM#make_f1_special_handlers_snap
  linux_syscalls#make_f1_snap called
  linux_syscalls#make_snap called
  SRFM#save_sym_se saving f1_hash_list.length = 2
  FM#save_f1_conc_se called
  AS#ready to apply (0.000000 sec). eof1
  GSSM#reset4_3 4 -> 3 
  GSM#reset called
  GHM#clear called
  FM#reset_f1_special_handlers_snap
  linux_syscalls#reset_f1_snap called
  write(1, 0x50001000, 13)
  Completed f1
   = 13 (0x0000000d)
  write(1, 0x50001000, 20)
  Starting adapted_f1
   = 20 (0x00000014)
  SRFM#make_f2_sym_snap called
  GSM#reset called
  GHM#clear called
  GSM#reset called
  GHM#clear called
  FM#make_f2_conc_snap called
  GSSM#make_snap 3 -> 4
  GSM#make_snap called
  FM#make_f2_special_handlers_snap
  linux_syscalls#make_f2_snap called
  linux_syscalls#make_snap called
  Starting simple adaptor
  setting arg= f_is_const_13318:reg1_t <> false  ? f_val_13317:reg64_t :
   ( f_val_13317:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420018:reg64_t)
  setting arg= e_is_const_13322:reg1_t <> false  ? e_val_13321:reg64_t :
   ( e_val_13321:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420018:reg64_t)
  setting arg= d_is_const_13326:reg1_t <> false  ? d_val_13325:reg64_t :
   ( d_val_13325:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420018:reg64_t)
  setting arg= c_is_const_13330:reg1_t <> false  ? c_val_13329:reg64_t :
   ( c_val_13329:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420018:reg64_t)
  setting arg= b_is_const_13334:reg1_t <> false  ? b_val_13333:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420018:reg64_t)
  setting arg= a_is_const_13338:reg1_t <> false  ? a_val_13337:reg64_t :
   ( a_val_13337:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420018:reg64_t)
  AS#ready to apply (0.000000 sec). sof2
  SRFM#Generating structure adaptor formulas...exec_runloop#thunk() should save arg regs here
  Symbolic branch condition (0x0042d9b6) t66_24022:reg1_t
  Current Path String: 1111111001110
  Trying false: Unsatisfiable.
  Trying true: Satisfiable.
  Current Path String: 11111110011101
  Current path: 11111110011101
  Symbolic branch condition (0x0042d9cc) t68_24024:reg1_t
  Current Path String: 11111110011101
  Trying true: Satisfiable.
  Trying false: Unsatisfiable.
  Current Path String: 111111100111011
  Current path: 111111100111011
  Symbolic branch condition (0x0042d9e2) t70_24026:reg1_t
  Current Path String: 111111100111011
  Trying false: Unsatisfiable.
  Trying true: Satisfiable.
  Current Path String: 1111111001110111
  Current path: 1111111001110111
  Symbolic branch condition (0x0042d9f8) t72_24028:reg1_t
  Current Path String: 1111111001110111
  Trying true: Satisfiable.
  Trying false: Unsatisfiable.
  Current Path String: 11111110011101111
  Current path: 11111110011101111
  Symbolic branch condition (0x0042da0e) t74_24030:reg1_t
  Current Path String: 11111110011101111
  Trying true: Satisfiable.
  Trying false: Unsatisfiable.
  Current Path String: 111111100111011111
  Current path: 111111100111011111
  Symbolic branch condition (0x0042da24) t76_24032:reg1_t
  Current Path String: 111111100111011111
  Trying true: Satisfiable.
  Trying false: Unsatisfiable.
  Current Path String: 1111111001110111111
  Current path: 1111111001110111111
  Symbolic branch condition (0x0042da3a) t78_24034:reg1_t
  Current Path String: 1111111001110111111
  Trying true: Satisfiable.
  Trying false: Unsatisfiable.
  Current Path String: 11111110011101111111
  Current path: 11111110011101111111
  Symbolic branch condition (0x0042da50)  cast(
   cast(cast(t64_24020:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff66c88c0d:reg64_t
   )L:reg32_t
   == 0:reg32_t
   
  Current Path String: 11111110011101111111
  Trying true: Unsatisfiable.
  Trying false: Satisfiable.
  Current Path String: 111111100111011111110
  Current path: 111111100111011111110
  Symbolic branch condition (0x0042da66)  cast(
   cast(cast(t64_24020:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff6676a0d8:reg64_t
   )L:reg32_t
   == 0:reg32_t
   
  Current Path String: 111111100111011111110
  Trying true: Unsatisfiable.
  Trying false: Satisfiable.
  Current Path String: 1111111001110111111100
  Current path: 1111111001110111111100
  t129 =  cast(cast(
   cast(cast(t64_24020:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff386f0169:reg64_t
   )L:reg32_t)H:reg1_t
   ^  cast(t64_24020:reg64_t)L:reg32_t <$ 0xc790fe97:reg32_t 
   
  Symbolic branch condition (0x0042da7c)  cast(
   cast(cast(t64_24020:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff386f0169:reg64_t
   )L:reg32_t
   == 0:reg32_t
   
  Current Path String: 1111111001110111111100
  Trying false: Unsatisfiable.
  Trying true: Satisfiable.
  Current Path String: 11111110011101111111001
  Current path: 11111110011101111111001
  Starting return-typeconv adaptor
  SRFM#compare_sym_se called len(f1_h_l) = 2 len(f2_h_l)=0
  f1_hash_list_len = 2 f2_hash_list_len = 2
  GSM#reset called
  GHM#clear called
  GSM#reset called
  GHM#clear called
  FM#compare_conc_se called
  all side-effects were equal
  GSSM#reset4_3 4 -> 3 
  GSM#reset called
  GHM#clear called
  FM#reset_f2_special_handlers_snap
  linux_syscalls#reset_f2_snap called
  t130 =  ret_type_13339:reg8_t == 0:reg8_t  ? 0:reg64_t :
   ( ret_type_13339:reg8_t == 1:reg8_t  ? ret_val_13340:reg64_t :
   ( ret_type_13339:reg8_t == 0xb:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
   cast(cast(f_val_13317:reg64_t)L:reg32_t)S:reg64_t :
   ( f_val_13317:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420018:reg64_t))
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
   cast(cast(e_val_13321:reg64_t)L:reg32_t)S:reg64_t :
   ( e_val_13321:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420018:reg64_t))
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
   cast(cast(d_val_13325:reg64_t)L:reg32_t)S:reg64_t :
   ( d_val_13325:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x42420018:reg64_t))
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
   cast(cast(c_val_13329:reg64_t)L:reg32_t)S:reg64_t :
   ( c_val_13329:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x42420018:reg64_t))
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
   cast(cast(b_val_13333:reg64_t)L:reg32_t)S:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x42420018:reg64_t))
   :
   ( a_is_const_13338:reg1_t <> false  ?
   cast(cast(a_val_13337:reg64_t)L:reg32_t)S:reg64_t :
   ( a_val_13337:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x42420018:reg64_t)))))))
   :
   ( ret_type_13339:reg8_t == 0xc:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
   cast(cast(f_val_13317:reg64_t)L:reg32_t)U:reg64_t :
   ( f_val_13317:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420018:reg64_t))
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
   cast(cast(e_val_13321:reg64_t)L:reg32_t)U:reg64_t :
   ( e_val_13321:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x42420018:reg64_t))
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
   cast(cast(d_val_13325:reg64_t)L:reg32_t)U:reg64_t :
   ( d_val_13325:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x42420018:reg64_t))
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
   cast(cast(c_val_13329:reg64_t)L:reg32_t)U:reg64_t :
   ( c_val_13329:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x42420018:reg64_t))
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
   cast(cast(b_val_13333:reg64_t)L:reg32_t)U:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x42420018:reg64_t))
   :
   ( a_is_const_13338:reg1_t <> false  ?
   cast(cast(a_val_13337:reg64_t)L:reg32_t)U:reg64_t :
   ( a_val_13337:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x42420018:reg64_t)))))))
   :
   ( ret_type_13339:reg8_t == 0x15:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
   cast(cast(f_val_13317:reg64_t)L:reg16_t)S:reg64_t :
   ( f_val_13317:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x18:reg64_t))
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
   cast(cast(e_val_13321:reg64_t)L:reg16_t)S:reg64_t :
   ( e_val_13321:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x18:reg64_t))
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
   cast(cast(d_val_13325:reg64_t)L:reg16_t)S:reg64_t :
   ( d_val_13325:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x18:reg64_t))
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
   cast(cast(c_val_13329:reg64_t)L:reg16_t)S:reg64_t :
   ( c_val_13329:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x18:reg64_t))
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
   cast(cast(b_val_13333:reg64_t)L:reg16_t)S:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x18:reg64_t))
   :
   ( a_is_const_13338:reg1_t <> false  ?
   cast(cast(a_val_13337:reg64_t)L:reg16_t)S:reg64_t :
   ( a_val_13337:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x18:reg64_t)))))))
   :
   ( ret_type_13339:reg8_t == 0x16:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
   cast(cast(f_val_13317:reg64_t)L:reg16_t)U:reg64_t :
   ( f_val_13317:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x18:reg64_t))
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
   cast(cast(e_val_13321:reg64_t)L:reg16_t)U:reg64_t :
   ( e_val_13321:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x18:reg64_t))
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
   cast(cast(d_val_13325:reg64_t)L:reg16_t)U:reg64_t :
   ( d_val_13325:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x18:reg64_t))
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
   cast(cast(c_val_13329:reg64_t)L:reg16_t)U:reg64_t :
   ( c_val_13329:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x18:reg64_t))
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
   cast(cast(b_val_13333:reg64_t)L:reg16_t)U:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x18:reg64_t))
   :
   ( a_is_const_13338:reg1_t <> false  ?
   cast(cast(a_val_13337:reg64_t)L:reg16_t)U:reg64_t :
   ( a_val_13337:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x18:reg64_t)))))))
   :
   ( ret_type_13339:reg8_t == 0x1f:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
   cast(cast(f_val_13317:reg64_t)L:reg8_t)S:reg64_t :
   ( f_val_13317:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x18:reg64_t))
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
   cast(cast(e_val_13321:reg64_t)L:reg8_t)S:reg64_t :
   ( e_val_13321:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x18:reg64_t))
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
   cast(cast(d_val_13325:reg64_t)L:reg8_t)S:reg64_t :
   ( d_val_13325:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x18:reg64_t))
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
   cast(cast(c_val_13329:reg64_t)L:reg8_t)S:reg64_t :
   ( c_val_13329:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x18:reg64_t))
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
   cast(cast(b_val_13333:reg64_t)L:reg8_t)S:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x18:reg64_t))
   :
   ( a_is_const_13338:reg1_t <> false  ?
   cast(cast(a_val_13337:reg64_t)L:reg8_t)S:reg64_t :
   ( a_val_13337:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x18:reg64_t)))))))
   :
   ( ret_type_13339:reg8_t == 0x20:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
   cast(cast(f_val_13317:reg64_t)L:reg8_t)U:reg64_t :
   ( f_val_13317:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x18:reg64_t))
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
   cast(cast(e_val_13321:reg64_t)L:reg8_t)U:reg64_t :
   ( e_val_13321:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x18:reg64_t))
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
   cast(cast(d_val_13325:reg64_t)L:reg8_t)U:reg64_t :
   ( d_val_13325:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x18:reg64_t))
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
   cast(cast(c_val_13329:reg64_t)L:reg8_t)U:reg64_t :
   ( c_val_13329:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x18:reg64_t))
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
   cast(cast(b_val_13333:reg64_t)L:reg8_t)U:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x18:reg64_t))
   :
   ( a_is_const_13338:reg1_t <> false  ?
   cast(cast(a_val_13337:reg64_t)L:reg8_t)U:reg64_t :
   ( a_val_13337:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x18:reg64_t)))))))
   :
   ( ret_type_13339:reg8_t == 0x29:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
   cast(cast(f_val_13317:reg64_t)L:reg1_t)S:reg64_t :
   ( f_val_13317:reg64_t == 1:reg64_t  ?
   0xffffffffffffffff:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
   cast(cast(e_val_13321:reg64_t)L:reg1_t)S:reg64_t :
   ( e_val_13321:reg64_t == 1:reg64_t  ?
   0xffffffffffffffff:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
   cast(cast(d_val_13325:reg64_t)L:reg1_t)S:reg64_t :
   ( d_val_13325:reg64_t == 1:reg64_t  ?
   0xffffffffffffffff:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
   cast(cast(c_val_13329:reg64_t)L:reg1_t)S:reg64_t :
   ( c_val_13329:reg64_t == 1:reg64_t  ?
   0xffffffffffffffff:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
   cast(cast(b_val_13333:reg64_t)L:reg1_t)S:reg64_t
   :
   ( b_val_13333:reg64_t == 1:reg64_t  ?
   0xffffffffffffffff:reg64_t : 0:reg64_t))
   :
   ( a_is_const_13338:reg1_t <> false  ?
   cast(cast(a_val_13337:reg64_t)L:reg1_t)S:reg64_t
   :
   ( a_val_13337:reg64_t == 1:reg64_t  ?
   0xffffffffffffffff:reg64_t : 0:reg64_t)))))))
   :
   ( ret_type_13339:reg8_t == 0x2a:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
   cast(cast(f_val_13317:reg64_t)L:reg1_t)U:reg64_t :
   ( f_val_13317:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
   cast(cast(e_val_13321:reg64_t)L:reg1_t)U:reg64_t :
   ( e_val_13321:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
   cast(cast(d_val_13325:reg64_t)L:reg1_t)U:reg64_t :
   ( d_val_13325:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
   cast(cast(c_val_13329:reg64_t)L:reg1_t)U:reg64_t
   :
   ( c_val_13329:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
   cast(cast(b_val_13333:reg64_t)L:reg1_t)U:
   reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t
   : 0:reg64_t))
   :
   ( a_is_const_13338:reg1_t <> false  ?
   cast(cast(a_val_13337:reg64_t)L:reg1_t)U:
   reg64_t :
   ( a_val_13337:reg64_t == 1:reg64_t  ? 1:reg64_t
   : 0:reg64_t)))))))
   : 0:reg64_t)))))))))
  t131 =  e_is_const_13322:reg1_t <> false  ? e_val_13321:reg64_t :
   ( e_val_13321:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420018:reg64_t)
  t132 =  f_is_const_13318:reg1_t <> false  ? f_val_13317:reg64_t :
   ( f_val_13317:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420018:reg64_t)
  Symbolic branch condition (0x004423c2)  cast(cast(t124_25766:reg64_t)L:reg8_t)U:reg64_t == 0:reg64_t 
  Current Path String: 11111110011101111111001
  Trying true: Trying false: Current Path String: 111111100111011111110011
  Current path: 111111100111011111110011
  write(1, 0x50001000, 21)
  Completed adapted_f1
   = 21 (0x00000015)
  Symbolic branch condition (0x0042df12)  t130_25773:reg64_t == 0xe96ccf45:reg64_t 
  Current Path String: 111111100111011111110011
  Trying true: Unsatisfiable.
  Trying false: Satisfiable.
  Current Path String: 1111111001110111111100110
  Current path: 1111111001110111111100110
  t133 =  cast( cast( t130_25773:reg64_t == 0xe96ccf45:reg64_t )U:reg8_t & 1:reg8_t )U:
   reg64_t == 0:reg64_t 
  t134 =  cast( cast( t130_25773:reg64_t == 0xe96ccf45:reg64_t )U:reg8_t & 1:reg8_t )U:
   reg64_t
   | 
   (
   (cast( t130_25773:reg64_t == 0xe96ccf45:reg64_t )U:reg64_t
   | 0xa686374616d7300:reg64_t)
    & 0xffffffffffffff00:reg64_t)
    
  Symbolic branch condition (0x0042e570)  cast(t134_25777:reg64_t)L:reg8_t == 0:reg8_t 
  Current Path String: 1111111001110111111100110
  Trying false: Unsatisfiable.
  Trying true: Satisfiable.
  Current Path String: 11111110011101111111001101
  Current path: 11111110011101111111001101
  write(1, 0x50001000, 9)
  Mismatch
   = 9 (0x00000009)
  exit_group(1) (no return)
  Stopping when program called exit() at 0x004717a7
  Path: 11111110011101111111001101
  Final path: 11111110011101111111001101
  Satisfiable.
  SRFM#reset called
  FM#reset calling mem#reset()
  GSSM#reset called
  GSM#clear clearing diff
  GHM#clear called
  GSM#clear clearing main
  GHM#clear called
  linux_syscalls#reset called
  SRFM#reset clearing regions
  GSM#clear clearing diff
  GHM#clear called
  GSM#clear clearing main
  GHM#clear called
  GSM#clear clearing diff
  GHM#clear called
  GSM#clear clearing main
  GHM#clear called
  SRFM#reset cleared regions
  CPU time 0.072000 sec, 0.316000 total
  Wall time 0.405695 sec, 1.846393 total
  Iteration 3:
  fstat(3, 0xbfffc8b0) = 0 (0x00000000)
  mmap(0x00000000, 4096, 0x3, 0x22, -1, 0) = 1342177280 (0x50000000)
  read(3, 0x50000000, 4096) = 62 (0x0000003e)
  fstat(1, 0xbfffc570) = 0 (0x00000000)
  mmap(0x00000000, 4096, 0x3, 0x22, -1, 0) = 1342181376 (0x50001000)
  write(1, 0x50001000, 12)
  read a test
   = 12 (0x0000000c)
  write(1, 0x50001000, 12)
  Starting f1
   = 12 (0x0000000c)
  SRFM#make_sym_snap called
  GSM#make_snap called
  GSM#make_snap called
  FM#make_f1_conc_snap called
  GSSM#make_snap 3 -> 4
  GSM#make_snap called
  FM#make_f1_special_handlers_snap
  linux_syscalls#make_f1_snap called
  linux_syscalls#make_snap called
  SRFM#save_sym_se saving f1_hash_list.length = 2
  FM#save_f1_conc_se called
  AS#ready to apply (0.000000 sec). eof1
  GSSM#reset4_3 4 -> 3 
  GSM#reset called
  GHM#clear called
  FM#reset_f1_special_handlers_snap
  linux_syscalls#reset_f1_snap called
  write(1, 0x50001000, 13)
  Completed f1
   = 13 (0x0000000d)
  write(1, 0x50001000, 20)
  Starting adapted_f1
   = 20 (0x00000014)
  SRFM#make_f2_sym_snap called
  GSM#reset called
  GHM#clear called
  GSM#reset called
  GHM#clear called
  FM#make_f2_conc_snap called
  GSSM#make_snap 3 -> 4
  GSM#make_snap called
  FM#make_f2_special_handlers_snap
  linux_syscalls#make_f2_snap called
  linux_syscalls#make_snap called
  Starting simple adaptor
  setting arg= f_is_const_13318:reg1_t <> false  ? f_val_13317:reg64_t :
   ( f_val_13317:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420000:reg64_t)
  setting arg= e_is_const_13322:reg1_t <> false  ? e_val_13321:reg64_t :
   ( e_val_13321:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420000:reg64_t)
  setting arg= d_is_const_13326:reg1_t <> false  ? d_val_13325:reg64_t :
   ( d_val_13325:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420000:reg64_t)
  setting arg= c_is_const_13330:reg1_t <> false  ? c_val_13329:reg64_t :
   ( c_val_13329:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420000:reg64_t)
  setting arg= b_is_const_13334:reg1_t <> false  ? b_val_13333:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420000:reg64_t)
  setting arg= a_is_const_13338:reg1_t <> false  ? a_val_13337:reg64_t :
   ( a_val_13337:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420000:reg64_t)
  AS#ready to apply (0.000000 sec). sof2
  SRFM#Generating structure adaptor formulas...exec_runloop#thunk() should save arg regs here
  Symbolic branch condition (0x0042d9b6) t5_22398:reg1_t
  Current Path String: 
  Known true
  Current Path String: 1
  Current path: 1
  Symbolic branch condition (0x0042d9cc) t7_22400:reg1_t
  Current Path String: 1
  Known true
  Current Path String: 11
  Current path: 11
  Symbolic branch condition (0x0042d9e2) t9_22402:reg1_t
  Current Path String: 11
  Known true
  Current Path String: 111
  Current path: 111
  Symbolic branch condition (0x0042d9f8) t11_22404:reg1_t
  Current Path String: 111
  Known true
  Current Path String: 1111
  Current path: 1111
  Symbolic branch condition (0x0042da0e) t13_22406:reg1_t
  Current Path String: 1111
  Known true
  Current Path String: 11111
  Current path: 11111
  Symbolic branch condition (0x0042da24) t15_22408:reg1_t
  Current Path String: 11111
  Known true
  Current Path String: 111111
  Current path: 111111
  Symbolic branch condition (0x0042da3a) t17_22410:reg1_t
  Current Path String: 111111
  Known true
  Current Path String: 1111111
  Current path: 1111111
  Symbolic branch condition (0x0042da50)  cast(
   cast(cast(t3_22388:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff66c88c0d:reg64_t
   )L:reg32_t
   == 0:reg32_t
   
  Current Path String: 1111111
  Known false
  Current Path String: 11111110
  Current path: 11111110
  Symbolic branch condition (0x0042da66)  cast(
   cast(cast(t3_22388:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff6676a0d8:reg64_t
   )L:reg32_t
   == 0:reg32_t
   
  Current Path String: 11111110
  Known true
  Current Path String: 111111101
  Current path: 111111101
  Symbolic address t1_22079:reg64_t @ (0x42db54)
  Concrete base terms: 
  Concrete offset terms: 
  Offset expression terms: 
  Ambiguous expression terms:  b_is_const_13334:reg1_t <> false  ? b_val_13333:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420000:reg64_t)
  Ambiguous symbol terms: 
  Current Path String: 111111101
  Known true
  Current Path String: 1111111011
  Current path: 1111111011
  SRFM#region_for took branch true in Not_found case expr =  b_is_const_13334:reg1_t <> false  ? b_val_13333:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420000:reg64_t)
  Current Path String: 1111111011
  Known true
  Current Path String: 11111110111
  Current path: 11111110111
  SRFM#region_for using concrete address 42420000 for  b_is_const_13334:reg1_t <> false  ? b_val_13333:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420000:reg64_t)
  SRFM#region_for regions seen in this path = 0
  Address  b_is_const_13334:reg1_t <> false  ? b_val_13333:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420000:reg64_t) is region 1
  Symbolic branch condition (0x0042d9b6) t23_23622:reg1_t
  Current Path String: 11111110111
  Known true
  Current Path String: 111111101111
  Current path: 111111101111
  Symbolic branch condition (0x0042d9cc) t25_23624:reg1_t
  Current Path String: 111111101111
  Known true
  Current Path String: 1111111011111
  Current path: 1111111011111
  Symbolic branch condition (0x0042d9e2) t27_23626:reg1_t
  Current Path String: 1111111011111
  Known true
  Current Path String: 11111110111111
  Current path: 11111110111111
  Symbolic branch condition (0x0042d9f8) t29_23628:reg1_t
  Current Path String: 11111110111111
  Known true
  Current Path String: 111111101111111
  Current path: 111111101111111
  Symbolic branch condition (0x0042da0e) t31_23630:reg1_t
  Current Path String: 111111101111111
  Known true
  Current Path String: 1111111011111111
  Current path: 1111111011111111
  Symbolic branch condition (0x0042da24) t33_23632:reg1_t
  Current Path String: 1111111011111111
  Known true
  Current Path String: 11111110111111111
  Current path: 11111110111111111
  Symbolic branch condition (0x0042da3a) t35_23634:reg1_t
  Current Path String: 11111110111111111
  Known true
  Current Path String: 111111101111111111
  Current path: 111111101111111111
  Symbolic branch condition (0x0042da50)  cast(
   cast(cast(t21_23620:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff66c88c0d:reg64_t
   )L:reg32_t
   == 0:reg32_t
   
  Current Path String: 111111101111111111
  Known false
  Current Path String: 1111111011111111110
  Current path: 1111111011111111110
  Symbolic branch condition (0x0042da66)  cast(
   cast(cast(t21_23620:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff6676a0d8:reg64_t
   )L:reg32_t
   == 0:reg32_t
   
  Current Path String: 1111111011111111110
  Known true
  Current Path String: 11111110111111111101
  Current path: 11111110111111111101
  Symbolic address  t1_22079:reg64_t + 1:reg64_t  @ (0x42db54)
  Concrete base terms: 
  Concrete offset terms: 0x00000001
  Offset expression terms: 
  Ambiguous expression terms:  b_is_const_13334:reg1_t <> false  ? b_val_13333:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420000:reg64_t)
  Ambiguous symbol terms: 
  SRFM#region_for found in region_val_queried expr =  b_is_const_13334:reg1_t <> false  ? b_val_13333:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420000:reg64_t)
  SRFM#region_for found region number in region_vals, ret = 1 expr =  b_is_const_13334:reg1_t <> false  ? b_val_13333:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420000:reg64_t)
  Symbolic branch condition (0x0042d9b6) t41_23640:reg1_t
  Current Path String: 11111110111111111101
  Known true
  Current Path String: 111111101111111111011
  Current path: 111111101111111111011
  Symbolic branch condition (0x0042d9cc) t43_23642:reg1_t
  Current Path String: 111111101111111111011
  Known true
  Current Path String: 1111111011111111110111
  Current path: 1111111011111111110111
  Symbolic branch condition (0x0042d9e2) t45_23644:reg1_t
  Current Path String: 1111111011111111110111
  Known true
  Current Path String: 11111110111111111101111
  Current path: 11111110111111111101111
  Symbolic branch condition (0x0042d9f8) t47_23646:reg1_t
  Current Path String: 11111110111111111101111
  Known true
  Current Path String: 111111101111111111011111
  Current path: 111111101111111111011111
  Symbolic branch condition (0x0042da0e) t49_23648:reg1_t
  Current Path String: 111111101111111111011111
  Known true
  Current Path String: 1111111011111111110111111
  Current path: 1111111011111111110111111
  Symbolic branch condition (0x0042da24) t51_23650:reg1_t
  Current Path String: 1111111011111111110111111
  Known true
  Current Path String: 11111110111111111101111111
  Current path: 11111110111111111101111111
  Symbolic branch condition (0x0042da3a) t53_23652:reg1_t
  Current Path String: 11111110111111111101111111
  Known true
  Current Path String: 111111101111111111011111111
  Current path: 111111101111111111011111111
  Symbolic branch condition (0x0042da50)  cast(
   cast(cast(t39_23638:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff66c88c0d:reg64_t
   )L:reg32_t
   == 0:reg32_t
   
  Current Path String: 111111101111111111011111111
  Known false
  Current Path String: 1111111011111111110111111110
  Current path: 1111111011111111110111111110
  Symbolic branch condition (0x0042da66)  cast(
   cast(cast(t39_23638:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff6676a0d8:reg64_t
   )L:reg32_t
   == 0:reg32_t
   
  Current Path String: 1111111011111111110111111110
  Known false
  Current Path String: 11111110111111111101111111100
  Current path: 11111110111111111101111111100
  Symbolic branch condition (0x0042da7c)  cast(
   cast(cast(t39_23638:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff386f0169:reg64_t
   )L:reg32_t
   == 0:reg32_t
   
  Current Path String: 11111110111111111101111111100
  Known true
  Current Path String: 111111101111111111011111111001
  Current path: 111111101111111111011111111001
  Starting return-typeconv adaptor
  SRFM#compare_sym_se called len(f1_h_l) = 2 len(f2_h_l)=0
  f1_hash_list_len = 2 f2_hash_list_len = 2
  GSM#reset called
  GHM#clear called
  GSM#reset called
  GHM#clear called
  FM#compare_conc_se called
  all side-effects were equal
  GSSM#reset4_3 4 -> 3 
  GSM#reset called
  GHM#clear called
  FM#reset_f2_special_handlers_snap
  linux_syscalls#reset_f2_snap called
  Symbolic branch condition (0x004423c2)  cast(cast(t58_23824:reg64_t)L:reg8_t)U:reg64_t == 0:reg64_t 
  Current Path String: 111111101111111111011111111001
  Known true
  Current Path String: 1111111011111111110111111110011
  Current path: 1111111011111111110111111110011
  write(1, 0x50001000, 21)
  Completed adapted_f1
   = 21 (0x00000015)
  Symbolic branch condition (0x0042df12)  t57_23822:reg64_t == 0xdcd967bf:reg64_t 
  Current Path String: 1111111011111111110111111110011
  Known false
  Current Path String: 11111110111111111101111111100110
  Current path: 11111110111111111101111111100110
  t135 =  cast( cast( t57_23822:reg64_t == 0xdcd967bf:reg64_t )U:reg8_t & 1:reg8_t )U:
   reg64_t
   | 
   (
   (cast( t57_23822:reg64_t == 0xdcd967bf:reg64_t )U:reg64_t
   | 0xa686374616d7300:reg64_t)
    & 0xffffffffffffff00:reg64_t)
    
  Symbolic branch condition (0x0042e570)  cast(t135_25779:reg64_t)L:reg8_t == 0:reg8_t 
  Current Path String: 11111110111111111101111111100110
  Trying false: Unsatisfiable.
  Trying true: Satisfiable.
  Current Path String: 111111101111111111011111111001101
  Current path: 111111101111111111011111111001101
  write(1, 0x50001000, 9)
  Mismatch
   = 9 (0x00000009)
  exit_group(1) (no return)
  Stopping when program called exit() at 0x004717a7
  Path: 111111101111111111011111111001101
  Final path: 111111101111111111011111111001101
  Satisfiable.
  SRFM#reset called
  FM#reset calling mem#reset()
  GSSM#reset called
  GSM#clear clearing diff
  GHM#clear called
  GSM#clear clearing main
  GHM#clear called
  linux_syscalls#reset called
  SRFM#reset clearing regions
  GSM#clear clearing diff
  GHM#clear called
  GSM#clear clearing main
  GHM#clear called
  GSM#clear clearing diff
  GHM#clear called
  GSM#clear clearing main
  GHM#clear called
  SRFM#reset cleared regions
  CPU time 0.052000 sec, 0.368000 total
  Wall time 0.100981 sec, 1.947386 total
  Iteration 4:
  fstat(3, 0xbfffc8b0) = 0 (0x00000000)
  mmap(0x00000000, 4096, 0x3, 0x22, -1, 0) = 1342177280 (0x50000000)
  read(3, 0x50000000, 4096) = 62 (0x0000003e)
  fstat(1, 0xbfffc570) = 0 (0x00000000)
  mmap(0x00000000, 4096, 0x3, 0x22, -1, 0) = 1342181376 (0x50001000)
  write(1, 0x50001000, 12)
  read a test
   = 12 (0x0000000c)
  write(1, 0x50001000, 12)
  Starting f1
   = 12 (0x0000000c)
  SRFM#make_sym_snap called
  GSM#make_snap called
  GSM#make_snap called
  FM#make_f1_conc_snap called
  GSSM#make_snap 3 -> 4
  GSM#make_snap called
  FM#make_f1_special_handlers_snap
  linux_syscalls#make_f1_snap called
  linux_syscalls#make_snap called
  SRFM#save_sym_se saving f1_hash_list.length = 2
  FM#save_f1_conc_se called
  AS#ready to apply (0.000000 sec). eof1
  GSSM#reset4_3 4 -> 3 
  GSM#reset called
  GHM#clear called
  FM#reset_f1_special_handlers_snap
  linux_syscalls#reset_f1_snap called
  write(1, 0x50001000, 13)
  Completed f1
   = 13 (0x0000000d)
  write(1, 0x50001000, 20)
  Starting adapted_f1
   = 20 (0x00000014)
  SRFM#make_f2_sym_snap called
  GSM#reset called
  GHM#clear called
  GSM#reset called
  GHM#clear called
  FM#make_f2_conc_snap called
  GSSM#make_snap 3 -> 4
  GSM#make_snap called
  FM#make_f2_special_handlers_snap
  linux_syscalls#make_f2_snap called
  linux_syscalls#make_snap called
  Starting simple adaptor
  setting arg= f_is_const_13318:reg1_t <> false  ? f_val_13317:reg64_t :
   ( f_val_13317:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420000:reg64_t)
  setting arg= e_is_const_13322:reg1_t <> false  ? e_val_13321:reg64_t :
   ( e_val_13321:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420000:reg64_t)
  setting arg= d_is_const_13326:reg1_t <> false  ? d_val_13325:reg64_t :
   ( d_val_13325:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420000:reg64_t)
  setting arg= c_is_const_13330:reg1_t <> false  ? c_val_13329:reg64_t :
   ( c_val_13329:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420000:reg64_t)
  setting arg= b_is_const_13334:reg1_t <> false  ? b_val_13333:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420000:reg64_t)
  setting arg= a_is_const_13338:reg1_t <> false  ? a_val_13337:reg64_t :
   ( a_val_13337:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420000:reg64_t)
  AS#ready to apply (0.000000 sec). sof2
  SRFM#Generating structure adaptor formulas...exec_runloop#thunk() should save arg regs here
  Symbolic branch condition (0x0042d9b6) t5_22398:reg1_t
  Current Path String: 
  Known true
  Current Path String: 1
  Current path: 1
  Symbolic branch condition (0x0042d9cc) t7_22400:reg1_t
  Current Path String: 1
  Known true
  Current Path String: 11
  Current path: 11
  Symbolic branch condition (0x0042d9e2) t9_22402:reg1_t
  Current Path String: 11
  Known true
  Current Path String: 111
  Current path: 111
  Symbolic branch condition (0x0042d9f8) t11_22404:reg1_t
  Current Path String: 111
  Known true
  Current Path String: 1111
  Current path: 1111
  Symbolic branch condition (0x0042da0e) t13_22406:reg1_t
  Current Path String: 1111
  Known true
  Current Path String: 11111
  Current path: 11111
  Symbolic branch condition (0x0042da24) t15_22408:reg1_t
  Current Path String: 11111
  Known true
  Current Path String: 111111
  Current path: 111111
  Symbolic branch condition (0x0042da3a) t17_22410:reg1_t
  Current Path String: 111111
  Known true
  Current Path String: 1111111
  Current path: 1111111
  Symbolic branch condition (0x0042da50)  cast(
   cast(cast(t3_22388:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff66c88c0d:reg64_t
   )L:reg32_t
   == 0:reg32_t
   
  Current Path String: 1111111
  Known false
  Current Path String: 11111110
  Current path: 11111110
  Symbolic branch condition (0x0042da66)  cast(
   cast(cast(t3_22388:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff6676a0d8:reg64_t
   )L:reg32_t
   == 0:reg32_t
   
  Current Path String: 11111110
  Known true
  Current Path String: 111111101
  Current path: 111111101
  Symbolic address t1_22079:reg64_t @ (0x42db54)
  Concrete base terms: 
  Concrete offset terms: 
  Offset expression terms: 
  Ambiguous expression terms:  b_is_const_13334:reg1_t <> false  ? b_val_13333:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420000:reg64_t)
  Ambiguous symbol terms: 
  Current Path String: 111111101
  Known true
  Current Path String: 1111111011
  Current path: 1111111011
  SRFM#region_for took branch true in Not_found case expr =  b_is_const_13334:reg1_t <> false  ? b_val_13333:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420000:reg64_t)
  Current Path String: 1111111011
  Known true
  Current Path String: 11111110111
  Current path: 11111110111
  SRFM#region_for using concrete address 42420000 for  b_is_const_13334:reg1_t <> false  ? b_val_13333:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420000:reg64_t)
  SRFM#region_for regions seen in this path = 0
  Address  b_is_const_13334:reg1_t <> false  ? b_val_13333:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420000:reg64_t) is region 1
  Symbolic branch condition (0x0042d9b6) t23_23622:reg1_t
  Current Path String: 11111110111
  Known true
  Current Path String: 111111101111
  Current path: 111111101111
  Symbolic branch condition (0x0042d9cc) t25_23624:reg1_t
  Current Path String: 111111101111
  Known true
  Current Path String: 1111111011111
  Current path: 1111111011111
  Symbolic branch condition (0x0042d9e2) t27_23626:reg1_t
  Current Path String: 1111111011111
  Known true
  Current Path String: 11111110111111
  Current path: 11111110111111
  Symbolic branch condition (0x0042d9f8) t29_23628:reg1_t
  Current Path String: 11111110111111
  Known true
  Current Path String: 111111101111111
  Current path: 111111101111111
  Symbolic branch condition (0x0042da0e) t31_23630:reg1_t
  Current Path String: 111111101111111
  Known true
  Current Path String: 1111111011111111
  Current path: 1111111011111111
  Symbolic branch condition (0x0042da24) t33_23632:reg1_t
  Current Path String: 1111111011111111
  Known true
  Current Path String: 11111110111111111
  Current path: 11111110111111111
  Symbolic branch condition (0x0042da3a) t35_23634:reg1_t
  Current Path String: 11111110111111111
  Known true
  Current Path String: 111111101111111111
  Current path: 111111101111111111
  Symbolic branch condition (0x0042da50)  cast(
   cast(cast(t21_23620:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff66c88c0d:reg64_t
   )L:reg32_t
   == 0:reg32_t
   
  Current Path String: 111111101111111111
  Known false
  Current Path String: 1111111011111111110
  Current path: 1111111011111111110
  Symbolic branch condition (0x0042da66)  cast(
   cast(cast(t21_23620:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff6676a0d8:reg64_t
   )L:reg32_t
   == 0:reg32_t
   
  Current Path String: 1111111011111111110
  Known false
  Current Path String: 11111110111111111100
  Current path: 11111110111111111100
  t136 =  cast(cast(
   cast(cast(t21_23620:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff386f0169:reg64_t
   )L:reg32_t)H:reg1_t
   ^  cast(t21_23620:reg64_t)L:reg32_t <$ 0xc790fe97:reg32_t 
   
  Symbolic branch condition (0x0042da7c)  cast(
   cast(cast(t21_23620:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff386f0169:reg64_t
   )L:reg32_t
   == 0:reg32_t
   
  Current Path String: 11111110111111111100
  Trying false: Unsatisfiable.
  Trying true: Satisfiable.
  Current Path String: 111111101111111111001
  Current path: 111111101111111111001
  Starting return-typeconv adaptor
  SRFM#compare_sym_se called len(f1_h_l) = 2 len(f2_h_l)=0
  f1_hash_list_len = 2 f2_hash_list_len = 2
  GSM#reset called
  GHM#clear called
  GSM#reset called
  GHM#clear called
  FM#compare_conc_se called
  all side-effects were equal
  GSSM#reset4_3 4 -> 3 
  GSM#reset called
  GHM#clear called
  FM#reset_f2_special_handlers_snap
  linux_syscalls#reset_f2_snap called
  t137 =  ret_type_13339:reg8_t == 0:reg8_t  ? 0xdcd967bf:reg64_t :
   ( ret_type_13339:reg8_t == 1:reg8_t  ? ret_val_13340:reg64_t :
   ( ret_type_13339:reg8_t == 0xb:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
   cast(cast(f_val_13317:reg64_t)L:reg32_t)S:reg64_t :
   ( f_val_13317:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
   cast(cast(e_val_13321:reg64_t)L:reg32_t)S:reg64_t :
   ( e_val_13321:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
   cast(cast(d_val_13325:reg64_t)L:reg32_t)S:reg64_t :
   ( d_val_13325:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
   cast(cast(c_val_13329:reg64_t)L:reg32_t)S:reg64_t :
   ( c_val_13329:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
   cast(cast(b_val_13333:reg64_t)L:reg32_t)S:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x42420000:reg64_t))
   :
   ( a_is_const_13338:reg1_t <> false  ?
   cast(cast(a_val_13337:reg64_t)L:reg32_t)S:reg64_t :
   ( a_val_13337:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x42420000:reg64_t)))))))
   :
   ( ret_type_13339:reg8_t == 0xc:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
   cast(cast(f_val_13317:reg64_t)L:reg32_t)U:reg64_t :
   ( f_val_13317:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
   cast(cast(e_val_13321:reg64_t)L:reg32_t)U:reg64_t :
   ( e_val_13321:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
   cast(cast(d_val_13325:reg64_t)L:reg32_t)U:reg64_t :
   ( d_val_13325:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
   cast(cast(c_val_13329:reg64_t)L:reg32_t)U:reg64_t :
   ( c_val_13329:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
   cast(cast(b_val_13333:reg64_t)L:reg32_t)U:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x42420000:reg64_t))
   :
   ( a_is_const_13338:reg1_t <> false  ?
   cast(cast(a_val_13337:reg64_t)L:reg32_t)U:reg64_t :
   ( a_val_13337:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x42420000:reg64_t)))))))
   :
   ( ret_type_13339:reg8_t == 0x15:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
   cast(cast(f_val_13317:reg64_t)L:reg16_t)S:reg64_t :
   ( f_val_13317:reg64_t == 1:reg64_t  ? 1:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
   cast(cast(e_val_13321:reg64_t)L:reg16_t)S:reg64_t :
   ( e_val_13321:reg64_t == 1:reg64_t  ? 1:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
   cast(cast(d_val_13325:reg64_t)L:reg16_t)S:reg64_t :
   ( d_val_13325:reg64_t == 1:reg64_t  ? 1:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
   cast(cast(c_val_13329:reg64_t)L:reg16_t)S:reg64_t :
   ( c_val_13329:reg64_t == 1:reg64_t  ? 1:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
   cast(cast(b_val_13333:reg64_t)L:reg16_t)S:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t))
   :
   ( a_is_const_13338:reg1_t <> false  ?
   cast(cast(a_val_13337:reg64_t)L:reg16_t)S:reg64_t :
   ( a_val_13337:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t)))))))
   :
   ( ret_type_13339:reg8_t == 0x16:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
   cast(cast(f_val_13317:reg64_t)L:reg16_t)U:reg64_t :
   ( f_val_13317:reg64_t == 1:reg64_t  ? 1:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
   cast(cast(e_val_13321:reg64_t)L:reg16_t)U:reg64_t :
   ( e_val_13321:reg64_t == 1:reg64_t  ? 1:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
   cast(cast(d_val_13325:reg64_t)L:reg16_t)U:reg64_t :
   ( d_val_13325:reg64_t == 1:reg64_t  ? 1:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
   cast(cast(c_val_13329:reg64_t)L:reg16_t)U:reg64_t :
   ( c_val_13329:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
   cast(cast(b_val_13333:reg64_t)L:reg16_t)U:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t))
   :
   ( a_is_const_13338:reg1_t <> false  ?
   cast(cast(a_val_13337:reg64_t)L:reg16_t)U:reg64_t :
   ( a_val_13337:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t)))))))
   :
   ( ret_type_13339:reg8_t == 0x1f:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
   cast(cast(f_val_13317:reg64_t)L:reg8_t)S:reg64_t :
   ( f_val_13317:reg64_t == 1:reg64_t  ? 1:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
   cast(cast(e_val_13321:reg64_t)L:reg8_t)S:reg64_t :
   ( e_val_13321:reg64_t == 1:reg64_t  ? 1:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
   cast(cast(d_val_13325:reg64_t)L:reg8_t)S:reg64_t :
   ( d_val_13325:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
   cast(cast(c_val_13329:reg64_t)L:reg8_t)S:reg64_t :
   ( c_val_13329:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
   cast(cast(b_val_13333:reg64_t)L:reg8_t)S:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t))
   :
   ( a_is_const_13338:reg1_t <> false  ?
   cast(cast(a_val_13337:reg64_t)L:reg8_t)S:reg64_t :
   ( a_val_13337:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t)))))))
   :
   ( ret_type_13339:reg8_t == 0x20:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
   cast(cast(f_val_13317:reg64_t)L:reg8_t)U:reg64_t :
   ( f_val_13317:reg64_t == 1:reg64_t  ? 1:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
   cast(cast(e_val_13321:reg64_t)L:reg8_t)U:reg64_t :
   ( e_val_13321:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
   cast(cast(d_val_13325:reg64_t)L:reg8_t)U:reg64_t :
   ( d_val_13325:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
   cast(cast(c_val_13329:reg64_t)L:reg8_t)U:reg64_t :
   ( c_val_13329:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
   cast(cast(b_val_13333:reg64_t)L:reg8_t)U:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t))
   :
   ( a_is_const_13338:reg1_t <> false  ?
   cast(cast(a_val_13337:reg64_t)L:reg8_t)U:reg64_t :
   ( a_val_13337:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t)))))))
   :
   ( ret_type_13339:reg8_t == 0x29:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
   cast(cast(f_val_13317:reg64_t)L:reg1_t)S:reg64_t :
   ( f_val_13317:reg64_t == 1:reg64_t  ?
   0xffffffffffffffff:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
   cast(cast(e_val_13321:reg64_t)L:reg1_t)S:reg64_t :
   ( e_val_13321:reg64_t == 1:reg64_t  ?
   0xffffffffffffffff:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
   cast(cast(d_val_13325:reg64_t)L:reg1_t)S:reg64_t :
   ( d_val_13325:reg64_t == 1:reg64_t  ?
   0xffffffffffffffff:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
   cast(cast(c_val_13329:reg64_t)L:reg1_t)S:reg64_t :
   ( c_val_13329:reg64_t == 1:reg64_t  ?
   0xffffffffffffffff:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
   cast(cast(b_val_13333:reg64_t)L:reg1_t)S:reg64_t
   :
   ( b_val_13333:reg64_t == 1:reg64_t  ?
   0xffffffffffffffff:reg64_t : 0:reg64_t))
   :
   ( a_is_const_13338:reg1_t <> false  ?
   cast(cast(a_val_13337:reg64_t)L:reg1_t)S:reg64_t
   :
   ( a_val_13337:reg64_t == 1:reg64_t  ?
   0xffffffffffffffff:reg64_t : 0:reg64_t)))))))
   :
   ( ret_type_13339:reg8_t == 0x2a:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
   cast(cast(f_val_13317:reg64_t)L:reg1_t)U:reg64_t :
   ( f_val_13317:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
   cast(cast(e_val_13321:reg64_t)L:reg1_t)U:reg64_t :
   ( e_val_13321:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
   cast(cast(d_val_13325:reg64_t)L:reg1_t)U:reg64_t :
   ( d_val_13325:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
   cast(cast(c_val_13329:reg64_t)L:reg1_t)U:reg64_t
   :
   ( c_val_13329:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
   cast(cast(b_val_13333:reg64_t)L:reg1_t)U:
   reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t
   : 0:reg64_t))
   :
   ( a_is_const_13338:reg1_t <> false  ?
   cast(cast(a_val_13337:reg64_t)L:reg1_t)U:
   reg64_t :
   ( a_val_13337:reg64_t == 1:reg64_t  ? 1:reg64_t
   : 0:reg64_t)))))))
   :
   ( ret_type_13339:reg8_t == 0x33:reg8_t  ?
   0xffffffffdcd967bf:reg64_t :
   ( ret_type_13339:reg8_t == 0x34:reg8_t  ?
   0xdcd967bf:reg64_t :
   ( ret_type_13339:reg8_t == 0x35:reg8_t  ? 1:reg64_t :
   ( ret_type_13339:reg8_t == 0x3d:reg8_t  ?
   0x67bf:reg64_t :
   ( ret_type_13339:reg8_t == 0x3e:reg8_t  ?
   0x67bf:reg64_t :
   ( ret_type_13339:reg8_t == 0x47:reg8_t  ?
   0xffffffffffffffbf:reg64_t :
   ( ret_type_13339:reg8_t == 0x48:reg8_t  ?
   0xbf:reg64_t :
   ( ret_type_13339:reg8_t == 0x51:reg8_t  ?
   0xffffffffffffffff:reg64_t : 1:reg64_t)))))))))))))))))
  t138 =  ret_type_13339:reg8_t == 0:reg8_t  ? 0xdcd96700:reg64_t :
   ( ret_type_13339:reg8_t == 1:reg8_t  ?
    ret_val_13340:reg64_t & 0xffffffffffffff00:reg64_t  :
   ( ret_type_13339:reg8_t == 0xb:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
    cast(cast(f_val_13317:reg64_t)L:reg32_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( f_val_13317:reg64_t == 1:reg64_t  ? 0:reg64_t : 0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
    cast(cast(e_val_13321:reg64_t)L:reg32_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( e_val_13321:reg64_t == 1:reg64_t  ? 0:reg64_t : 0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
    cast(cast(d_val_13325:reg64_t)L:reg32_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( d_val_13325:reg64_t == 1:reg64_t  ? 0:reg64_t :
   0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
    cast(cast(c_val_13329:reg64_t)L:reg32_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( c_val_13329:reg64_t == 1:reg64_t  ? 0:reg64_t :
   0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
    cast(cast(b_val_13333:reg64_t)L:reg32_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 0:reg64_t :
   0x42420000:reg64_t))
   :
   ( a_is_const_13338:reg1_t <> false  ?
    cast(cast(a_val_13337:reg64_t)L:reg32_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( a_val_13337:reg64_t == 1:reg64_t  ? 0:reg64_t :
   0x42420000:reg64_t)))))))
   :
   ( ret_type_13339:reg8_t == 0xc:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
    cast(cast(f_val_13317:reg64_t)L:reg32_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( f_val_13317:reg64_t == 1:reg64_t  ? 0:reg64_t : 0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
    cast(cast(e_val_13321:reg64_t)L:reg32_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( e_val_13321:reg64_t == 1:reg64_t  ? 0:reg64_t :
   0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
    cast(cast(d_val_13325:reg64_t)L:reg32_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( d_val_13325:reg64_t == 1:reg64_t  ? 0:reg64_t :
   0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
    cast(cast(c_val_13329:reg64_t)L:reg32_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( c_val_13329:reg64_t == 1:reg64_t  ? 0:reg64_t :
   0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
    cast(cast(b_val_13333:reg64_t)L:reg32_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 0:reg64_t :
   0x42420000:reg64_t))
   :
   ( a_is_const_13338:reg1_t <> false  ?
    cast(cast(a_val_13337:reg64_t)L:reg32_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( a_val_13337:reg64_t == 1:reg64_t  ? 0:reg64_t :
   0x42420000:reg64_t)))))))
   :
   ( ret_type_13339:reg8_t == 0x15:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
    cast(cast(f_val_13317:reg64_t)L:reg16_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
    cast(cast(e_val_13321:reg64_t)L:reg16_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
    cast(cast(d_val_13325:reg64_t)L:reg16_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
    cast(cast(c_val_13329:reg64_t)L:reg16_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
    cast(cast(b_val_13333:reg64_t)L:reg16_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( a_is_const_13338:reg1_t <> false  ?
    cast(cast(a_val_13337:reg64_t)L:reg16_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t))))))
   :
   ( ret_type_13339:reg8_t == 0x16:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
    cast(cast(f_val_13317:reg64_t)L:reg16_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
    cast(cast(e_val_13321:reg64_t)L:reg16_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
    cast(cast(d_val_13325:reg64_t)L:reg16_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
    cast(cast(c_val_13329:reg64_t)L:reg16_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
    cast(cast(b_val_13333:reg64_t)L:reg16_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( a_is_const_13338:reg1_t <> false  ?
    cast(cast(a_val_13337:reg64_t)L:reg16_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t))))))
   :
   ( ret_type_13339:reg8_t == 0x1f:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
    cast(cast(f_val_13317:reg64_t)L:reg8_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
    cast(cast(e_val_13321:reg64_t)L:reg8_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
    cast(cast(d_val_13325:reg64_t)L:reg8_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
    cast(cast(c_val_13329:reg64_t)L:reg8_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
    cast(cast(b_val_13333:reg64_t)L:reg8_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( a_is_const_13338:reg1_t <> false  ?
    cast(cast(a_val_13337:reg64_t)L:reg8_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t))))))
   :
   ( ret_type_13339:reg8_t == 0x20:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
    cast(cast(f_val_13317:reg64_t)L:reg8_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
    cast(cast(e_val_13321:reg64_t)L:reg8_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
    cast(cast(d_val_13325:reg64_t)L:reg8_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
    cast(cast(c_val_13329:reg64_t)L:reg8_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
    cast(cast(b_val_13333:reg64_t)L:reg8_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( a_is_const_13338:reg1_t <> false  ?
    cast(cast(a_val_13337:reg64_t)L:reg8_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t))))))
   :
   ( ret_type_13339:reg8_t == 0x29:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
    cast(cast(f_val_13317:reg64_t)L:reg1_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( f_val_13317:reg64_t == 1:reg64_t  ?
   0xffffffffffffff00:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
    cast(cast(e_val_13321:reg64_t)L:reg1_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( e_val_13321:reg64_t == 1:reg64_t  ?
   0xffffffffffffff00:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
    cast(cast(d_val_13325:reg64_t)L:reg1_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( d_val_13325:reg64_t == 1:reg64_t  ?
   0xffffffffffffff00:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
    cast(cast(c_val_13329:reg64_t)L:reg1_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( c_val_13329:reg64_t == 1:reg64_t  ?
   0xffffffffffffff00:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
    cast(cast(b_val_13333:reg64_t)L:reg1_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( b_val_13333:reg64_t == 1:reg64_t  ?
   0xffffffffffffff00:reg64_t : 0:reg64_t))
   :
   ( a_is_const_13338:reg1_t <> false  ?
    cast(cast(a_val_13337:reg64_t)L:reg1_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( a_val_13337:reg64_t == 1:reg64_t  ?
   0xffffffffffffff00:reg64_t : 0:reg64_t)))))))
   :
   ( ret_type_13339:reg8_t == 0x2a:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
    cast(cast(f_val_13317:reg64_t)L:reg1_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
    cast(cast(e_val_13321:reg64_t)L:reg1_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
    cast(cast(d_val_13325:reg64_t)L:reg1_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
    cast(cast(c_val_13329:reg64_t)L:reg1_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
    cast(cast(b_val_13333:reg64_t)L:reg1_t)U:
   reg64_t & 0xffffffffffffff00:reg64_t  :
   0:reg64_t)
   :
   ( a_is_const_13338:reg1_t <> false  ?
    cast(cast(a_val_13337:reg64_t)L:reg1_t)U:
   reg64_t & 0xffffffffffffff00:reg64_t  :
   0:reg64_t))))))
   :
   ( ret_type_13339:reg8_t == 0x33:reg8_t  ?
   0xffffffffdcd96700:reg64_t :
   ( ret_type_13339:reg8_t == 0x34:reg8_t  ?
   0xdcd96700:reg64_t :
   ( ret_type_13339:reg8_t == 0x35:reg8_t  ? 0:reg64_t :
   ( ret_type_13339:reg8_t == 0x3d:reg8_t  ?
   0x6700:reg64_t :
   ( ret_type_13339:reg8_t == 0x3e:reg8_t  ?
   0x6700:reg64_t :
   ( ret_type_13339:reg8_t == 0x47:reg8_t  ?
   0xffffffffffffff00:reg64_t :
   ( ret_type_13339:reg8_t == 0x48:reg8_t  ?
   0:reg64_t :
   ( ret_type_13339:reg8_t == 0x51:reg8_t  ?
   0xffffffffffffff00:reg64_t : 0:reg64_t)))))))))))))))))
  Symbolic branch condition (0x004423c2)  cast(cast(t138_25783:reg64_t)L:reg8_t)U:reg64_t == 0:reg64_t 
  Current Path String: 111111101111111111001
  Trying true: Satisfiable.
  Trying false: Unsatisfiable.
  Current Path String: 1111111011111111110011
  Current path: 1111111011111111110011
  write(1, 0x50001000, 21)
  Completed adapted_f1
   = 21 (0x00000015)
  Symbolic branch condition (0x0042df12)  t137_25782:reg64_t == 0xdcd967bf:reg64_t 
  Current Path String: 1111111011111111110011
  Trying true: Satisfiable.
  Trying false: Satisfiable.
  Current Path String: 11111110111111111100111
  Current path: 11111110111111111100111
  t139 =  cast( cast( t137_25782:reg64_t == 0xdcd967bf:reg64_t )U:reg8_t & 1:reg8_t )U:
   reg64_t == 0:reg64_t 
  t140 =  cast( cast( t137_25782:reg64_t == 0xdcd967bf:reg64_t )U:reg8_t & 1:reg8_t )U:
   reg64_t
   | 
   (
   (cast( t137_25782:reg64_t == 0xdcd967bf:reg64_t )U:reg64_t
   | 0xa686300:reg64_t)
    & 0xffffffffffffff00:reg64_t)
    
  Symbolic branch condition (0x0042e570)  cast(t140_25785:reg64_t)L:reg8_t == 0:reg8_t 
  Current Path String: 11111110111111111100111
  Trying true: Unsatisfiable.
  Trying false: Satisfiable.
  Current Path String: 111111101111111111001110
  Current path: 111111101111111111001110
  write(1, 0x50001000, 18)
  Match
  read a test
   = 18 (0x00000012)
  write(1, 0x50001000, 12)
  Starting f1
   = 12 (0x0000000c)
  SRFM#make_sym_snap called
  GSM#make_snap called
  GSM#make_snap called
  FM#make_f1_conc_snap called
  GSSM#make_snap 3 -> 4
  GSM#make_snap called
  FM#make_f1_special_handlers_snap
  linux_syscalls#make_f1_snap called
  linux_syscalls#make_snap called
  SRFM#save_sym_se saving f1_hash_list.length = 2
  FM#save_f1_conc_se called
  AS#ready to apply (0.000000 sec). eof1
  GSSM#reset4_3 4 -> 3 
  GSM#reset called
  GHM#clear called
  FM#reset_f1_special_handlers_snap
  linux_syscalls#reset_f1_snap called
  write(1, 0x50001000, 13)
  Completed f1
   = 13 (0x0000000d)
  write(1, 0x50001000, 20)
  Starting adapted_f1
   = 20 (0x00000014)
  SRFM#make_f2_sym_snap called
  GSM#reset called
  GHM#clear called
  GSM#reset called
  GHM#clear called
  FM#make_f2_conc_snap called
  GSSM#make_snap 3 -> 4
  GSM#make_snap called
  FM#make_f2_special_handlers_snap
  linux_syscalls#make_f2_snap called
  linux_syscalls#make_snap called
  Starting simple adaptor
  setting arg= f_is_const_13318:reg1_t <> false  ? f_val_13317:reg64_t :
   ( f_val_13317:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420018:reg64_t)
  setting arg= e_is_const_13322:reg1_t <> false  ? e_val_13321:reg64_t :
   ( e_val_13321:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420018:reg64_t)
  setting arg= d_is_const_13326:reg1_t <> false  ? d_val_13325:reg64_t :
   ( d_val_13325:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420018:reg64_t)
  setting arg= c_is_const_13330:reg1_t <> false  ? c_val_13329:reg64_t :
   ( c_val_13329:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420018:reg64_t)
  setting arg= b_is_const_13334:reg1_t <> false  ? b_val_13333:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420018:reg64_t)
  setting arg= a_is_const_13338:reg1_t <> false  ? a_val_13337:reg64_t :
   ( a_val_13337:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420018:reg64_t)
  AS#ready to apply (0.000000 sec). sof2
  SRFM#Generating structure adaptor formulas...exec_runloop#thunk() should save arg regs here
  Symbolic branch condition (0x0042d9b6) t66_24022:reg1_t
  Current Path String: 111111101111111111001110
  Trying true: Satisfiable.
  Trying false: Unsatisfiable.
  Current Path String: 1111111011111111110011101
  Current path: 1111111011111111110011101
  Symbolic branch condition (0x0042d9cc) t68_24024:reg1_t
  Current Path String: 1111111011111111110011101
  Trying false: Unsatisfiable.
  Trying true: Satisfiable.
  Current Path String: 11111110111111111100111011
  Current path: 11111110111111111100111011
  Symbolic branch condition (0x0042d9e2) t70_24026:reg1_t
  Current Path String: 11111110111111111100111011
  Trying true: Satisfiable.
  Trying false: Unsatisfiable.
  Current Path String: 111111101111111111001110111
  Current path: 111111101111111111001110111
  Symbolic branch condition (0x0042d9f8) t72_24028:reg1_t
  Current Path String: 111111101111111111001110111
  Trying false: Unsatisfiable.
  Trying true: Satisfiable.
  Current Path String: 1111111011111111110011101111
  Current path: 1111111011111111110011101111
  Symbolic branch condition (0x0042da0e) t74_24030:reg1_t
  Current Path String: 1111111011111111110011101111
  Trying false: Unsatisfiable.
  Trying true: Satisfiable.
  Current Path String: 11111110111111111100111011111
  Current path: 11111110111111111100111011111
  Symbolic branch condition (0x0042da24) t76_24032:reg1_t
  Current Path String: 11111110111111111100111011111
  Trying false: Unsatisfiable.
  Trying true: Satisfiable.
  Current Path String: 111111101111111111001110111111
  Current path: 111111101111111111001110111111
  Symbolic branch condition (0x0042da3a) t78_24034:reg1_t
  Current Path String: 111111101111111111001110111111
  Trying false: Unsatisfiable.
  Trying true: Satisfiable.
  Current Path String: 1111111011111111110011101111111
  Current path: 1111111011111111110011101111111
  Symbolic branch condition (0x0042da50)  cast(
   cast(cast(t64_24020:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff66c88c0d:reg64_t
   )L:reg32_t
   == 0:reg32_t
   
  Current Path String: 1111111011111111110011101111111
  Trying true: Unsatisfiable.
  Trying false: Satisfiable.
  Current Path String: 11111110111111111100111011111110
  Current path: 11111110111111111100111011111110
  Symbolic branch condition (0x0042da66)  cast(
   cast(cast(t64_24020:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff6676a0d8:reg64_t
   )L:reg32_t
   == 0:reg32_t
   
  Current Path String: 11111110111111111100111011111110
  Trying false: Unsatisfiable.
  Trying true: Satisfiable.
  Current Path String: 111111101111111111001110111111101
  Current path: 111111101111111111001110111111101
  Symbolic address t62_24018:reg64_t @ (0x42db54)
  Concrete base terms: 
  Concrete offset terms: 
  Offset expression terms: 
  Ambiguous expression terms:  b_is_const_13334:reg1_t <> false  ? b_val_13333:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420018:reg64_t)
  Ambiguous symbol terms: 
  Current Path String: 111111101111111111001110111111101
  Trying true: Satisfiable.
  Trying false: Unsatisfiable.
  Current Path String: 1111111011111111110011101111111011
  Current path: 1111111011111111110011101111111011
  SRFM#region_for took branch true in Not_found case expr =  b_is_const_13334:reg1_t <> false  ? b_val_13333:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420018:reg64_t)
  Current Path String: 1111111011111111110011101111111011
  Trying true: Satisfiable.
  Trying false: Unsatisfiable.
  Current Path String: 11111110111111111100111011111110111
  Current path: 11111110111111111100111011111110111
  SRFM#region_for using concrete address 42420018 for  b_is_const_13334:reg1_t <> false  ? b_val_13333:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420018:reg64_t)
  SRFM#region_for regions seen in this path = 1
  Current Path String: 11111110111111111100111011111110111
  Trying false: Satisfiable.
  Trying true: Unsatisfiable.
  Current Path String: 111111101111111111001110111111101110
  Current path: 111111101111111111001110111111101110
  Address  b_is_const_13334:reg1_t <> false  ? b_val_13333:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420018:reg64_t) is region 2
  Symbolic branch condition (0x0042d9b6) t84_24040:reg1_t
  Current Path String: 111111101111111111001110111111101110
  Trying false: Unsatisfiable.
  Trying true: Satisfiable.
  Current Path String: 1111111011111111110011101111111011101
  Current path: 1111111011111111110011101111111011101
  Symbolic branch condition (0x0042d9cc) t86_24042:reg1_t
  Current Path String: 1111111011111111110011101111111011101
  Trying true: Satisfiable.
  Trying false: Unsatisfiable.
  Current Path String: 11111110111111111100111011111110111011
  Current path: 11111110111111111100111011111110111011
  Symbolic branch condition (0x0042d9e2) t88_24044:reg1_t
  Current Path String: 11111110111111111100111011111110111011
  Trying true: Satisfiable.
  Trying false: Unsatisfiable.
  Current Path String: 111111101111111111001110111111101110111
  Current path: 111111101111111111001110111111101110111
  Symbolic branch condition (0x0042d9f8) t90_24046:reg1_t
  Current Path String: 111111101111111111001110111111101110111
  Trying false: Unsatisfiable.
  Trying true: Satisfiable.
  Current Path String: 1111111011111111110011101111111011101111
  Current path: 1111111011111111110011101111111011101111
  Symbolic branch condition (0x0042da0e) t92_24048:reg1_t
  Current Path String: 1111111011111111110011101111111011101111
  Trying true: Satisfiable.
  Trying false: Unsatisfiable.
  Current Path String: 11111110111111111100111011111110111011111
  Current path: 11111110111111111100111011111110111011111
  Symbolic branch condition (0x0042da24) t94_24050:reg1_t
  Current Path String: 11111110111111111100111011111110111011111
  Trying false: Unsatisfiable.
  Trying true: Satisfiable.
  Current Path String: 111111101111111111001110111111101110111111
  Current path: 111111101111111111001110111111101110111111
  Symbolic branch condition (0x0042da3a) t96_24052:reg1_t
  Current Path String: 111111101111111111001110111111101110111111
  Trying false: Unsatisfiable.
  Trying true: Satisfiable.
  Current Path String: 1111111011111111110011101111111011101111111
  Current path: 1111111011111111110011101111111011101111111
  Symbolic branch condition (0x0042da50)  cast(
   cast(cast(t82_24038:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff66c88c0d:reg64_t
   )L:reg32_t
   == 0:reg32_t
   
  Current Path String: 1111111011111111110011101111111011101111111
  Trying true: Unsatisfiable.
  Trying false: Satisfiable.
  Current Path String: 11111110111111111100111011111110111011111110
  Current path: 11111110111111111100111011111110111011111110
  Symbolic branch condition (0x0042da66)  cast(
   cast(cast(t82_24038:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff6676a0d8:reg64_t
   )L:reg32_t
   == 0:reg32_t
   
  Current Path String: 11111110111111111100111011111110111011111110
  Trying false: Satisfiable.
  Trying true: Unsatisfiable.
  Current Path String: 111111101111111111001110111111101110111111100
  Current path: 111111101111111111001110111111101110111111100
  t141 =  cast(cast(
   cast(cast(t82_24038:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff386f0169:reg64_t
   )L:reg32_t)H:reg1_t
   ^  cast(t82_24038:reg64_t)L:reg32_t <$ 0xc790fe97:reg32_t 
   
  Symbolic branch condition (0x0042da7c)  cast(
   cast(cast(t82_24038:reg64_t)L:reg32_t)U:reg64_t
   + 0xffffffff386f0169:reg64_t
   )L:reg32_t
   == 0:reg32_t
   
  Current Path String: 111111101111111111001110111111101110111111100
  Trying true: Satisfiable.
  Trying false: Unsatisfiable.
  Current Path String: 1111111011111111110011101111111011101111111001
  Current path: 1111111011111111110011101111111011101111111001
  Starting return-typeconv adaptor
  SRFM#compare_sym_se called len(f1_h_l) = 2 len(f2_h_l)=0
  f1_hash_list_len = 2 f2_hash_list_len = 2
  GSM#reset called
  GHM#clear called
  GSM#reset called
  GHM#clear called
  FM#compare_conc_se called
  all side-effects were equal
  GSSM#reset4_3 4 -> 3 
  GSM#reset called
  GHM#clear called
  FM#reset_f2_special_handlers_snap
  linux_syscalls#reset_f2_snap called
  t142 =  ret_type_13339:reg8_t == 0:reg8_t  ? 0xe96ccf45:reg64_t :
   ( ret_type_13339:reg8_t == 1:reg8_t  ? ret_val_13340:reg64_t :
   ( ret_type_13339:reg8_t == 0xb:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
   cast(cast(f_val_13317:reg64_t)L:reg32_t)S:reg64_t :
   ( f_val_13317:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420018:reg64_t))
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
   cast(cast(e_val_13321:reg64_t)L:reg32_t)S:reg64_t :
   ( e_val_13321:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420018:reg64_t))
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
   cast(cast(d_val_13325:reg64_t)L:reg32_t)S:reg64_t :
   ( d_val_13325:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x42420018:reg64_t))
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
   cast(cast(c_val_13329:reg64_t)L:reg32_t)S:reg64_t :
   ( c_val_13329:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x42420018:reg64_t))
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
   cast(cast(b_val_13333:reg64_t)L:reg32_t)S:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x42420018:reg64_t))
   :
   ( a_is_const_13338:reg1_t <> false  ?
   cast(cast(a_val_13337:reg64_t)L:reg32_t)S:reg64_t :
   ( a_val_13337:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x42420018:reg64_t)))))))
   :
   ( ret_type_13339:reg8_t == 0xc:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
   cast(cast(f_val_13317:reg64_t)L:reg32_t)U:reg64_t :
   ( f_val_13317:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x42420018:reg64_t))
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
   cast(cast(e_val_13321:reg64_t)L:reg32_t)U:reg64_t :
   ( e_val_13321:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x42420018:reg64_t))
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
   cast(cast(d_val_13325:reg64_t)L:reg32_t)U:reg64_t :
   ( d_val_13325:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x42420018:reg64_t))
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
   cast(cast(c_val_13329:reg64_t)L:reg32_t)U:reg64_t :
   ( c_val_13329:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x42420018:reg64_t))
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
   cast(cast(b_val_13333:reg64_t)L:reg32_t)U:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x42420018:reg64_t))
   :
   ( a_is_const_13338:reg1_t <> false  ?
   cast(cast(a_val_13337:reg64_t)L:reg32_t)U:reg64_t :
   ( a_val_13337:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x42420018:reg64_t)))))))
   :
   ( ret_type_13339:reg8_t == 0x15:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
   cast(cast(f_val_13317:reg64_t)L:reg16_t)S:reg64_t :
   ( f_val_13317:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x18:reg64_t))
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
   cast(cast(e_val_13321:reg64_t)L:reg16_t)S:reg64_t :
   ( e_val_13321:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x18:reg64_t))
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
   cast(cast(d_val_13325:reg64_t)L:reg16_t)S:reg64_t :
   ( d_val_13325:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x18:reg64_t))
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
   cast(cast(c_val_13329:reg64_t)L:reg16_t)S:reg64_t :
   ( c_val_13329:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x18:reg64_t))
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
   cast(cast(b_val_13333:reg64_t)L:reg16_t)S:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x18:reg64_t))
   :
   ( a_is_const_13338:reg1_t <> false  ?
   cast(cast(a_val_13337:reg64_t)L:reg16_t)S:reg64_t :
   ( a_val_13337:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x18:reg64_t)))))))
   :
   ( ret_type_13339:reg8_t == 0x16:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
   cast(cast(f_val_13317:reg64_t)L:reg16_t)U:reg64_t :
   ( f_val_13317:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x18:reg64_t))
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
   cast(cast(e_val_13321:reg64_t)L:reg16_t)U:reg64_t :
   ( e_val_13321:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x18:reg64_t))
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
   cast(cast(d_val_13325:reg64_t)L:reg16_t)U:reg64_t :
   ( d_val_13325:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x18:reg64_t))
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
   cast(cast(c_val_13329:reg64_t)L:reg16_t)U:reg64_t :
   ( c_val_13329:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x18:reg64_t))
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
   cast(cast(b_val_13333:reg64_t)L:reg16_t)U:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x18:reg64_t))
   :
   ( a_is_const_13338:reg1_t <> false  ?
   cast(cast(a_val_13337:reg64_t)L:reg16_t)U:reg64_t :
   ( a_val_13337:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x18:reg64_t)))))))
   :
   ( ret_type_13339:reg8_t == 0x1f:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
   cast(cast(f_val_13317:reg64_t)L:reg8_t)S:reg64_t :
   ( f_val_13317:reg64_t == 1:reg64_t  ? 1:reg64_t : 0x18:reg64_t))
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
   cast(cast(e_val_13321:reg64_t)L:reg8_t)S:reg64_t :
   ( e_val_13321:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x18:reg64_t))
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
   cast(cast(d_val_13325:reg64_t)L:reg8_t)S:reg64_t :
   ( d_val_13325:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x18:reg64_t))
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
   cast(cast(c_val_13329:reg64_t)L:reg8_t)S:reg64_t :
   ( c_val_13329:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x18:reg64_t))
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
   cast(cast(b_val_13333:reg64_t)L:reg8_t)S:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x18:reg64_t))
   :
   ( a_is_const_13338:reg1_t <> false  ?
   cast(cast(a_val_13337:reg64_t)L:reg8_t)S:reg64_t :
   ( a_val_13337:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x18:reg64_t)))))))
   :
   ( ret_type_13339:reg8_t == 0x20:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
   cast(cast(f_val_13317:reg64_t)L:reg8_t)U:reg64_t :
   ( f_val_13317:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x18:reg64_t))
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
   cast(cast(e_val_13321:reg64_t)L:reg8_t)U:reg64_t :
   ( e_val_13321:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x18:reg64_t))
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
   cast(cast(d_val_13325:reg64_t)L:reg8_t)U:reg64_t :
   ( d_val_13325:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x18:reg64_t))
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
   cast(cast(c_val_13329:reg64_t)L:reg8_t)U:reg64_t :
   ( c_val_13329:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x18:reg64_t))
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
   cast(cast(b_val_13333:reg64_t)L:reg8_t)U:reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x18:reg64_t))
   :
   ( a_is_const_13338:reg1_t <> false  ?
   cast(cast(a_val_13337:reg64_t)L:reg8_t)U:reg64_t :
   ( a_val_13337:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0x18:reg64_t)))))))
   :
   ( ret_type_13339:reg8_t == 0x29:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
   cast(cast(f_val_13317:reg64_t)L:reg1_t)S:reg64_t :
   ( f_val_13317:reg64_t == 1:reg64_t  ?
   0xffffffffffffffff:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
   cast(cast(e_val_13321:reg64_t)L:reg1_t)S:reg64_t :
   ( e_val_13321:reg64_t == 1:reg64_t  ?
   0xffffffffffffffff:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
   cast(cast(d_val_13325:reg64_t)L:reg1_t)S:reg64_t :
   ( d_val_13325:reg64_t == 1:reg64_t  ?
   0xffffffffffffffff:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
   cast(cast(c_val_13329:reg64_t)L:reg1_t)S:reg64_t :
   ( c_val_13329:reg64_t == 1:reg64_t  ?
   0xffffffffffffffff:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
   cast(cast(b_val_13333:reg64_t)L:reg1_t)S:reg64_t
   :
   ( b_val_13333:reg64_t == 1:reg64_t  ?
   0xffffffffffffffff:reg64_t : 0:reg64_t))
   :
   ( a_is_const_13338:reg1_t <> false  ?
   cast(cast(a_val_13337:reg64_t)L:reg1_t)S:reg64_t
   :
   ( a_val_13337:reg64_t == 1:reg64_t  ?
   0xffffffffffffffff:reg64_t : 0:reg64_t)))))))
   :
   ( ret_type_13339:reg8_t == 0x2a:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
   cast(cast(f_val_13317:reg64_t)L:reg1_t)U:reg64_t :
   ( f_val_13317:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
   cast(cast(e_val_13321:reg64_t)L:reg1_t)U:reg64_t :
   ( e_val_13321:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
   cast(cast(d_val_13325:reg64_t)L:reg1_t)U:reg64_t :
   ( d_val_13325:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
   cast(cast(c_val_13329:reg64_t)L:reg1_t)U:reg64_t
   :
   ( c_val_13329:reg64_t == 1:reg64_t  ? 1:reg64_t :
   0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
   cast(cast(b_val_13333:reg64_t)L:reg1_t)U:
   reg64_t :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 1:reg64_t
   : 0:reg64_t))
   :
   ( a_is_const_13338:reg1_t <> false  ?
   cast(cast(a_val_13337:reg64_t)L:reg1_t)U:
   reg64_t :
   ( a_val_13337:reg64_t == 1:reg64_t  ? 1:reg64_t
   : 0:reg64_t)))))))
   :
   ( ret_type_13339:reg8_t == 0x33:reg8_t  ?
   0xffffffffe96ccf45:reg64_t :
   ( ret_type_13339:reg8_t == 0x34:reg8_t  ?
   0xe96ccf45:reg64_t :
   ( ret_type_13339:reg8_t == 0x35:reg8_t  ? 1:reg64_t :
   ( ret_type_13339:reg8_t == 0x3d:reg8_t  ?
   0xffffffffffffcf45:reg64_t :
   ( ret_type_13339:reg8_t == 0x3e:reg8_t  ?
   0xcf45:reg64_t :
   ( ret_type_13339:reg8_t == 0x47:reg8_t  ?
   0x45:reg64_t :
   ( ret_type_13339:reg8_t == 0x48:reg8_t  ?
   0x45:reg64_t :
   ( ret_type_13339:reg8_t == 0x51:reg8_t  ?
   0xffffffffffffffff:reg64_t : 1:reg64_t)))))))))))))))))
  t143 =  ret_type_13339:reg8_t == 0:reg8_t  ? 0xe96ccf00:reg64_t :
   ( ret_type_13339:reg8_t == 1:reg8_t  ?
    ret_val_13340:reg64_t & 0xffffffffffffff00:reg64_t  :
   ( ret_type_13339:reg8_t == 0xb:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
    cast(cast(f_val_13317:reg64_t)L:reg32_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( f_val_13317:reg64_t == 1:reg64_t  ? 0:reg64_t : 0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
    cast(cast(e_val_13321:reg64_t)L:reg32_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( e_val_13321:reg64_t == 1:reg64_t  ? 0:reg64_t : 0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
    cast(cast(d_val_13325:reg64_t)L:reg32_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( d_val_13325:reg64_t == 1:reg64_t  ? 0:reg64_t :
   0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
    cast(cast(c_val_13329:reg64_t)L:reg32_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( c_val_13329:reg64_t == 1:reg64_t  ? 0:reg64_t :
   0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
    cast(cast(b_val_13333:reg64_t)L:reg32_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 0:reg64_t :
   0x42420000:reg64_t))
   :
   ( a_is_const_13338:reg1_t <> false  ?
    cast(cast(a_val_13337:reg64_t)L:reg32_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( a_val_13337:reg64_t == 1:reg64_t  ? 0:reg64_t :
   0x42420000:reg64_t)))))))
   :
   ( ret_type_13339:reg8_t == 0xc:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
    cast(cast(f_val_13317:reg64_t)L:reg32_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( f_val_13317:reg64_t == 1:reg64_t  ? 0:reg64_t : 0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
    cast(cast(e_val_13321:reg64_t)L:reg32_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( e_val_13321:reg64_t == 1:reg64_t  ? 0:reg64_t :
   0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
    cast(cast(d_val_13325:reg64_t)L:reg32_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( d_val_13325:reg64_t == 1:reg64_t  ? 0:reg64_t :
   0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
    cast(cast(c_val_13329:reg64_t)L:reg32_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( c_val_13329:reg64_t == 1:reg64_t  ? 0:reg64_t :
   0x42420000:reg64_t))
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
    cast(cast(b_val_13333:reg64_t)L:reg32_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( b_val_13333:reg64_t == 1:reg64_t  ? 0:reg64_t :
   0x42420000:reg64_t))
   :
   ( a_is_const_13338:reg1_t <> false  ?
    cast(cast(a_val_13337:reg64_t)L:reg32_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( a_val_13337:reg64_t == 1:reg64_t  ? 0:reg64_t :
   0x42420000:reg64_t)))))))
   :
   ( ret_type_13339:reg8_t == 0x15:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
    cast(cast(f_val_13317:reg64_t)L:reg16_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
    cast(cast(e_val_13321:reg64_t)L:reg16_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
    cast(cast(d_val_13325:reg64_t)L:reg16_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
    cast(cast(c_val_13329:reg64_t)L:reg16_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
    cast(cast(b_val_13333:reg64_t)L:reg16_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( a_is_const_13338:reg1_t <> false  ?
    cast(cast(a_val_13337:reg64_t)L:reg16_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t))))))
   :
   ( ret_type_13339:reg8_t == 0x16:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
    cast(cast(f_val_13317:reg64_t)L:reg16_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
    cast(cast(e_val_13321:reg64_t)L:reg16_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
    cast(cast(d_val_13325:reg64_t)L:reg16_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
    cast(cast(c_val_13329:reg64_t)L:reg16_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
    cast(cast(b_val_13333:reg64_t)L:reg16_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( a_is_const_13338:reg1_t <> false  ?
    cast(cast(a_val_13337:reg64_t)L:reg16_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t))))))
   :
   ( ret_type_13339:reg8_t == 0x1f:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
    cast(cast(f_val_13317:reg64_t)L:reg8_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
    cast(cast(e_val_13321:reg64_t)L:reg8_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
    cast(cast(d_val_13325:reg64_t)L:reg8_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
    cast(cast(c_val_13329:reg64_t)L:reg8_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
    cast(cast(b_val_13333:reg64_t)L:reg8_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( a_is_const_13338:reg1_t <> false  ?
    cast(cast(a_val_13337:reg64_t)L:reg8_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t))))))
   :
   ( ret_type_13339:reg8_t == 0x20:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
    cast(cast(f_val_13317:reg64_t)L:reg8_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
    cast(cast(e_val_13321:reg64_t)L:reg8_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
    cast(cast(d_val_13325:reg64_t)L:reg8_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
    cast(cast(c_val_13329:reg64_t)L:reg8_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
    cast(cast(b_val_13333:reg64_t)L:reg8_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( a_is_const_13338:reg1_t <> false  ?
    cast(cast(a_val_13337:reg64_t)L:reg8_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t))))))
   :
   ( ret_type_13339:reg8_t == 0x29:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
    cast(cast(f_val_13317:reg64_t)L:reg1_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( f_val_13317:reg64_t == 1:reg64_t  ?
   0xffffffffffffff00:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
    cast(cast(e_val_13321:reg64_t)L:reg1_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( e_val_13321:reg64_t == 1:reg64_t  ?
   0xffffffffffffff00:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
    cast(cast(d_val_13325:reg64_t)L:reg1_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( d_val_13325:reg64_t == 1:reg64_t  ?
   0xffffffffffffff00:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
    cast(cast(c_val_13329:reg64_t)L:reg1_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( c_val_13329:reg64_t == 1:reg64_t  ?
   0xffffffffffffff00:reg64_t : 0:reg64_t))
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
    cast(cast(b_val_13333:reg64_t)L:reg1_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( b_val_13333:reg64_t == 1:reg64_t  ?
   0xffffffffffffff00:reg64_t : 0:reg64_t))
   :
   ( a_is_const_13338:reg1_t <> false  ?
    cast(cast(a_val_13337:reg64_t)L:reg1_t)S:reg64_t
   & 0xffffffffffffff00:reg64_t
    :
   ( a_val_13337:reg64_t == 1:reg64_t  ?
   0xffffffffffffff00:reg64_t : 0:reg64_t)))))))
   :
   ( ret_type_13339:reg8_t == 0x2a:reg8_t  ?
   ( ret_val_13340:reg64_t == 5:reg64_t  ?
   ( f_is_const_13318:reg1_t <> false  ?
    cast(cast(f_val_13317:reg64_t)L:reg1_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 4:reg64_t  ?
   ( e_is_const_13322:reg1_t <> false  ?
    cast(cast(e_val_13321:reg64_t)L:reg1_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 3:reg64_t  ?
   ( d_is_const_13326:reg1_t <> false  ?
    cast(cast(d_val_13325:reg64_t)L:reg1_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 2:reg64_t  ?
   ( c_is_const_13330:reg1_t <> false  ?
    cast(cast(c_val_13329:reg64_t)L:reg1_t)U:reg64_t
   & 0xffffffffffffff00:reg64_t
    : 0:reg64_t)
   :
   ( ret_val_13340:reg64_t == 1:reg64_t  ?
   ( b_is_const_13334:reg1_t <> false  ?
    cast(cast(b_val_13333:reg64_t)L:reg1_t)U:
   reg64_t & 0xffffffffffffff00:reg64_t  :
   0:reg64_t)
   :
   ( a_is_const_13338:reg1_t <> false  ?
    cast(cast(a_val_13337:reg64_t)L:reg1_t)U:
   reg64_t & 0xffffffffffffff00:reg64_t  :
   0:reg64_t))))))
   :
   ( ret_type_13339:reg8_t == 0x33:reg8_t  ?
   0xffffffffe96ccf00:reg64_t :
   ( ret_type_13339:reg8_t == 0x34:reg8_t  ?
   0xe96ccf00:reg64_t :
   ( ret_type_13339:reg8_t == 0x35:reg8_t  ? 0:reg64_t :
   ( ret_type_13339:reg8_t == 0x3d:reg8_t  ?
   0xffffffffffffcf00:reg64_t :
   ( ret_type_13339:reg8_t == 0x3e:reg8_t  ?
   0xcf00:reg64_t :
   ( ret_type_13339:reg8_t == 0x47:reg8_t  ?
   0:reg64_t :
   ( ret_type_13339:reg8_t == 0x48:reg8_t  ?
   0:reg64_t :
   ( ret_type_13339:reg8_t == 0x51:reg8_t  ?
   0xffffffffffffff00:reg64_t : 0:reg64_t)))))))))))))))))
  Symbolic branch condition (0x004423c2)  cast(cast(t143_25789:reg64_t)L:reg8_t)U:reg64_t == 0:reg64_t 
  Current Path String: 1111111011111111110011101111111011101111111001
  Trying false: Unsatisfiable.
  Trying true: Satisfiable.
  Current Path String: 11111110111111111100111011111110111011111110011
  Current path: 11111110111111111100111011111110111011111110011
  write(1, 0x50001000, 21)
  Completed adapted_f1
   = 21 (0x00000015)
  Symbolic branch condition (0x0042df12)  t142_25788:reg64_t == 0xe96ccf45:reg64_t 
  Current Path String: 11111110111111111100111011111110111011111110011
  Trying true: Satisfiable.
  Trying false: Satisfiable.
  Current Path String: 111111101111111111001110111111101110111111100111
  Current path: 111111101111111111001110111111101110111111100111
  t144 =  cast( cast( t142_25788:reg64_t == 0xe96ccf45:reg64_t )U:reg8_t & 1:reg8_t )U:
   reg64_t == 0:reg64_t 
  t145 =  cast( cast( t142_25788:reg64_t == 0xe96ccf45:reg64_t )U:reg8_t & 1:reg8_t )U:
   reg64_t
   | 
   (
   (cast( t142_25788:reg64_t == 0xe96ccf45:reg64_t )U:reg64_t
   | 0xa686300:reg64_t)
    & 0xffffffffffffff00:reg64_t)
    
  Symbolic branch condition (0x0042e570)  cast(t145_25791:reg64_t)L:reg8_t == 0:reg8_t 
  Current Path String: 111111101111111111001110111111101110111111100111
  Trying false: Satisfiable.
  Trying true: Unsatisfiable.
  Current Path String: 1111111011111111110011101111111011101111111001110
  Current path: 1111111011111111110011101111111011101111111001110
  read(3, 0x50000000, 4096) = 0 (0x00000000)
  write(1, 0x50001000, 27)
  Match
  All tests succeeded!
   = 27 (0x0000001b)
  exit_group(0) (no return)
  Stopping when program called exit() at 0x004717a7
  Coverage increased to 4357 on 4
  Path: 1111111011111111110011101111111011101111111001110
  Final path: 1111111011111111110011101111111011101111111001110
  Satisfiable.
  Input vars: a_val=0x1 
Synthesized arg adaptor ,1,,,,,,,,,, and return adaptor ,
elapsed time = 4, last AS search time = 3
Checking simple adaptor = ,1,,,,,,,,,,, ret adaptor = ,
../bin/fuzzball -linux-syscalls -arch x64 ./obfs_clone2_static -solver smtlib -solver-path ../bin/stp-old-dynamic -smtlib-solver-type stp -fuzz-start-addr 0x000000000042df90 -symbolic-long 0x0000000000705db0=a -symbolic-long 0x0000000000705db8=b -symbolic-long 0x0000000000705dc0=c -symbolic-long 0x0000000000705de0=d -symbolic-long 0x0000000000705dd0=e -symbolic-long 0x0000000000705da0=f -trace-sym-addr-details -trace-sym-addrs -trace-syscalls -omit-pf-af -trace-temps -trace-regions -trace-memory-snapshots -trace-tables -table-limit 12 -trace-binary-paths-bracketed -trace-basic -trace-conditions -trace-decisions -store-byte 0x42420030=0x61 -match-syscalls-in-addr-range 0x42de84:0x42de89:0x42dedd:0x42dee2 -store-long 0x42420030=0x42420038 -store-long 0x42420038=0x42420040 -store-long 0x42420040=0x42420048 -synthesize-adaptor simple:0x42dedd:2:0x000000000042d980:6 -extra-condition a_is_const:reg1_t==0x0:reg1_t -extra-condition a_val:reg64_t==0x0000000000000001:reg64_t -extra-condition b_is_const:reg1_t==0x0:reg1_t -extra-condition b_val:reg64_t==0x0000000000000000:reg64_t -extra-condition c_is_const:reg1_t==0x0:reg1_t -extra-condition c_val:reg64_t==0x0000000000000000:reg64_t -extra-condition d_is_const:reg1_t==0x0:reg1_t -extra-condition d_val:reg64_t==0x0000000000000000:reg64_t -extra-condition e_is_const:reg1_t==0x0:reg1_t -extra-condition e_val:reg64_t==0x0000000000000000:reg64_t -extra-condition f_is_const:reg1_t==0x0:reg1_t -extra-condition f_val:reg64_t==0x0000000000000000:reg64_t -extra-condition 'a_is_const:reg1_t==0:reg1_t | a_val:reg64_t>=$0xffffffffffffffff:reg64_t' -extra-condition 'a_is_const:reg1_t==0:reg1_t | a_val:reg64_t<=$0xf:reg64_t' -extra-condition 'b_is_const:reg1_t==0:reg1_t | b_val:reg64_t>=$0xffffffffffffffff:reg64_t' -extra-condition 'b_is_const:reg1_t==0:reg1_t | b_val:reg64_t<=$0xf:reg64_t' -extra-condition 'c_is_const:reg1_t==0:reg1_t | c_val:reg64_t>=$0xffffffffffffffff:reg64_t' -extra-condition 'c_is_const:reg1_t==0:reg1_t | c_val:reg64_t<=$0xf:reg64_t' -extra-condition 'd_is_const:reg1_t==0:reg1_t | d_val:reg64_t>=$0xffffffffffffffff:reg64_t' -extra-condition 'd_is_const:reg1_t==0:reg1_t | d_val:reg64_t<=$0xf:reg64_t' -extra-condition 'e_is_const:reg1_t==0:reg1_t | e_val:reg64_t>=$0xffffffffffffffff:reg64_t' -extra-condition 'e_is_const:reg1_t==0:reg1_t | e_val:reg64_t<=$0xf:reg64_t' -extra-condition 'f_is_const:reg1_t==0:reg1_t | f_val:reg64_t>=$0xffffffffffffffff:reg64_t' -extra-condition 'f_is_const:reg1_t==0:reg1_t | f_val:reg64_t<=$0xf:reg64_t' -synthesize-return-adaptor return-typeconv:0x000000000042d980:0x42dee2:6 -extra-condition ret_type:reg8_t==0x0:reg8_t -extra-condition ret_val:reg64_t==0x0000000000000000:reg64_t -disable-ce-cache -return-zero-missing-x64-syscalls -iteration-limit 100000000 -dont-compare-linux-syscalls -region-limit 8 -branch-preference 0x42df12:0 -trace-iterations -trace-assigns -solve-final-pc -trace-stopping -random-seed 5654894 -- ./obfs_clone2_static 1332 1333 g ceinputs
  Loading executable from ./obfs_clone2_static
  Loading       text segment from 00400000 to 00501900
  Loading       data segment from 00701eb0 to 00703db0
                Zero filling from 00703db0 to 00706528
          Extra zero filling from 00706528 to 00707000
  Setting initial break to 0x00707000
  Loading       NOTE segment from 00400190 to 004001d4
  Loading        TLS segment from 00701eb0 to 00701ed0
  Loading      STACK segment from 00000000 to 00000000
  Loading      RELRO segment from 00701eb0 to 00702000
  Skipping missing env. var DISPLAY
  Skipping missing env. var EDITOR
  From real env., setting env. var HOME to /home/grad06/xxxxxxx
  From real env., setting env. var LANG to en_US.UTF-8
  From real env., setting env. var LOGNAME to xxxxxxx
  Skipping missing env. var PAGER
  From real env., setting env. var PATH to /home/grad06/xxxxxxx/.opam/system/bin:/home/fac05/xxxxxxxx/soft/amd64/caml/ocaml/4.02.1/bin:/home/fac05/xxxxxxxx/soft/amd64/caml/opam/1.1.2/bin:/soft/scheme/mit-gnu/9.2/trusty64/bin:/soft/perl5.14.1/bin:/soft/jdk1.7.0_76/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/soft/netbeans-8.0.2/bin:/opt/gnu/bin:/opt/local/bin:/soft/vt-1.07:/usr/X11R6/bin:/soft/X11R6.3/bin:/soft/math8.0.1/bin:/export/scratch/xxxxxxx/fuzzball-adaptorsynth/exec_utils/:/export/scratch/xxxxxxx/fuzzball-adaptorsynth/stp:/export/scratch/xxxxxxx/code/dwarfdump/:/export/scratch/xxxxxxx/fuzzball-adaptorsynth/libasmir/apps:/export/scratch/xxxxxxx/spim-install/usr/bin/spim/:/export/scratch/xxxxxxx/LLVM/build/bin:/export/scratch/xxxxxxx/solvers
  From real env., setting env. var PWD to /export/scratch/xxxxxxx/fuzzball-synth/eg/artifact/obfs
  From real env., setting env. var SHELL to /bin/bash
  From real env., setting env. var TERM to xterm-256color
  From real env., setting env. var USER to xxxxxxx
  Skipping missing env. var USERNAME
  Skipping missing env. var XAUTHORITY
  Initial stack pointer is 0xbfffd000
  Starting address 0x00400f7e, fuzz start 0x0042df90
  Initial registers:
  %rax: 0:reg64_t
  %rbx: 0:reg64_t
  %rcx: 0:reg64_t
  %rdx: 0:reg64_t
  %rsi: 0:reg64_t
  %rdi: 0:reg64_t
  %rsp: 0xbfffd000:reg64_t
  %rbp: 0:reg64_t
  %r8: 0:reg64_t
  %r9: 0:reg64_t
  %r10: 0:reg64_t
  %r11: 0:reg64_t
  %r12: 0:reg64_t
  %r13: 0:reg64_t
  %r14: 0:reg64_t
  %r15: 0:reg64_t
  CF: false
  PF: false
  AF: false
  ZF: false
  SF: false
  OF: false
  YMM0: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  YMM1: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  YMM2: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  YMM3: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  YMM4: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  YMM5: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  YMM6: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  YMM7: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  YMM8: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  YMM9: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  YMM10: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  YMM11: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  YMM12: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  YMM13: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  YMM14: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  YMM15: 0:reg64_t 0:reg64_t 0:reg64_t 0:reg64_t
  Pre-fuzzing execution...
  uname(0xbfffcd80) = 0 (0x00000000)
  brk(0x00000000) = 7368704 (0x00707000)
  brk(0x007081c0) = 7373248 (0x007081c0)
  arch_prctl(4098, 0x00707880) = 0 (0x00000000)
  readlink("/proc/self/exe", 0xbfffbeb0, 4096) = 63 (0x0000003f)
  brk(0x007291c0) = 7508416 (0x007291c0)
  brk(0x0072a000) = 7512064 (0x0072a000)
  access("/etc/ld.so.nohwcap", 0x0) = -2 (0xfffffffffffffffe)
  open("ceinputs", 0x0, 0o0) = 3 (0x00000003)
  GSSM#make_snap 1 -> 2
  GSM#make_snap called
  Setting up symbolic values:
  GSSSM#make_snap 2 -> 3
  linux_syscalls#make_snap called
  Took snapshot
  Iteration 1:
  fstat(3, 0xbfffc8b0) = 0 (0x00000000)
  mmap(0x00000000, 4096, 0x3, 0x22, -1, 0) = 1342177280 (0x50000000)
  read(3, 0x50000000, 4096) = 31 (0x0000001f)
  fstat(1, 0xbfffc570) = 0 (0x00000000)
  mmap(0x00000000, 4096, 0x3, 0x22, -1, 0) = 1342181376 (0x50001000)
  write(1, 0x50001000, 15)
  read ce inputs
   = 15 (0x0000000f)
  write(1, 0x50001000, 12)
  Starting f1
   = 12 (0x0000000c)
  SRFM#make_sym_snap called
  FM#make_f1_conc_snap called
  GSSM#make_snap 3 -> 4
  GSM#make_snap called
  FM#make_f1_special_handlers_snap
  linux_syscalls#make_f1_snap called
  linux_syscalls#make_snap called
  SRFM#save_sym_se saving f1_hash_list.length = 0
  FM#save_f1_conc_se called
  AS#ready to apply (0.000000 sec). eof1
  GSSM#reset4_3 4 -> 3 
  GSM#reset called
  GHM#clear called
  FM#reset_f1_special_handlers_snap
  linux_syscalls#reset_f1_snap called
  write(1, 0x50001000, 13)
  Completed f1
   = 13 (0x0000000d)
  write(1, 0x50001000, 20)
  Starting adapted_f1
   = 20 (0x00000014)
  SRFM#make_f2_sym_snap called
  FM#make_f2_conc_snap called
  GSSM#make_snap 3 -> 4
  GSM#make_snap called
  FM#make_f2_special_handlers_snap
  linux_syscalls#make_f2_snap called
  linux_syscalls#make_snap called
  Starting simple adaptor
  setting arg=0x42420030:reg64_t
  setting arg=0x42420030:reg64_t
  setting arg=0x42420030:reg64_t
  setting arg=0x42420030:reg64_t
  setting arg=0x42420030:reg64_t
  setting arg=1:reg64_t
  AS#ready to apply (0.000000 sec). sof2
  SRFM#Generating structure adaptor formulas...SRFM#ready to apply (0.000000 sec).
  exec_runloop#thunk() should save arg regs here
  Starting return-typeconv adaptor
  SRFM#compare_sym_se called len(f1_h_l) = 0 len(f2_h_l)=0
  f1_hash_list_len = 0 f2_hash_list_len = 0
  FM#compare_conc_se called
  all side-effects were equal
  GSSM#reset4_3 4 -> 3 
  GSM#reset called
  GHM#clear called
  FM#reset_f2_special_handlers_snap
  linux_syscalls#reset_f2_snap called
  t0 =  ret_type_13357:reg8_t == 0:reg8_t  ? 0xfa005713:reg64_t :
   ( ret_type_13357:reg8_t == 1:reg8_t  ? ret_val_13358:reg64_t :
   ( ret_type_13357:reg8_t == 0xb:reg8_t  ?
   ( ret_val_13358:reg64_t == 5:reg64_t  ? 0x42420030:reg64_t :
   ( ret_val_13358:reg64_t == 4:reg64_t  ? 0x42420030:reg64_t :
   ( ret_val_13358:reg64_t == 3:reg64_t  ? 0x42420030:reg64_t :
   ( ret_val_13358:reg64_t == 2:reg64_t  ? 0x42420030:reg64_t :
   ( ret_val_13358:reg64_t == 1:reg64_t  ? 0x42420030:reg64_t :
   1:reg64_t)))))
   :
   ( ret_type_13357:reg8_t == 0xc:reg8_t  ?
   ( ret_val_13358:reg64_t == 5:reg64_t  ? 0x42420030:reg64_t :
   ( ret_val_13358:reg64_t == 4:reg64_t  ? 0x42420030:reg64_t :
   ( ret_val_13358:reg64_t == 3:reg64_t  ? 0x42420030:reg64_t :
   ( ret_val_13358:reg64_t == 2:reg64_t  ? 0x42420030:reg64_t :
   ( ret_val_13358:reg64_t == 1:reg64_t  ? 0x42420030:reg64_t :
   1:reg64_t)))))
   :
   ( ret_type_13357:reg8_t == 0x15:reg8_t  ?
   ( ret_val_13358:reg64_t == 5:reg64_t  ? 0x30:reg64_t :
   ( ret_val_13358:reg64_t == 4:reg64_t  ? 0x30:reg64_t :
   ( ret_val_13358:reg64_t == 3:reg64_t  ? 0x30:reg64_t :
   ( ret_val_13358:reg64_t == 2:reg64_t  ? 0x30:reg64_t :
   ( ret_val_13358:reg64_t == 1:reg64_t  ? 0x30:reg64_t :
   1:reg64_t)))))
   :
   ( ret_type_13357:reg8_t == 0x16:reg8_t  ?
   ( ret_val_13358:reg64_t == 5:reg64_t  ? 0x30:reg64_t :
   ( ret_val_13358:reg64_t == 4:reg64_t  ? 0x30:reg64_t :
   ( ret_val_13358:reg64_t == 3:reg64_t  ? 0x30:reg64_t :
   ( ret_val_13358:reg64_t == 2:reg64_t  ? 0x30:reg64_t :
   ( ret_val_13358:reg64_t == 1:reg64_t  ? 0x30:reg64_t :
   1:reg64_t)))))
   :
   ( ret_type_13357:reg8_t == 0x1f:reg8_t  ?
   ( ret_val_13358:reg64_t == 5:reg64_t  ? 0x30:reg64_t :
   ( ret_val_13358:reg64_t == 4:reg64_t  ? 0x30:reg64_t :
   ( ret_val_13358:reg64_t == 3:reg64_t  ? 0x30:reg64_t :
   ( ret_val_13358:reg64_t == 2:reg64_t  ? 0x30:reg64_t :
   ( ret_val_13358:reg64_t == 1:reg64_t  ? 0x30:reg64_t :
   1:reg64_t)))))
   :
   ( ret_type_13357:reg8_t == 0x20:reg8_t  ?
   ( ret_val_13358:reg64_t == 5:reg64_t  ? 0x30:reg64_t :
   ( ret_val_13358:reg64_t == 4:reg64_t  ? 0x30:reg64_t :
   ( ret_val_13358:reg64_t == 3:reg64_t  ? 0x30:reg64_t :
   ( ret_val_13358:reg64_t == 2:reg64_t  ? 0x30:reg64_t :
   ( ret_val_13358:reg64_t == 1:reg64_t  ? 0x30:reg64_t :
   1:reg64_t)))))
   :
   ( ret_type_13357:reg8_t == 0x29:reg8_t  ?
   ( ret_val_13358:reg64_t == 5:reg64_t  ? 0:reg64_t :
   ( ret_val_13358:reg64_t == 4:reg64_t  ? 0:reg64_t :
   ( ret_val_13358:reg64_t == 3:reg64_t  ? 0:reg64_t :
   ( ret_val_13358:reg64_t == 2:reg64_t  ? 0:reg64_t :
   ( ret_val_13358:reg64_t == 1:reg64_t  ? 0:reg64_t :
   0xffffffffffffffff:reg64_t)))))
   :
   ( ret_type_13357:reg8_t == 0x2a:reg8_t  ?
   ( ret_val_13358:reg64_t == 5:reg64_t  ? 0:reg64_t :
   ( ret_val_13358:reg64_t == 4:reg64_t  ? 0:reg64_t :
   ( ret_val_13358:reg64_t == 3:reg64_t  ? 0:reg64_t :
   ( ret_val_13358:reg64_t == 2:reg64_t  ? 0:reg64_t :
   ( ret_val_13358:reg64_t == 1:reg64_t  ? 0:reg64_t :
   1:reg64_t)))))
   :
   ( ret_type_13357:reg8_t == 0x33:reg8_t  ?
   0xfffffffffa005713:reg64_t :
   ( ret_type_13357:reg8_t == 0x34:reg8_t  ?
   0xfa005713:reg64_t :
   ( ret_type_13357:reg8_t == 0x35:reg8_t  ? 1:reg64_t :
   ( ret_type_13357:reg8_t == 0x3d:reg8_t  ?
   0x5713:reg64_t :
   ( ret_type_13357:reg8_t == 0x3e:reg8_t  ?
   0x5713:reg64_t :
   ( ret_type_13357:reg8_t == 0x47:reg8_t  ?
   0x13:reg64_t :
   ( ret_type_13357:reg8_t == 0x48:reg8_t  ?
   0x13:reg64_t :
   ( ret_type_13357:reg8_t == 0x51:reg8_t  ?
   0xffffffffffffffff:reg64_t : 1:reg64_t)))))))))))))))))
  t1 =  ret_type_13357:reg8_t == 0:reg8_t  ? 0xfa005700:reg64_t :
   ( ret_type_13357:reg8_t == 1:reg8_t  ?
    ret_val_13358:reg64_t & 0xffffffffffffff00:reg64_t  :
   ( ret_type_13357:reg8_t == 0xb:reg8_t  ?
   ( ret_val_13358:reg64_t == 5:reg64_t  ? 0x42420000:reg64_t :
   ( ret_val_13358:reg64_t == 4:reg64_t  ? 0x42420000:reg64_t :
   ( ret_val_13358:reg64_t == 3:reg64_t  ? 0x42420000:reg64_t :
   ( ret_val_13358:reg64_t == 2:reg64_t  ? 0x42420000:reg64_t :
   ( ret_val_13358:reg64_t == 1:reg64_t  ? 0x42420000:reg64_t :
   0:reg64_t)))))
   :
   ( ret_type_13357:reg8_t == 0xc:reg8_t  ?
   ( ret_val_13358:reg64_t == 5:reg64_t  ? 0x42420000:reg64_t :
   ( ret_val_13358:reg64_t == 4:reg64_t  ? 0x42420000:reg64_t :
   ( ret_val_13358:reg64_t == 3:reg64_t  ? 0x42420000:reg64_t :
   ( ret_val_13358:reg64_t == 2:reg64_t  ? 0x42420000:reg64_t :
   ( ret_val_13358:reg64_t == 1:reg64_t  ? 0x42420000:reg64_t :
   0:reg64_t)))))
   :
   ( ret_type_13357:reg8_t == 0x15:reg8_t  ? 0:reg64_t :
   ( ret_type_13357:reg8_t == 0x16:reg8_t  ? 0:reg64_t :
   ( ret_type_13357:reg8_t == 0x1f:reg8_t  ? 0:reg64_t :
   ( ret_type_13357:reg8_t == 0x20:reg8_t  ? 0:reg64_t :
   ( ret_type_13357:reg8_t == 0x29:reg8_t  ?
   ( ret_val_13358:reg64_t == 5:reg64_t  ? 0:reg64_t :
   ( ret_val_13358:reg64_t == 4:reg64_t  ? 0:reg64_t :
   ( ret_val_13358:reg64_t == 3:reg64_t  ? 0:reg64_t :
   ( ret_val_13358:reg64_t == 2:reg64_t  ? 0:reg64_t :
   ( ret_val_13358:reg64_t == 1:reg64_t  ? 0:reg64_t :
   0xffffffffffffff00:reg64_t)))))
   :
   ( ret_type_13357:reg8_t == 0x2a:reg8_t  ? 0:reg64_t :
   ( ret_type_13357:reg8_t == 0x33:reg8_t  ?
   0xfffffffffa005700:reg64_t :
   ( ret_type_13357:reg8_t == 0x34:reg8_t  ?
   0xfa005700:reg64_t :
   ( ret_type_13357:reg8_t == 0x35:reg8_t  ? 0:reg64_t :
   ( ret_type_13357:reg8_t == 0x3d:reg8_t  ?
   0x5700:reg64_t :
   ( ret_type_13357:reg8_t == 0x3e:reg8_t  ?
   0x5700:reg64_t :
   ( ret_type_13357:reg8_t == 0x47:reg8_t  ?
   0:reg64_t :
   ( ret_type_13357:reg8_t == 0x48:reg8_t  ?
   0:reg64_t :
   ( ret_type_13357:reg8_t == 0x51:reg8_t  ?
   0xffffffffffffff00:reg64_t : 0:reg64_t)))))))))))))))))
  Symbolic branch condition (0x004423c2)  cast(cast(t1_23700:reg64_t)L:reg8_t)U:reg64_t == 0:reg64_t 
  Current Path String: 
  Trying true: Satisfiable.
  Input vars: a_val=0x1 
  Trying false: Unsatisfiable.
  Current Path String: 1
  Current path: 1
  write(1, 0x50001000, 21)
  Completed adapted_f1
   = 21 (0x00000015)
  Symbolic branch condition (0x0042df12)  t0_23698:reg64_t == 0xfa005713:reg64_t 
  Current Path String: 1
  Trying false: Unsatisfiable.
  Trying true: Satisfiable.
  Input vars: a_val=0x1 
  Current Path String: 11
  Current path: 11
  t2 =  cast( cast( t0_23698:reg64_t == 0xfa005713:reg64_t )U:reg8_t & 1:reg8_t )U:
   reg64_t == 0:reg64_t 
  t3 =  cast( cast( t0_23698:reg64_t == 0xfa005713:reg64_t )U:reg8_t & 1:reg8_t )U:
   reg64_t
   | 
   (
   (cast( t0_23698:reg64_t == 0xfa005713:reg64_t )U:reg64_t
   | 0xa686300:reg64_t)
    & 0xffffffffffffff00:reg64_t)
    
  write(1, 0x50001000, 6)
  Match
   = 6 (0x00000006)
  exit_group(0) (no return)
  Stopping when program called exit() at 0x004717a7
  Coverage increased to 4294 on 1
  Path: 11
  Final path: 11
  Satisfiable.
  Input vars: a_val=0x1 
  CPU time 0.144000 sec, 0.144000 total
  Wall time 0.146029 sec, 0.146031 total
  Final coverage: 4294
elapsed time = 4, last CE search time = 0
Success!
Final test set:
 1111621632, 1
 1111621656, 1
Final adaptors: arg=,1,,,,,,,,,,, ret=,, with 1,1,complete
